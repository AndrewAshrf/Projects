
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004da2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00004da2  00004e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000033e4  00000000  00000000  00004f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e4a  00000000  00000000  0000833c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00009186  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000250  00000000  00000000  00009386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b10  00000000  00000000  000095d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001782  00000000  00000000  0000c0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b1  00000000  00000000  0000d868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000ed1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  0000ef3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  0000f253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000fce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <main>
      7a:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 4d 04 	call	0x89a	; 0x89a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e8       	ldi	r26, 0x8A	; 138
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b4 26 	jmp	0x4d68	; 0x4d68 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e8       	ldi	r24, 0x8A	; 138
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b4 26 	jmp	0x4d68	; 0x4d68 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a0 26 	jmp	0x4d40	; 0x4d40 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e8       	ldi	r22, 0x8A	; 138
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 bc 26 	jmp	0x4d78	; 0x4d78 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

000007da <__nesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__nesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__nesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__nesf2+0x58>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

0000083a <__gtsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

0000089a <__gesf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__gesf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__gesf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__gesf2+0x58>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

000008fa <__ltsf2>:
     8fa:	a8 e1       	ldi	r26, 0x18	; 24
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__prologue_saves__+0x18>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	2d 83       	std	Y+5, r18	; 0x05
     910:	3e 83       	std	Y+6, r19	; 0x06
     912:	4f 83       	std	Y+7, r20	; 0x07
     914:	58 87       	std	Y+8, r21	; 0x08
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	e8 2e       	mov	r14, r24
     91a:	f1 2c       	mov	r15, r1
     91c:	ec 0e       	add	r14, r28
     91e:	fd 1e       	adc	r15, r29
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	b7 01       	movw	r22, r14
     926:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     92a:	8e 01       	movw	r16, r28
     92c:	0f 5e       	subi	r16, 0xEF	; 239
     92e:	1f 4f       	sbci	r17, 0xFF	; 255
     930:	ce 01       	movw	r24, r28
     932:	05 96       	adiw	r24, 0x05	; 5
     934:	b8 01       	movw	r22, r16
     936:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     93a:	89 85       	ldd	r24, Y+9	; 0x09
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	40 f0       	brcs	.+16     	; 0x950 <__ltsf2+0x56>
     940:	89 89       	ldd	r24, Y+17	; 0x11
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	28 f0       	brcs	.+10     	; 0x950 <__ltsf2+0x56>
     946:	c7 01       	movw	r24, r14
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__ltsf2+0x58>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	68 96       	adiw	r28, 0x18	; 24
     954:	e6 e0       	ldi	r30, 0x06	; 6
     956:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__epilogue_restores__+0x18>

0000095a <__floatsisf>:
     95a:	a8 e0       	ldi	r26, 0x08	; 8
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <__prologue_saves__+0x12>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	da 01       	movw	r26, r20
     970:	c9 01       	movw	r24, r18
     972:	88 27       	eor	r24, r24
     974:	b7 fd       	sbrc	r27, 7
     976:	83 95       	inc	r24
     978:	99 27       	eor	r25, r25
     97a:	aa 27       	eor	r26, r26
     97c:	bb 27       	eor	r27, r27
     97e:	b8 2e       	mov	r11, r24
     980:	21 15       	cp	r18, r1
     982:	31 05       	cpc	r19, r1
     984:	41 05       	cpc	r20, r1
     986:	51 05       	cpc	r21, r1
     988:	19 f4       	brne	.+6      	; 0x990 <__floatsisf+0x36>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	3a c0       	rjmp	.+116    	; 0xa04 <__floatsisf+0xaa>
     990:	88 23       	and	r24, r24
     992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x64>
     994:	20 30       	cpi	r18, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	38 07       	cpc	r19, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	48 07       	cpc	r20, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	58 07       	cpc	r21, r24
     9a2:	29 f4       	brne	.+10     	; 0x9ae <__floatsisf+0x54>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	9f ec       	ldi	r25, 0xCF	; 207
     9ac:	30 c0       	rjmp	.+96     	; 0xa0e <__floatsisf+0xb4>
     9ae:	ee 24       	eor	r14, r14
     9b0:	ff 24       	eor	r15, r15
     9b2:	87 01       	movw	r16, r14
     9b4:	e2 1a       	sub	r14, r18
     9b6:	f3 0a       	sbc	r15, r19
     9b8:	04 0b       	sbc	r16, r20
     9ba:	15 0b       	sbc	r17, r21
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__floatsisf+0x68>
     9be:	79 01       	movw	r14, r18
     9c0:	8a 01       	movw	r16, r20
     9c2:	8e e1       	ldi	r24, 0x1E	; 30
     9c4:	c8 2e       	mov	r12, r24
     9c6:	d1 2c       	mov	r13, r1
     9c8:	dc 82       	std	Y+4, r13	; 0x04
     9ca:	cb 82       	std	Y+3, r12	; 0x03
     9cc:	ed 82       	std	Y+5, r14	; 0x05
     9ce:	fe 82       	std	Y+6, r15	; 0x06
     9d0:	0f 83       	std	Y+7, r16	; 0x07
     9d2:	18 87       	std	Y+8, r17	; 0x08
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	84 f4       	brge	.+32     	; 0xa04 <__floatsisf+0xaa>
     9e4:	08 2e       	mov	r0, r24
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__floatsisf+0x96>
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	00 1f       	adc	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	0a 94       	dec	r0
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__floatsisf+0x8e>
     9f4:	ed 82       	std	Y+5, r14	; 0x05
     9f6:	fe 82       	std	Y+6, r15	; 0x06
     9f8:	0f 83       	std	Y+7, r16	; 0x07
     9fa:	18 87       	std	Y+8, r17	; 0x08
     9fc:	c8 1a       	sub	r12, r24
     9fe:	d9 0a       	sbc	r13, r25
     a00:	dc 82       	std	Y+4, r13	; 0x04
     a02:	cb 82       	std	Y+3, r12	; 0x03
     a04:	ba 82       	std	Y+2, r11	; 0x02
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     a0e:	28 96       	adiw	r28, 0x08	; 8
     a10:	e9 e0       	ldi	r30, 0x09	; 9
     a12:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <__epilogue_restores__+0x12>

00000a16 <__fixsfsi>:
     a16:	ac e0       	ldi	r26, 0x0C	; 12
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__prologue_saves__+0x20>
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	7a 83       	std	Y+2, r23	; 0x02
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	6b 5f       	subi	r22, 0xFB	; 251
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	61 f1       	breq	.+88     	; 0xa96 <__fixsfsi+0x80>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	50 f1       	brcs	.+84     	; 0xa96 <__fixsfsi+0x80>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	21 f4       	brne	.+8      	; 0xa4e <__fixsfsi+0x38>
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	88 23       	and	r24, r24
     a4a:	51 f1       	breq	.+84     	; 0xaa0 <__fixsfsi+0x8a>
     a4c:	2e c0       	rjmp	.+92     	; 0xaaa <__fixsfsi+0x94>
     a4e:	2f 81       	ldd	r18, Y+7	; 0x07
     a50:	38 85       	ldd	r19, Y+8	; 0x08
     a52:	37 fd       	sbrc	r19, 7
     a54:	20 c0       	rjmp	.+64     	; 0xa96 <__fixsfsi+0x80>
     a56:	6e 81       	ldd	r22, Y+6	; 0x06
     a58:	2f 31       	cpi	r18, 0x1F	; 31
     a5a:	31 05       	cpc	r19, r1
     a5c:	1c f0       	brlt	.+6      	; 0xa64 <__fixsfsi+0x4e>
     a5e:	66 23       	and	r22, r22
     a60:	f9 f0       	breq	.+62     	; 0xaa0 <__fixsfsi+0x8a>
     a62:	23 c0       	rjmp	.+70     	; 0xaaa <__fixsfsi+0x94>
     a64:	8e e1       	ldi	r24, 0x1E	; 30
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19
     a6c:	29 85       	ldd	r18, Y+9	; 0x09
     a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a70:	4b 85       	ldd	r20, Y+11	; 0x0b
     a72:	5c 85       	ldd	r21, Y+12	; 0x0c
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fixsfsi+0x68>
     a76:	56 95       	lsr	r21
     a78:	47 95       	ror	r20
     a7a:	37 95       	ror	r19
     a7c:	27 95       	ror	r18
     a7e:	8a 95       	dec	r24
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__fixsfsi+0x60>
     a82:	66 23       	and	r22, r22
     a84:	b1 f0       	breq	.+44     	; 0xab2 <__fixsfsi+0x9c>
     a86:	50 95       	com	r21
     a88:	40 95       	com	r20
     a8a:	30 95       	com	r19
     a8c:	21 95       	neg	r18
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <__fixsfsi+0x9c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__fixsfsi+0x9c>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f ef       	ldi	r20, 0xFF	; 255
     aa6:	5f e7       	ldi	r21, 0x7F	; 127
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__fixsfsi+0x9c>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e8       	ldi	r21, 0x80	; 128
     ab2:	b9 01       	movw	r22, r18
     ab4:	ca 01       	movw	r24, r20
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	e2 e0       	ldi	r30, 0x02	; 2
     aba:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__epilogue_restores__+0x20>

00000abe <__floatunsisf>:
     abe:	a8 e0       	ldi	r26, 0x08	; 8
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e5 e6       	ldi	r30, 0x65	; 101
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
     ac6:	0c 94 a0 26 	jmp	0x4d40	; 0x4d40 <__prologue_saves__+0x10>
     aca:	7b 01       	movw	r14, r22
     acc:	8c 01       	movw	r16, r24
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	19 f4       	brne	.+6      	; 0xade <__floatunsisf+0x20>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	60 c0       	rjmp	.+192    	; 0xb9e <__floatunsisf+0xe0>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	8e e1       	ldi	r24, 0x1E	; 30
     ae4:	c8 2e       	mov	r12, r24
     ae6:	d1 2c       	mov	r13, r1
     ae8:	dc 82       	std	Y+4, r13	; 0x04
     aea:	cb 82       	std	Y+3, r12	; 0x03
     aec:	ed 82       	std	Y+5, r14	; 0x05
     aee:	fe 82       	std	Y+6, r15	; 0x06
     af0:	0f 83       	std	Y+7, r16	; 0x07
     af2:	18 87       	std	Y+8, r17	; 0x08
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     afc:	fc 01       	movw	r30, r24
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f7 ff       	sbrs	r31, 7
     b02:	3b c0       	rjmp	.+118    	; 0xb7a <__floatunsisf+0xbc>
     b04:	22 27       	eor	r18, r18
     b06:	33 27       	eor	r19, r19
     b08:	2e 1b       	sub	r18, r30
     b0a:	3f 0b       	sbc	r19, r31
     b0c:	57 01       	movw	r10, r14
     b0e:	68 01       	movw	r12, r16
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__floatunsisf+0x5e>
     b14:	d6 94       	lsr	r13
     b16:	c7 94       	ror	r12
     b18:	b7 94       	ror	r11
     b1a:	a7 94       	ror	r10
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__floatunsisf+0x56>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0x7c>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	aa 1f       	adc	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	2a 95       	dec	r18
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0x74>
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	a1 09       	sbc	r26, r1
     b42:	b1 09       	sbc	r27, r1
     b44:	8e 21       	and	r24, r14
     b46:	9f 21       	and	r25, r15
     b48:	a0 23       	and	r26, r16
     b4a:	b1 23       	and	r27, r17
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	a1 05       	cpc	r26, r1
     b50:	b1 05       	cpc	r27, r1
     b52:	21 f0       	breq	.+8      	; 0xb5c <__floatunsisf+0x9e>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4a 29       	or	r20, r10
     b5e:	5b 29       	or	r21, r11
     b60:	6c 29       	or	r22, r12
     b62:	7d 29       	or	r23, r13
     b64:	4d 83       	std	Y+5, r20	; 0x05
     b66:	5e 83       	std	Y+6, r21	; 0x06
     b68:	6f 83       	std	Y+7, r22	; 0x07
     b6a:	78 87       	std	Y+8, r23	; 0x08
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	8e 1b       	sub	r24, r30
     b72:	9f 0b       	sbc	r25, r31
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <__floatunsisf+0xe0>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	81 f0       	breq	.+32     	; 0xb9e <__floatunsisf+0xe0>
     b7e:	0e 2e       	mov	r0, r30
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__floatunsisf+0xcc>
     b82:	ee 0c       	add	r14, r14
     b84:	ff 1c       	adc	r15, r15
     b86:	00 1f       	adc	r16, r16
     b88:	11 1f       	adc	r17, r17
     b8a:	0a 94       	dec	r0
     b8c:	d2 f7       	brpl	.-12     	; 0xb82 <__floatunsisf+0xc4>
     b8e:	ed 82       	std	Y+5, r14	; 0x05
     b90:	fe 82       	std	Y+6, r15	; 0x06
     b92:	0f 83       	std	Y+7, r16	; 0x07
     b94:	18 87       	std	Y+8, r17	; 0x08
     b96:	ce 1a       	sub	r12, r30
     b98:	df 0a       	sbc	r13, r31
     b9a:	dc 82       	std	Y+4, r13	; 0x04
     b9c:	cb 82       	std	Y+3, r12	; 0x03
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     ba8:	28 96       	adiw	r28, 0x08	; 8
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	0c 94 bc 26 	jmp	0x4d78	; 0x4d78 <__epilogue_restores__+0x10>

00000bb0 <__clzsi2>:
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e8 16       	cp	r14, r24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	f8 06       	cpc	r15, r24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 07       	cpc	r16, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	18 07       	cpc	r17, r24
     bcc:	88 f4       	brcc	.+34     	; 0xbf0 <__clzsi2+0x40>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	e8 16       	cp	r14, r24
     bd2:	f1 04       	cpc	r15, r1
     bd4:	01 05       	cpc	r16, r1
     bd6:	11 05       	cpc	r17, r1
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <__clzsi2+0x36>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <__clzsi2+0x36>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	17 c0       	rjmp	.+46     	; 0xc14 <__clzsi2+0x64>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	12 c0       	rjmp	.+36     	; 0xc14 <__clzsi2+0x64>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	e8 16       	cp	r14, r24
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	f8 06       	cpc	r15, r24
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 07       	cpc	r16, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	18 07       	cpc	r17, r24
     c00:	28 f0       	brcs	.+10     	; 0xc0c <__clzsi2+0x5c>
     c02:	88 e1       	ldi	r24, 0x18	; 24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__clzsi2+0x64>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	20 e2       	ldi	r18, 0x20	; 32
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	28 1b       	sub	r18, r24
     c1e:	39 0b       	sbc	r19, r25
     c20:	4a 0b       	sbc	r20, r26
     c22:	5b 0b       	sbc	r21, r27
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__clzsi2+0x7e>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	8a 95       	dec	r24
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__clzsi2+0x76>
     c32:	f7 01       	movw	r30, r14
     c34:	ee 56       	subi	r30, 0x6E	; 110
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	28 1b       	sub	r18, r24
     c3c:	31 09       	sbc	r19, r1
     c3e:	41 09       	sbc	r20, r1
     c40:	51 09       	sbc	r21, r1
     c42:	c9 01       	movw	r24, r18
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <__pack_f>:
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	e4 80       	ldd	r14, Z+4	; 0x04
     c5c:	f5 80       	ldd	r15, Z+5	; 0x05
     c5e:	06 81       	ldd	r16, Z+6	; 0x06
     c60:	17 81       	ldd	r17, Z+7	; 0x07
     c62:	d1 80       	ldd	r13, Z+1	; 0x01
     c64:	80 81       	ld	r24, Z
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	48 f4       	brcc	.+18     	; 0xc7c <__pack_f+0x2e>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e1       	ldi	r26, 0x10	; 16
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 2a       	or	r14, r24
     c74:	f9 2a       	or	r15, r25
     c76:	0a 2b       	or	r16, r26
     c78:	1b 2b       	or	r17, r27
     c7a:	a5 c0       	rjmp	.+330    	; 0xdc6 <__pack_f+0x178>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__pack_f+0x34>
     c80:	9f c0       	rjmp	.+318    	; 0xdc0 <__pack_f+0x172>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	21 f4       	brne	.+8      	; 0xc8e <__pack_f+0x40>
     c86:	ee 24       	eor	r14, r14
     c88:	ff 24       	eor	r15, r15
     c8a:	87 01       	movw	r16, r14
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__pack_f+0x4a>
     c8e:	e1 14       	cp	r14, r1
     c90:	f1 04       	cpc	r15, r1
     c92:	01 05       	cpc	r16, r1
     c94:	11 05       	cpc	r17, r1
     c96:	19 f4       	brne	.+6      	; 0xc9e <__pack_f+0x50>
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	96 c0       	rjmp	.+300    	; 0xdca <__pack_f+0x17c>
     c9e:	62 81       	ldd	r22, Z+2	; 0x02
     ca0:	73 81       	ldd	r23, Z+3	; 0x03
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	62 38       	cpi	r22, 0x82	; 130
     ca6:	79 07       	cpc	r23, r25
     ca8:	0c f0       	brlt	.+2      	; 0xcac <__pack_f+0x5e>
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <__pack_f+0x114>
     cac:	22 e8       	ldi	r18, 0x82	; 130
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	26 1b       	sub	r18, r22
     cb2:	37 0b       	sbc	r19, r23
     cb4:	2a 31       	cpi	r18, 0x1A	; 26
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f0       	brlt	.+10     	; 0xcc4 <__pack_f+0x76>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	2a c0       	rjmp	.+84     	; 0xd18 <__pack_f+0xca>
     cc4:	b8 01       	movw	r22, r16
     cc6:	a7 01       	movw	r20, r14
     cc8:	02 2e       	mov	r0, r18
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__pack_f+0x86>
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	57 95       	ror	r21
     cd2:	47 95       	ror	r20
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__pack_f+0x7e>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x9c>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	2a 95       	dec	r18
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__pack_f+0x94>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	a1 09       	sbc	r26, r1
     cf2:	b1 09       	sbc	r27, r1
     cf4:	8e 21       	and	r24, r14
     cf6:	9f 21       	and	r25, r15
     cf8:	a0 23       	and	r26, r16
     cfa:	b1 23       	and	r27, r17
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	21 f0       	breq	.+8      	; 0xd0c <__pack_f+0xbe>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	9a 01       	movw	r18, r20
     d0e:	ab 01       	movw	r20, r22
     d10:	28 2b       	or	r18, r24
     d12:	39 2b       	or	r19, r25
     d14:	4a 2b       	or	r20, r26
     d16:	5b 2b       	or	r21, r27
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	a0 70       	andi	r26, 0x00	; 0
     d22:	b0 70       	andi	r27, 0x00	; 0
     d24:	80 34       	cpi	r24, 0x40	; 64
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__pack_f+0xee>
     d2e:	27 ff       	sbrs	r18, 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__pack_f+0xf6>
     d32:	20 5c       	subi	r18, 0xC0	; 192
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	4f 4f       	sbci	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0xf6>
     d3c:	21 5c       	subi	r18, 0xC1	; 193
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	4f 4f       	sbci	r20, 0xFF	; 255
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	3a 07       	cpc	r19, r26
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	4a 07       	cpc	r20, r26
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	5a 07       	cpc	r21, r26
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__pack_f+0x10e>
     d58:	e1 e0       	ldi	r30, 0x01	; 1
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	79 01       	movw	r14, r18
     d5e:	8a 01       	movw	r16, r20
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__pack_f+0x162>
     d62:	60 38       	cpi	r22, 0x80	; 128
     d64:	71 05       	cpc	r23, r1
     d66:	64 f5       	brge	.+88     	; 0xdc0 <__pack_f+0x172>
     d68:	fb 01       	movw	r30, r22
     d6a:	e1 58       	subi	r30, 0x81	; 129
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	d8 01       	movw	r26, r16
     d70:	c7 01       	movw	r24, r14
     d72:	8f 77       	andi	r24, 0x7F	; 127
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	a0 70       	andi	r26, 0x00	; 0
     d78:	b0 70       	andi	r27, 0x00	; 0
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	91 05       	cpc	r25, r1
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	39 f4       	brne	.+14     	; 0xd92 <__pack_f+0x144>
     d84:	e7 fe       	sbrs	r14, 7
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <__pack_f+0x154>
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__pack_f+0x14c>
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 0e       	add	r14, r24
     d9c:	f9 1e       	adc	r15, r25
     d9e:	0a 1f       	adc	r16, r26
     da0:	1b 1f       	adc	r17, r27
     da2:	17 ff       	sbrs	r17, 7
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__pack_f+0x162>
     da6:	16 95       	lsr	r17
     da8:	07 95       	ror	r16
     daa:	f7 94       	ror	r15
     dac:	e7 94       	ror	r14
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	16 95       	lsr	r17
     db4:	07 95       	ror	r16
     db6:	f7 94       	ror	r15
     db8:	e7 94       	ror	r14
     dba:	8a 95       	dec	r24
     dbc:	d1 f7       	brne	.-12     	; 0xdb2 <__pack_f+0x164>
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__pack_f+0x17c>
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	87 01       	movw	r16, r14
     dc6:	ef ef       	ldi	r30, 0xFF	; 255
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	6e 2f       	mov	r22, r30
     dcc:	67 95       	ror	r22
     dce:	66 27       	eor	r22, r22
     dd0:	67 95       	ror	r22
     dd2:	90 2f       	mov	r25, r16
     dd4:	9f 77       	andi	r25, 0x7F	; 127
     dd6:	d7 94       	ror	r13
     dd8:	dd 24       	eor	r13, r13
     dda:	d7 94       	ror	r13
     ddc:	8e 2f       	mov	r24, r30
     dde:	86 95       	lsr	r24
     de0:	49 2f       	mov	r20, r25
     de2:	46 2b       	or	r20, r22
     de4:	58 2f       	mov	r21, r24
     de6:	5d 29       	or	r21, r13
     de8:	b7 01       	movw	r22, r14
     dea:	ca 01       	movw	r24, r20
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	08 95       	ret

00000df8 <__unpack_f>:
     df8:	fc 01       	movw	r30, r24
     dfa:	db 01       	movw	r26, r22
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	22 81       	ldd	r18, Z+2	; 0x02
     e02:	62 2f       	mov	r22, r18
     e04:	6f 77       	andi	r22, 0x7F	; 127
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	22 1f       	adc	r18, r18
     e0a:	22 27       	eor	r18, r18
     e0c:	22 1f       	adc	r18, r18
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	89 2f       	mov	r24, r25
     e12:	88 0f       	add	r24, r24
     e14:	82 2b       	or	r24, r18
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	99 1f       	adc	r25, r25
     e1c:	99 27       	eor	r25, r25
     e1e:	99 1f       	adc	r25, r25
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	21 15       	cp	r18, r1
     e28:	31 05       	cpc	r19, r1
     e2a:	a9 f5       	brne	.+106    	; 0xe96 <__unpack_f+0x9e>
     e2c:	41 15       	cp	r20, r1
     e2e:	51 05       	cpc	r21, r1
     e30:	61 05       	cpc	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	11 f4       	brne	.+4      	; 0xe3a <__unpack_f+0x42>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <__unpack_f+0xb0>
     e3a:	82 e8       	ldi	r24, 0x82	; 130
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	9a 01       	movw	r18, r20
     e48:	ab 01       	movw	r20, r22
     e4a:	67 e0       	ldi	r22, 0x07	; 7
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	6a 95       	dec	r22
     e56:	d1 f7       	brne	.-12     	; 0xe4c <__unpack_f+0x54>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8c 93       	st	X, r24
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__unpack_f+0x80>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	12 97       	sbiw	r26, 0x02	; 2
     e78:	20 30       	cpi	r18, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	38 07       	cpc	r19, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	48 07       	cpc	r20, r24
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	58 07       	cpc	r21, r24
     e86:	58 f3       	brcs	.-42     	; 0xe5e <__unpack_f+0x66>
     e88:	14 96       	adiw	r26, 0x04	; 4
     e8a:	2d 93       	st	X+, r18
     e8c:	3d 93       	st	X+, r19
     e8e:	4d 93       	st	X+, r20
     e90:	5c 93       	st	X, r21
     e92:	17 97       	sbiw	r26, 0x07	; 7
     e94:	08 95       	ret
     e96:	2f 3f       	cpi	r18, 0xFF	; 255
     e98:	31 05       	cpc	r19, r1
     e9a:	79 f4       	brne	.+30     	; 0xeba <__unpack_f+0xc2>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	19 f4       	brne	.+6      	; 0xeac <__unpack_f+0xb4>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	8c 93       	st	X, r24
     eaa:	08 95       	ret
     eac:	64 ff       	sbrs	r22, 4
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__unpack_f+0xbe>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <__unpack_f+0xe2>
     eb6:	1c 92       	st	X, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <__unpack_f+0xe2>
     eba:	2f 57       	subi	r18, 0x7F	; 127
     ebc:	30 40       	sbci	r19, 0x00	; 0
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	3c 93       	st	X, r19
     ec2:	2e 93       	st	-X, r18
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	8c 93       	st	X, r24
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	44 0f       	add	r20, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	d1 f7       	brne	.-12     	; 0xecc <__unpack_f+0xd4>
     ed8:	70 64       	ori	r23, 0x40	; 64
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	4d 93       	st	X+, r20
     ede:	5d 93       	st	X+, r21
     ee0:	6d 93       	st	X+, r22
     ee2:	7c 93       	st	X, r23
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	08 95       	ret

00000ee8 <__fpcmp_parts_f>:
     ee8:	1f 93       	push	r17
     eea:	dc 01       	movw	r26, r24
     eec:	fb 01       	movw	r30, r22
     eee:	9c 91       	ld	r25, X
     ef0:	92 30       	cpi	r25, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__fpcmp_parts_f+0xe>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <__fpcmp_parts_f+0x9c>
     ef6:	80 81       	ld	r24, Z
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	08 f4       	brcc	.+2      	; 0xefe <__fpcmp_parts_f+0x16>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__fpcmp_parts_f+0x9c>
     efe:	94 30       	cpi	r25, 0x04	; 4
     f00:	51 f4       	brne	.+20     	; 0xf16 <__fpcmp_parts_f+0x2e>
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	1c 91       	ld	r17, X
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	99 f5       	brne	.+102    	; 0xf70 <__fpcmp_parts_f+0x88>
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	68 2f       	mov	r22, r24
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	61 1b       	sub	r22, r17
     f12:	71 09       	sbc	r23, r1
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <__fpcmp_parts_f+0xac>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f0       	breq	.+8      	; 0xf22 <__fpcmp_parts_f+0x3a>
     f1a:	92 30       	cpi	r25, 0x02	; 2
     f1c:	31 f4       	brne	.+12     	; 0xf2a <__fpcmp_parts_f+0x42>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	b9 f1       	breq	.+110    	; 0xf90 <__fpcmp_parts_f+0xa8>
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	89 f1       	breq	.+98     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f28:	2d c0       	rjmp	.+90     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	1c 91       	ld	r17, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	f1 f0       	breq	.+60     	; 0xf70 <__fpcmp_parts_f+0x88>
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	18 17       	cp	r17, r24
     f38:	d9 f4       	brne	.+54     	; 0xf70 <__fpcmp_parts_f+0x88>
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	94 f0       	brlt	.+36     	; 0xf70 <__fpcmp_parts_f+0x88>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	bc f0       	brlt	.+46     	; 0xf80 <__fpcmp_parts_f+0x98>
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8d 91       	ld	r24, X+
     f56:	9d 91       	ld	r25, X+
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	24 81       	ldd	r18, Z+4	; 0x04
     f60:	35 81       	ldd	r19, Z+5	; 0x05
     f62:	46 81       	ldd	r20, Z+6	; 0x06
     f64:	57 81       	ldd	r21, Z+7	; 0x07
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	4a 07       	cpc	r20, r26
     f6c:	5b 07       	cpc	r21, r27
     f6e:	18 f4       	brcc	.+6      	; 0xf76 <__fpcmp_parts_f+0x8e>
     f70:	11 23       	and	r17, r17
     f72:	41 f0       	breq	.+16     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	a4 07       	cpc	r26, r20
     f7c:	b5 07       	cpc	r27, r21
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <__fpcmp_parts_f+0xa8>
     f80:	11 23       	and	r17, r17
     f82:	19 f0       	breq	.+6      	; 0xf8a <__fpcmp_parts_f+0xa2>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <__fpcmp_parts_f+0xac>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__fpcmp_parts_f+0xac>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	cb 01       	movw	r24, r22
     f96:	1f 91       	pop	r17
     f98:	08 95       	ret

00000f9a <DIO_VidSetPinDirection>:
 * Description : Set direction of certain Pin in this Port
 * Arguments   : Port , Pin , Value
 * return      : void
 */
void DIO_VidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Dir)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	27 97       	sbiw	r28, 0x07	; 7
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	6a 83       	std	Y+2, r22	; 0x02
     fb2:	4b 83       	std	Y+3, r20	; 0x03
	if(1== Copy_U8Dir)
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <DIO_VidSetPinDirection+0x22>
     fba:	6f c0       	rjmp	.+222    	; 0x109a <DIO_VidSetPinDirection+0x100>
	{
		switch(Copy_U8Port)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	3f 83       	std	Y+7, r19	; 0x07
     fc4:	2e 83       	std	Y+6, r18	; 0x06
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 05       	cpc	r25, r1
     fce:	49 f1       	breq	.+82     	; 0x1022 <DIO_VidSetPinDirection+0x88>
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	2c f4       	brge	.+10     	; 0xfe4 <DIO_VidSetPinDirection+0x4a>
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	61 f0       	breq	.+24     	; 0xffa <DIO_VidSetPinDirection+0x60>
     fe2:	d2 c0       	rjmp	.+420    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
     fe4:	2e 81       	ldd	r18, Y+6	; 0x06
     fe6:	3f 81       	ldd	r19, Y+7	; 0x07
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	71 f1       	breq	.+92     	; 0x104a <DIO_VidSetPinDirection+0xb0>
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	9f 81       	ldd	r25, Y+7	; 0x07
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	91 05       	cpc	r25, r1
     ff6:	e9 f1       	breq	.+122    	; 0x1072 <DIO_VidSetPinDirection+0xd8>
     ff8:	c7 c0       	rjmp	.+398    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0:  SET_BIT(DDRA_REG,Copy_U8Pin);  break;
     ffa:	aa e3       	ldi	r26, 0x3A	; 58
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e3       	ldi	r30, 0x3A	; 58
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_VidSetPinDirection+0x7e>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_VidSetPinDirection+0x7a>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	b3 c0       	rjmp	.+358    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
			case 1:  SET_BIT(DDRB_REG,Copy_U8Pin);  break;
    1022:	a7 e3       	ldi	r26, 0x37	; 55
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e3       	ldi	r30, 0x37	; 55
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_VidSetPinDirection+0xa6>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_VidSetPinDirection+0xa2>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	9f c0       	rjmp	.+318    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
			case 2:  SET_BIT(DDRC_REG,Copy_U8Pin);  break;
    104a:	a4 e3       	ldi	r26, 0x34	; 52
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e4 e3       	ldi	r30, 0x34	; 52
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_VidSetPinDirection+0xce>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_VidSetPinDirection+0xca>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	8b c0       	rjmp	.+278    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
			case 3:  SET_BIT(DDRD_REG,Copy_U8Pin);  break;
    1072:	a1 e3       	ldi	r26, 0x31	; 49
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e1 e3       	ldi	r30, 0x31	; 49
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_VidSetPinDirection+0xf6>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_VidSetPinDirection+0xf2>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	77 c0       	rjmp	.+238    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(0== Copy_U8Dir)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 23       	and	r24, r24
    109e:	09 f0       	breq	.+2      	; 0x10a2 <DIO_VidSetPinDirection+0x108>
    10a0:	73 c0       	rjmp	.+230    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_U8Port)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 83       	std	Y+5, r19	; 0x05
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	9d 81       	ldd	r25, Y+5	; 0x05
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	59 f1       	breq	.+86     	; 0x110c <DIO_VidSetPinDirection+0x172>
    10b6:	2c 81       	ldd	r18, Y+4	; 0x04
    10b8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	2c f4       	brge	.+10     	; 0x10ca <DIO_VidSetPinDirection+0x130>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f0       	breq	.+26     	; 0x10e2 <DIO_VidSetPinDirection+0x148>
    10c8:	5f c0       	rjmp	.+190    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
    10ca:	2c 81       	ldd	r18, Y+4	; 0x04
    10cc:	3d 81       	ldd	r19, Y+5	; 0x05
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	89 f1       	breq	.+98     	; 0x1136 <DIO_VidSetPinDirection+0x19c>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <DIO_VidSetPinDirection+0x146>
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <DIO_VidSetPinDirection+0x1c6>
    10e0:	53 c0       	rjmp	.+166    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0:  CLR_BIT(DDRA_REG,Copy_U8Pin);  break;
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_VidSetPinDirection+0x166>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_VidSetPinDirection+0x162>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	3e c0       	rjmp	.+124    	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
			case 1:  CLR_BIT(DDRB_REG,Copy_U8Pin);  break;
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_VidSetPinDirection+0x190>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_VidSetPinDirection+0x18c>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	29 c0       	rjmp	.+82     	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
			case 2:  CLR_BIT(DDRC_REG,Copy_U8Pin);  break;
    1136:	a4 e3       	ldi	r26, 0x34	; 52
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_VidSetPinDirection+0x1ba>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_VidSetPinDirection+0x1b6>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	14 c0       	rjmp	.+40     	; 0x1188 <DIO_VidSetPinDirection+0x1ee>
			case 3:  CLR_BIT(DDRD_REG,Copy_U8Pin);  break;
    1160:	a1 e3       	ldi	r26, 0x31	; 49
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e1 e3       	ldi	r30, 0x31	; 49
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_VidSetPinDirection+0x1e4>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_VidSetPinDirection+0x1e0>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
		}
	}
}
    1188:	27 96       	adiw	r28, 0x07	; 7
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <DIO_VidSetPinValue>:
 * Description : Set value of Pin in this Port
 * Arguments   : Port ,Pin ,Value
 * return      : void
 */
void DIO_VidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	27 97       	sbiw	r28, 0x07	; 7
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6a 83       	std	Y+2, r22	; 0x02
    11b2:	4b 83       	std	Y+3, r20	; 0x03
	if(1== Copy_U8Value)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <DIO_VidSetPinValue+0x22>
    11ba:	6f c0       	rjmp	.+222    	; 0x129a <DIO_VidSetPinValue+0x100>
	{
		switch(Copy_U8Port)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3f 83       	std	Y+7, r19	; 0x07
    11c4:	2e 83       	std	Y+6, r18	; 0x06
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	91 05       	cpc	r25, r1
    11ce:	49 f1       	breq	.+82     	; 0x1222 <DIO_VidSetPinValue+0x88>
    11d0:	2e 81       	ldd	r18, Y+6	; 0x06
    11d2:	3f 81       	ldd	r19, Y+7	; 0x07
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <DIO_VidSetPinValue+0x4a>
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	61 f0       	breq	.+24     	; 0x11fa <DIO_VidSetPinValue+0x60>
    11e2:	d2 c0       	rjmp	.+420    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
    11e4:	2e 81       	ldd	r18, Y+6	; 0x06
    11e6:	3f 81       	ldd	r19, Y+7	; 0x07
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	71 f1       	breq	.+92     	; 0x124a <DIO_VidSetPinValue+0xb0>
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	e9 f1       	breq	.+122    	; 0x1272 <DIO_VidSetPinValue+0xd8>
    11f8:	c7 c0       	rjmp	.+398    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
		{
			case 0:  SET_BIT(PORTA_REG,Copy_U8Pin);  break;
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_VidSetPinValue+0x7e>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_VidSetPinValue+0x7a>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	b3 c0       	rjmp	.+358    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
			case 1:  SET_BIT(PORTB_REG,Copy_U8Pin);  break;
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_VidSetPinValue+0xa6>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_VidSetPinValue+0xa2>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	9f c0       	rjmp	.+318    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
			case 2:  SET_BIT(PORTC_REG,Copy_U8Pin);  break;
    124a:	a5 e3       	ldi	r26, 0x35	; 53
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_VidSetPinValue+0xce>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_VidSetPinValue+0xca>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	8b c0       	rjmp	.+278    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
			case 3:  SET_BIT(PORTD_REG,Copy_U8Pin);  break;
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_VidSetPinValue+0xf6>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_VidSetPinValue+0xf2>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	77 c0       	rjmp	.+238    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if(0== Copy_U8Value)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 23       	and	r24, r24
    129e:	09 f0       	breq	.+2      	; 0x12a2 <DIO_VidSetPinValue+0x108>
    12a0:	73 c0       	rjmp	.+230    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_U8Port)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3d 83       	std	Y+5, r19	; 0x05
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	59 f1       	breq	.+86     	; 0x130c <DIO_VidSetPinValue+0x172>
    12b6:	2c 81       	ldd	r18, Y+4	; 0x04
    12b8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <DIO_VidSetPinValue+0x130>
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	9d 81       	ldd	r25, Y+5	; 0x05
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f0       	breq	.+26     	; 0x12e2 <DIO_VidSetPinValue+0x148>
    12c8:	5f c0       	rjmp	.+190    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
    12ca:	2c 81       	ldd	r18, Y+4	; 0x04
    12cc:	3d 81       	ldd	r19, Y+5	; 0x05
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	89 f1       	breq	.+98     	; 0x1336 <DIO_VidSetPinValue+0x19c>
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <DIO_VidSetPinValue+0x146>
    12de:	40 c0       	rjmp	.+128    	; 0x1360 <DIO_VidSetPinValue+0x1c6>
    12e0:	53 c0       	rjmp	.+166    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
		{
			case 0:  CLR_BIT(PORTA_REG,Copy_U8Pin);  break;
    12e2:	ab e3       	ldi	r26, 0x3B	; 59
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_VidSetPinValue+0x166>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_VidSetPinValue+0x162>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	3e c0       	rjmp	.+124    	; 0x1388 <DIO_VidSetPinValue+0x1ee>
			case 1:  CLR_BIT(PORTB_REG,Copy_U8Pin);  break;
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_VidSetPinValue+0x190>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_VidSetPinValue+0x18c>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	29 c0       	rjmp	.+82     	; 0x1388 <DIO_VidSetPinValue+0x1ee>
			case 2:  CLR_BIT(PORTC_REG,Copy_U8Pin);  break;
    1336:	a5 e3       	ldi	r26, 0x35	; 53
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e5 e3       	ldi	r30, 0x35	; 53
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_VidSetPinValue+0x1ba>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_VidSetPinValue+0x1b6>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <DIO_VidSetPinValue+0x1ee>
			case 3:  CLR_BIT(PORTD_REG,Copy_U8Pin);  break;
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_VidSetPinValue+0x1e4>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_VidSetPinValue+0x1e0>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
		}
	}
}
    1388:	27 96       	adiw	r28, 0x07	; 7
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <DIO_U8GetPinValue>:
 * Description : Gets value of certain Pin in this Port
 * Arguments   : Port ,Pin
 * return      : u8(1 or 0)
 */
u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_U8GetPinValue+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_U8GetPinValue+0x8>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_U8x;
	switch(Copy_U8Port)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3d 83       	std	Y+5, r19	; 0x05
    13b4:	2c 83       	std	Y+4, r18	; 0x04
    13b6:	4c 81       	ldd	r20, Y+4	; 0x04
    13b8:	5d 81       	ldd	r21, Y+5	; 0x05
    13ba:	41 30       	cpi	r20, 0x01	; 1
    13bc:	51 05       	cpc	r21, r1
    13be:	41 f1       	breq	.+80     	; 0x1410 <DIO_U8GetPinValue+0x76>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	91 05       	cpc	r25, r1
    13c8:	34 f4       	brge	.+12     	; 0x13d6 <DIO_U8GetPinValue+0x3c>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	21 15       	cp	r18, r1
    13d0:	31 05       	cpc	r19, r1
    13d2:	61 f0       	breq	.+24     	; 0x13ec <DIO_U8GetPinValue+0x52>
    13d4:	52 c0       	rjmp	.+164    	; 0x147a <DIO_U8GetPinValue+0xe0>
    13d6:	4c 81       	ldd	r20, Y+4	; 0x04
    13d8:	5d 81       	ldd	r21, Y+5	; 0x05
    13da:	42 30       	cpi	r20, 0x02	; 2
    13dc:	51 05       	cpc	r21, r1
    13de:	51 f1       	breq	.+84     	; 0x1434 <DIO_U8GetPinValue+0x9a>
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	b9 f1       	breq	.+110    	; 0x1458 <DIO_U8GetPinValue+0xbe>
    13ea:	47 c0       	rjmp	.+142    	; 0x147a <DIO_U8GetPinValue+0xe0>
		{
			case 0:  LOC_U8x=GET_BIT(PINA_REG,Copy_U8Pin);  break;
    13ec:	e9 e3       	ldi	r30, 0x39	; 57
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_U8GetPinValue+0x6a>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_U8GetPinValue+0x66>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	35 c0       	rjmp	.+106    	; 0x147a <DIO_U8GetPinValue+0xe0>
			case 1:  LOC_U8x=GET_BIT(PINB_REG,Copy_U8Pin);  break;
    1410:	e6 e3       	ldi	r30, 0x36	; 54
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_U8GetPinValue+0x8e>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_U8GetPinValue+0x8a>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	23 c0       	rjmp	.+70     	; 0x147a <DIO_U8GetPinValue+0xe0>
			case 2:  LOC_U8x=GET_BIT(PINC_REG,Copy_U8Pin);  break;
    1434:	e3 e3       	ldi	r30, 0x33	; 51
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_U8GetPinValue+0xb2>
    1448:	55 95       	asr	r21
    144a:	47 95       	ror	r20
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_U8GetPinValue+0xae>
    1450:	ca 01       	movw	r24, r20
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	11 c0       	rjmp	.+34     	; 0x147a <DIO_U8GetPinValue+0xe0>
			case 3:  LOC_U8x=GET_BIT(PIND_REG,Copy_U8Pin);  break;
    1458:	e0 e3       	ldi	r30, 0x30	; 48
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_U8GetPinValue+0xd6>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_U8GetPinValue+0xd2>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
		}
	return LOC_U8x;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <DIO_vidTogglePinValue>:
 * Description : Toggles value of Pin in this Port
 * Arguments   : Port ,Pin
 * return      : void
 */
void DIO_vidTogglePinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_vidTogglePinValue+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_vidTogglePinValue+0x8>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	49 f1       	breq	.+82     	; 0x1502 <DIO_vidTogglePinValue+0x76>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <DIO_vidTogglePinValue+0x38>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <DIO_vidTogglePinValue+0x4e>
    14c2:	5a c0       	rjmp	.+180    	; 0x1578 <DIO_vidTogglePinValue+0xec>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	71 f1       	breq	.+92     	; 0x152a <DIO_vidTogglePinValue+0x9e>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	e9 f1       	breq	.+122    	; 0x1552 <DIO_vidTogglePinValue+0xc6>
    14d8:	4f c0       	rjmp	.+158    	; 0x1578 <DIO_vidTogglePinValue+0xec>
		{
			case 0:  TOGGLE_BIT(PORTA_REG,Copy_U8Pin);  break;
    14da:	ab e3       	ldi	r26, 0x3B	; 59
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e3       	ldi	r30, 0x3B	; 59
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_vidTogglePinValue+0x6c>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_vidTogglePinValue+0x68>
    14fc:	84 27       	eor	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	3b c0       	rjmp	.+118    	; 0x1578 <DIO_vidTogglePinValue+0xec>
			case 1:  TOGGLE_BIT(PORTB_REG,Copy_U8Pin);  break;
    1502:	a8 e3       	ldi	r26, 0x38	; 56
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e8 e3       	ldi	r30, 0x38	; 56
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_vidTogglePinValue+0x94>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_vidTogglePinValue+0x90>
    1524:	84 27       	eor	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	27 c0       	rjmp	.+78     	; 0x1578 <DIO_vidTogglePinValue+0xec>
			case 2:  TOGGLE_BIT(PORTC_REG,Copy_U8Pin);  break;
    152a:	a5 e3       	ldi	r26, 0x35	; 53
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e3       	ldi	r30, 0x35	; 53
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_vidTogglePinValue+0xbc>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_vidTogglePinValue+0xb8>
    154c:	84 27       	eor	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	13 c0       	rjmp	.+38     	; 0x1578 <DIO_vidTogglePinValue+0xec>
			case 3:  TOGGLE_BIT(PORTD_REG,Copy_U8Pin);  break;
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_vidTogglePinValue+0xe4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_vidTogglePinValue+0xe0>
    1574:	84 27       	eor	r24, r20
    1576:	8c 93       	st	X, r24
		}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <DIO_VidSetPortValue>:
 * Description : Set value of the whole register
 * Arguments   : Port ,Value
 * return      : void
 */
void DIO_VidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Value)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <DIO_VidSetPortValue+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <DIO_VidSetPortValue+0x8>
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3c 83       	std	Y+4, r19	; 0x04
    159e:	2b 83       	std	Y+3, r18	; 0x03
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	d1 f0       	breq	.+52     	; 0x15de <DIO_VidSetPortValue+0x58>
    15aa:	2b 81       	ldd	r18, Y+3	; 0x03
    15ac:	3c 81       	ldd	r19, Y+4	; 0x04
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <DIO_VidSetPortValue+0x38>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <DIO_VidSetPortValue+0x4e>
    15bc:	1e c0       	rjmp	.+60     	; 0x15fa <DIO_VidSetPortValue+0x74>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <DIO_VidSetPortValue+0x62>
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <DIO_VidSetPortValue+0x6c>
    15d2:	13 c0       	rjmp	.+38     	; 0x15fa <DIO_VidSetPortValue+0x74>
	{
		case 0:  PORTA_REG=Copy_U8Value;  break;
    15d4:	eb e3       	ldi	r30, 0x3B	; 59
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 83       	st	Z, r24
    15dc:	0e c0       	rjmp	.+28     	; 0x15fa <DIO_VidSetPortValue+0x74>
		case 1:  PORTB_REG=Copy_U8Value;  break;
    15de:	e8 e3       	ldi	r30, 0x38	; 56
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <DIO_VidSetPortValue+0x74>
		case 2:  PORTC_REG=Copy_U8Value;  break;
    15e8:	e5 e3       	ldi	r30, 0x35	; 53
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	80 83       	st	Z, r24
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <DIO_VidSetPortValue+0x74>
		case 3:  PORTD_REG=Copy_U8Value;  break;
    15f2:	e2 e3       	ldi	r30, 0x32	; 50
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	80 83       	st	Z, r24
	}
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <DIO_VidSetPortDirection>:
 * Description : Set direction of the whole register
 * Arguments   : Port , Value
 * return      : void
 */
void DIO_VidSetPortDirection(u8 Copy_U8Port,u8 Copy_U8Dir)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_VidSetPortDirection+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_VidSetPortDirection+0x8>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	3c 83       	std	Y+4, r19	; 0x04
    1620:	2b 83       	std	Y+3, r18	; 0x03
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	d1 f0       	breq	.+52     	; 0x1660 <DIO_VidSetPortDirection+0x58>
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	2c f4       	brge	.+10     	; 0x1640 <DIO_VidSetPortDirection+0x38>
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	61 f0       	breq	.+24     	; 0x1656 <DIO_VidSetPortDirection+0x4e>
    163e:	1e c0       	rjmp	.+60     	; 0x167c <DIO_VidSetPortDirection+0x74>
    1640:	2b 81       	ldd	r18, Y+3	; 0x03
    1642:	3c 81       	ldd	r19, Y+4	; 0x04
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	81 f0       	breq	.+32     	; 0x166a <DIO_VidSetPortDirection+0x62>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	91 05       	cpc	r25, r1
    1652:	81 f0       	breq	.+32     	; 0x1674 <DIO_VidSetPortDirection+0x6c>
    1654:	13 c0       	rjmp	.+38     	; 0x167c <DIO_VidSetPortDirection+0x74>
	{
		case 0:  DDRA_REG=Copy_U8Dir;  break;
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 83       	st	Z, r24
    165e:	0e c0       	rjmp	.+28     	; 0x167c <DIO_VidSetPortDirection+0x74>
		case 1:  DDRB_REG=Copy_U8Dir;  break;
    1660:	e7 e3       	ldi	r30, 0x37	; 55
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 83       	st	Z, r24
    1668:	09 c0       	rjmp	.+18     	; 0x167c <DIO_VidSetPortDirection+0x74>
		case 2:  DDRC_REG=Copy_U8Dir;  break;
    166a:	e4 e3       	ldi	r30, 0x34	; 52
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	80 83       	st	Z, r24
    1672:	04 c0       	rjmp	.+8      	; 0x167c <DIO_VidSetPortDirection+0x74>
		case 3:  DDRD_REG=Copy_U8Dir;  break;
    1674:	e1 e3       	ldi	r30, 0x31	; 49
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	80 83       	st	Z, r24
	}
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <KEYPAD_vidInitialize>:
 * Description : initialize keypad at a given port
 * Arguments   : void
 * Return      : void
 */
void KEYPAD_vidInitialize(u8 Copy_U8Port)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	0f 92       	push	r0
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Port Direction:
	 * Initialize columns as output
	 * Initialize rows as input
	 */
	DIO_VidSetPortDirection(Copy_U8Port,0XF0);
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	60 ef       	ldi	r22, 0xF0	; 240
    169a:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_VidSetPortDirection>
	/*
	 * Port values:
	 * Initialize all values in port to one  "rows to Enable PULL-UP resistor"
	 */
	DIO_VidSetPortValue(Copy_U8Port,0XFF);
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	6f ef       	ldi	r22, 0xFF	; 255
    16a2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_VidSetPortValue>
}
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <KEYPAD_U8GetPressedKey>:
 * Description : return ASCII value of pressed Key
 * Arguments   : void
 * Return      : u8
 */
u8 KEYPAD_U8GetPressedKey(u8 Copy_U8Port)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	63 97       	sbiw	r28, 0x13	; 19
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	8b 8b       	std	Y+19, r24	; 0x13
	u8 LOC_U8Key=KPD_INIT_VALUE;  /*Value that if returned means no pressed key*/
    16c4:	8f e7       	ldi	r24, 0x7F	; 127
    16c6:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_U8Pressed=HIGH;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 LOC_U8C=0;LOC_U8C<COLUMNS_NO;LOC_U8C++ )
    16cc:	18 8a       	std	Y+16, r1	; 0x10
    16ce:	b2 c0       	rjmp	.+356    	; 0x1834 <KEYPAD_U8GetPressedKey+0x186>
	{
		DIO_VidSetPinValue(Copy_U8Port,LOC_U8C+ROWS_NO,LOW); /*Set current column to LOW and check rows*/
    16d0:	88 89       	ldd	r24, Y+16	; 0x10
    16d2:	98 2f       	mov	r25, r24
    16d4:	9c 5f       	subi	r25, 0xFC	; 252
    16d6:	8b 89       	ldd	r24, Y+19	; 0x13
    16d8:	69 2f       	mov	r22, r25
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
		for(u8 LOC_U8R=0;LOC_U8R<ROWS_NO;LOC_U8R++)
    16e0:	1f 86       	std	Y+15, r1	; 0x0f
    16e2:	99 c0       	rjmp	.+306    	; 0x1816 <KEYPAD_U8GetPressedKey+0x168>
		{
			LOC_U8Pressed=DIO_U8GetPinValue(Copy_U8Port,LOC_U8R);  /*Store state of each row of current column*/
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    16e8:	0e 94 cd 09 	call	0x139a	; 0x139a <DIO_U8GetPinValue>
    16ec:	89 8b       	std	Y+17, r24	; 0x11
			if(LOW==LOC_U8Pressed)    /*if state of one row of current column is pressed*/
    16ee:	89 89       	ldd	r24, Y+17	; 0x11
    16f0:	88 23       	and	r24, r24
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <KEYPAD_U8GetPressedKey+0x48>
    16f4:	8d c0       	rjmp	.+282    	; 0x1810 <KEYPAD_U8GetPressedKey+0x162>
			{
				LOC_U8Key=keypad[LOC_U8R][LOC_U8C];  /*Value by current row and column to be returned*/
    16f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f8:	48 2f       	mov	r20, r24
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	88 89       	ldd	r24, Y+16	; 0x10
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	ca 01       	movw	r24, r20
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	82 0f       	add	r24, r18
    170e:	93 1f       	adc	r25, r19
    1710:	fc 01       	movw	r30, r24
    1712:	ee 56       	subi	r30, 0x6E	; 110
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	80 81       	ld	r24, Z
    1718:	8a 8b       	std	Y+18, r24	; 0x12
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <KEYPAD_U8GetPressedKey+0x78>
				while(LOW==LOC_U8Pressed)   /*Stay in loop until button be not pressed*/
				{
					LOC_U8Pressed=DIO_U8GetPinValue(Copy_U8Port,LOC_U8R);
    171c:	8b 89       	ldd	r24, Y+19	; 0x13
    171e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1720:	0e 94 cd 09 	call	0x139a	; 0x139a <DIO_U8GetPinValue>
    1724:	89 8b       	std	Y+17, r24	; 0x11
		{
			LOC_U8Pressed=DIO_U8GetPinValue(Copy_U8Port,LOC_U8R);  /*Store state of each row of current column*/
			if(LOW==LOC_U8Pressed)    /*if state of one row of current column is pressed*/
			{
				LOC_U8Key=keypad[LOC_U8R][LOC_U8C];  /*Value by current row and column to be returned*/
				while(LOW==LOC_U8Pressed)   /*Stay in loop until button be not pressed*/
    1726:	89 89       	ldd	r24, Y+17	; 0x11
    1728:	88 23       	and	r24, r24
    172a:	c1 f3       	breq	.-16     	; 0x171c <KEYPAD_U8GetPressedKey+0x6e>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b1 e4       	ldi	r27, 0x41	; 65
    1734:	8b 87       	std	Y+11, r24	; 0x0b
    1736:	9c 87       	std	Y+12, r25	; 0x0c
    1738:	ad 87       	std	Y+13, r26	; 0x0d
    173a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8f 83       	std	Y+7, r24	; 0x07
    1756:	98 87       	std	Y+8, r25	; 0x08
    1758:	a9 87       	std	Y+9, r26	; 0x09
    175a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <KEYPAD_U8GetPressedKey+0xd0>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <KEYPAD_U8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <KEYPAD_U8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	0f c0       	rjmp	.+30     	; 0x17de <KEYPAD_U8GetPressedKey+0x130>
    17c0:	88 ec       	ldi	r24, 0xC8	; 200
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9c 83       	std	Y+4, r25	; 0x04
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <KEYPAD_U8GetPressedKey+0x11e>
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <KEYPAD_U8GetPressedKey+0x112>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <KEYPAD_U8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <KEYPAD_U8GetPressedKey+0x15a>
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
	u8 LOC_U8Key=KPD_INIT_VALUE;  /*Value that if returned means no pressed key*/
	u8 LOC_U8Pressed=HIGH;
	for(u8 LOC_U8C=0;LOC_U8C<COLUMNS_NO;LOC_U8C++ )
	{
		DIO_VidSetPinValue(Copy_U8Port,LOC_U8C+ROWS_NO,LOW); /*Set current column to LOW and check rows*/
		for(u8 LOC_U8R=0;LOC_U8R<ROWS_NO;LOC_U8R++)
    1810:	8f 85       	ldd	r24, Y+15	; 0x0f
    1812:	8f 5f       	subi	r24, 0xFF	; 255
    1814:	8f 87       	std	Y+15, r24	; 0x0f
    1816:	8f 85       	ldd	r24, Y+15	; 0x0f
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	08 f4       	brcc	.+2      	; 0x181e <KEYPAD_U8GetPressedKey+0x170>
    181c:	63 cf       	rjmp	.-314    	; 0x16e4 <KEYPAD_U8GetPressedKey+0x36>
					LOC_U8Pressed=DIO_U8GetPinValue(Copy_U8Port,LOC_U8R);
				}
				_delay_ms(KPD_DELAY);
			}
		}
		DIO_VidSetPinValue(Copy_U8Port,LOC_U8C+ROWS_NO,HIGH); /*Return current column to HIGH*/
    181e:	88 89       	ldd	r24, Y+16	; 0x10
    1820:	98 2f       	mov	r25, r24
    1822:	9c 5f       	subi	r25, 0xFC	; 252
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	69 2f       	mov	r22, r25
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
 */
u8 KEYPAD_U8GetPressedKey(u8 Copy_U8Port)
{
	u8 LOC_U8Key=KPD_INIT_VALUE;  /*Value that if returned means no pressed key*/
	u8 LOC_U8Pressed=HIGH;
	for(u8 LOC_U8C=0;LOC_U8C<COLUMNS_NO;LOC_U8C++ )
    182e:	88 89       	ldd	r24, Y+16	; 0x10
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	88 8b       	std	Y+16, r24	; 0x10
    1834:	88 89       	ldd	r24, Y+16	; 0x10
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	08 f4       	brcc	.+2      	; 0x183c <KEYPAD_U8GetPressedKey+0x18e>
    183a:	4a cf       	rjmp	.-364    	; 0x16d0 <KEYPAD_U8GetPressedKey+0x22>
				_delay_ms(KPD_DELAY);
			}
		}
		DIO_VidSetPinValue(Copy_U8Port,LOC_U8C+ROWS_NO,HIGH); /*Return current column to HIGH*/
	}
	return LOC_U8Key;  /*Return Pressed value or KPD_INIT_VALUE if not pressed*/
    183c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    183e:	63 96       	adiw	r28, 0x13	; 19
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <LCD_VidInitialize>:
  * Description : Initialize LCD , Mode used,Number of lines and Cursor
  * Arguments   : void
  * return      : void
  */
void LCD_VidInitialize(void)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	e8 97       	sbiw	r28, 0x38	; 56
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
	/*Set Data register Pins as output*/
	#if INTERFACE_LEN == EIGHT_BITS
	DIO_VidSetPortDirection(DATA_PORT,0xFF);
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	6f ef       	ldi	r22, 0xFF	; 255
    1868:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(DATA_PORT,P0,HIGH);
	DIO_VidSetPinDirection(DATA_PORT,P1,HIGH);
	DIO_VidSetPinDirection(DATA_PORT,P2,HIGH);
	DIO_VidSetPinDirection(DATA_PORT,P3,HIGH);
	#endif
	DIO_VidSetPinDirection(CONTROL_PORT,Rs,HIGH);/*Set Rs Pin output*/
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,Rw,HIGH);/*Set Rw Pin output*/
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CONTROL_PORT,En,HIGH);/*Set En Pin output*/
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	62 e0       	ldi	r22, 0x02	; 2
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_VidSetPinDirection>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	ac e0       	ldi	r26, 0x0C	; 12
    1890:	b2 e4       	ldi	r27, 0x42	; 66
    1892:	8d ab       	std	Y+53, r24	; 0x35
    1894:	9e ab       	std	Y+54, r25	; 0x36
    1896:	af ab       	std	Y+55, r26	; 0x37
    1898:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6d a9       	ldd	r22, Y+53	; 0x35
    189c:	7e a9       	ldd	r23, Y+54	; 0x36
    189e:	8f a9       	ldd	r24, Y+55	; 0x37
    18a0:	98 ad       	ldd	r25, Y+56	; 0x38
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a ef       	ldi	r20, 0xFA	; 250
    18a8:	54 e4       	ldi	r21, 0x44	; 68
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	89 ab       	std	Y+49, r24	; 0x31
    18b4:	9a ab       	std	Y+50, r25	; 0x32
    18b6:	ab ab       	std	Y+51, r26	; 0x33
    18b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ba:	69 a9       	ldd	r22, Y+49	; 0x31
    18bc:	7a a9       	ldd	r23, Y+50	; 0x32
    18be:	8b a9       	ldd	r24, Y+51	; 0x33
    18c0:	9c a9       	ldd	r25, Y+52	; 0x34
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <LCD_VidInitialize+0x8c>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	98 ab       	std	Y+48, r25	; 0x30
    18d8:	8f a7       	std	Y+47, r24	; 0x2f
    18da:	3f c0       	rjmp	.+126    	; 0x195a <LCD_VidInitialize+0x10a>
	else if (__tmp > 65535)
    18dc:	69 a9       	ldd	r22, Y+49	; 0x31
    18de:	7a a9       	ldd	r23, Y+50	; 0x32
    18e0:	8b a9       	ldd	r24, Y+51	; 0x33
    18e2:	9c a9       	ldd	r25, Y+52	; 0x34
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <LCD_VidInitialize+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6d a9       	ldd	r22, Y+53	; 0x35
    18f6:	7e a9       	ldd	r23, Y+54	; 0x36
    18f8:	8f a9       	ldd	r24, Y+55	; 0x37
    18fa:	98 ad       	ldd	r25, Y+56	; 0x38
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	0f c0       	rjmp	.+30     	; 0x193c <LCD_VidInitialize+0xec>
    191e:	88 ec       	ldi	r24, 0xC8	; 200
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9e a7       	std	Y+46, r25	; 0x2e
    1924:	8d a7       	std	Y+45, r24	; 0x2d
    1926:	8d a5       	ldd	r24, Y+45	; 0x2d
    1928:	9e a5       	ldd	r25, Y+46	; 0x2e
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCD_VidInitialize+0xda>
    192e:	9e a7       	std	Y+46, r25	; 0x2e
    1930:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	8f a5       	ldd	r24, Y+47	; 0x2f
    1934:	98 a9       	ldd	r25, Y+48	; 0x30
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	98 ab       	std	Y+48, r25	; 0x30
    193a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	8f a5       	ldd	r24, Y+47	; 0x2f
    193e:	98 a9       	ldd	r25, Y+48	; 0x30
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <LCD_VidInitialize+0xce>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <LCD_VidInitialize+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	69 a9       	ldd	r22, Y+49	; 0x31
    1948:	7a a9       	ldd	r23, Y+50	; 0x32
    194a:	8b a9       	ldd	r24, Y+51	; 0x33
    194c:	9c a9       	ldd	r25, Y+52	; 0x34
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	98 ab       	std	Y+48, r25	; 0x30
    1958:	8f a7       	std	Y+47, r24	; 0x2f
    195a:	8f a5       	ldd	r24, Y+47	; 0x2f
    195c:	98 a9       	ldd	r25, Y+48	; 0x30
    195e:	9c a7       	std	Y+44, r25	; 0x2c
    1960:	8b a7       	std	Y+43, r24	; 0x2b
    1962:	8b a5       	ldd	r24, Y+43	; 0x2b
    1964:	9c a5       	ldd	r25, Y+44	; 0x2c
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_VidInitialize+0x116>
    196a:	9c a7       	std	Y+44, r25	; 0x2c
    196c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);
	LCD_VidSendCommand(RESET_DATA);
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
	LCD_VidSendCommand(FUNC_SET);
    1974:	88 e3       	ldi	r24, 0x38	; 56
    1976:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e8       	ldi	r26, 0x80	; 128
    1980:	bf e3       	ldi	r27, 0x3F	; 63
    1982:	8f a3       	std	Y+39, r24	; 0x27
    1984:	98 a7       	std	Y+40, r25	; 0x28
    1986:	a9 a7       	std	Y+41, r26	; 0x29
    1988:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	6f a1       	ldd	r22, Y+39	; 0x27
    198c:	78 a5       	ldd	r23, Y+40	; 0x28
    198e:	89 a5       	ldd	r24, Y+41	; 0x29
    1990:	9a a5       	ldd	r25, Y+42	; 0x2a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a ef       	ldi	r20, 0xFA	; 250
    1998:	54 e4       	ldi	r21, 0x44	; 68
    199a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8b a3       	std	Y+35, r24	; 0x23
    19a4:	9c a3       	std	Y+36, r25	; 0x24
    19a6:	ad a3       	std	Y+37, r26	; 0x25
    19a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19aa:	6b a1       	ldd	r22, Y+35	; 0x23
    19ac:	7c a1       	ldd	r23, Y+36	; 0x24
    19ae:	8d a1       	ldd	r24, Y+37	; 0x25
    19b0:	9e a1       	ldd	r25, Y+38	; 0x26
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	2c f4       	brge	.+10     	; 0x19cc <LCD_VidInitialize+0x17c>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9a a3       	std	Y+34, r25	; 0x22
    19c8:	89 a3       	std	Y+33, r24	; 0x21
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <LCD_VidInitialize+0x1fa>
	else if (__tmp > 65535)
    19cc:	6b a1       	ldd	r22, Y+35	; 0x23
    19ce:	7c a1       	ldd	r23, Y+36	; 0x24
    19d0:	8d a1       	ldd	r24, Y+37	; 0x25
    19d2:	9e a1       	ldd	r25, Y+38	; 0x26
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	57 e4       	ldi	r21, 0x47	; 71
    19dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	4c f5       	brge	.+82     	; 0x1a36 <LCD_VidInitialize+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	6f a1       	ldd	r22, Y+39	; 0x27
    19e6:	78 a5       	ldd	r23, Y+40	; 0x28
    19e8:	89 a5       	ldd	r24, Y+41	; 0x29
    19ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e2       	ldi	r20, 0x20	; 32
    19f2:	51 e4       	ldi	r21, 0x41	; 65
    19f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9a a3       	std	Y+34, r25	; 0x22
    1a0a:	89 a3       	std	Y+33, r24	; 0x21
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <LCD_VidInitialize+0x1dc>
    1a0e:	88 ec       	ldi	r24, 0xC8	; 200
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	98 a3       	std	Y+32, r25	; 0x20
    1a14:	8f 8f       	std	Y+31, r24	; 0x1f
    1a16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a18:	98 a1       	ldd	r25, Y+32	; 0x20
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_VidInitialize+0x1ca>
    1a1e:	98 a3       	std	Y+32, r25	; 0x20
    1a20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	89 a1       	ldd	r24, Y+33	; 0x21
    1a24:	9a a1       	ldd	r25, Y+34	; 0x22
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9a a3       	std	Y+34, r25	; 0x22
    1a2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	69 f7       	brne	.-38     	; 0x1a0e <LCD_VidInitialize+0x1be>
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <LCD_VidInitialize+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	6b a1       	ldd	r22, Y+35	; 0x23
    1a38:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9a a3       	std	Y+34, r25	; 0x22
    1a48:	89 a3       	std	Y+33, r24	; 0x21
    1a4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a50:	8d 8f       	std	Y+29, r24	; 0x1d
    1a52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_VidInitialize+0x206>
    1a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCommand(LCD_DISPLAY);
    1a5e:	8f e0       	ldi	r24, 0x0F	; 15
    1a60:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	89 8f       	std	Y+25, r24	; 0x19
    1a6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a70:	ab 8f       	std	Y+27, r26	; 0x1b
    1a72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	69 8d       	ldd	r22, Y+25	; 0x19
    1a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a ef       	ldi	r20, 0xFA	; 250
    1a82:	54 e4       	ldi	r21, 0x44	; 68
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8d 8b       	std	Y+21, r24	; 0x15
    1a8e:	9e 8b       	std	Y+22, r25	; 0x16
    1a90:	af 8b       	std	Y+23, r26	; 0x17
    1a92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a94:	6d 89       	ldd	r22, Y+21	; 0x15
    1a96:	7e 89       	ldd	r23, Y+22	; 0x16
    1a98:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <LCD_VidInitialize+0x266>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <LCD_VidInitialize+0x2e4>
	else if (__tmp > 65535)
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	4c f5       	brge	.+82     	; 0x1b20 <LCD_VidInitialize+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <LCD_VidInitialize+0x2c6>
    1af8:	88 ec       	ldi	r24, 0xC8	; 200
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9a 8b       	std	Y+18, r25	; 0x12
    1afe:	89 8b       	std	Y+17, r24	; 0x11
    1b00:	89 89       	ldd	r24, Y+17	; 0x11
    1b02:	9a 89       	ldd	r25, Y+18	; 0x12
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <LCD_VidInitialize+0x2b4>
    1b08:	9a 8b       	std	Y+18, r25	; 0x12
    1b0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	9c 8b       	std	Y+20, r25	; 0x14
    1b14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <LCD_VidInitialize+0x2a8>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <LCD_VidInitialize+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	8b 89       	ldd	r24, Y+19	; 0x13
    1b36:	9c 89       	ldd	r25, Y+20	; 0x14
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
    1b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3e:	98 89       	ldd	r25, Y+16	; 0x10
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_VidInitialize+0x2f0>
    1b44:	98 8b       	std	Y+16, r25	; 0x10
    1b46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidSendCommand(DISPLAY_CLR);
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e4       	ldi	r27, 0x40	; 64
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
    1b58:	9c 87       	std	Y+12, r25	; 0x0c
    1b5a:	ad 87       	std	Y+13, r26	; 0x0d
    1b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a ef       	ldi	r20, 0xFA	; 250
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8f 83       	std	Y+7, r24	; 0x07
    1b78:	98 87       	std	Y+8, r25	; 0x08
    1b7a:	a9 87       	std	Y+9, r26	; 0x09
    1b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_VidInitialize+0x350>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_VidInitialize+0x3ce>
	else if (__tmp > 65535)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_VidInitialize+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_VidInitialize+0x3b0>
    1be2:	88 ec       	ldi	r24, 0xC8	; 200
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_VidInitialize+0x39e>
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_VidInitialize+0x392>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_VidInitialize+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_VidInitialize+0x3da>
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c32:	e8 96       	adiw	r28, 0x38	; 56
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <LCD_VidSendData>:
 * Description : Send data (in ASCII) to data register stores it to be displayed on the LCD
 * Arguments   : Data
 * return      : void
 */
void LCD_VidSendData(u8 Copy_U8Data)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	6d 97       	sbiw	r28, 0x1d	; 29
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(CONTROL_PORT,Rs,HIGH);/*Set RS pin 1 (Data register selected)*/
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(CONTROL_PORT,Rw,LOW);/*Set RW pin 0 (Write Mode selected)*/
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Data);
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c72:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(CONTROL_PORT,En,HIGH);/*Set EN pin 1 */
    1c76:	83 e0       	ldi	r24, 0x03	; 3
    1c78:	62 e0       	ldi	r22, 0x02	; 2
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e8       	ldi	r26, 0x80	; 128
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	89 8f       	std	Y+25, r24	; 0x19
    1c8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	69 8d       	ldd	r22, Y+25	; 0x19
    1c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a ef       	ldi	r20, 0xFA	; 250
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8d 8b       	std	Y+21, r24	; 0x15
    1caa:	9e 8b       	std	Y+22, r25	; 0x16
    1cac:	af 8b       	std	Y+23, r26	; 0x17
    1cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <LCD_VidSendData+0x8e>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <LCD_VidSendData+0xee>
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9a 8b       	std	Y+18, r25	; 0x12
    1d1a:	89 8b       	std	Y+17, r24	; 0x11
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_VidSendData+0xdc>
    1d24:	9a 8b       	std	Y+18, r25	; 0x12
    1d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <LCD_VidSendData+0xd0>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	98 8b       	std	Y+16, r25	; 0x10
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 89       	ldd	r25, Y+16	; 0x10
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_VidSendData+0x118>
    1d60:	98 8b       	std	Y+16, r25	; 0x10
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,En,LOW);/*Set EN pin 0 */
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	62 e0       	ldi	r22, 0x02	; 2
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e0       	ldi	r26, 0x00	; 0
    1d74:	b0 e4       	ldi	r27, 0x40	; 64
    1d76:	8b 87       	std	Y+11, r24	; 0x0b
    1d78:	9c 87       	std	Y+12, r25	; 0x0c
    1d7a:	ad 87       	std	Y+13, r26	; 0x0d
    1d7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a ef       	ldi	r20, 0xFA	; 250
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8f 83       	std	Y+7, r24	; 0x07
    1d98:	98 87       	std	Y+8, r25	; 0x08
    1d9a:	a9 87       	std	Y+9, r26	; 0x09
    1d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1da0:	78 85       	ldd	r23, Y+8	; 0x08
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <LCD_VidSendData+0x17c>
		__ticks = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <LCD_VidSendData+0x1fa>
	else if (__tmp > 65535)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	4f e7       	ldi	r20, 0x7F	; 127
    1dce:	57 e4       	ldi	r21, 0x47	; 71
    1dd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	4c f5       	brge	.+82     	; 0x1e2a <LCD_VidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <LCD_VidSendData+0x1dc>
    1e02:	88 ec       	ldi	r24, 0xC8	; 200
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_VidSendData+0x1ca>
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <LCD_VidSendData+0x1be>
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <LCD_VidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_VidSendData+0x206>
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e52:	6d 96       	adiw	r28, 0x1d	; 29
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LCD_VidSendCommand>:
 * Description : Send to command register that stores the command instructions given to the LCD
 * Arguments   : Command
 * return      : void
 */
void LCD_VidSendCommand(u8 Copy_U8Command)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	6d 97       	sbiw	r28, 0x1d	; 29
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(CONTROL_PORT,Rs,LOW); /*Set RS pin 0 (Instruction register selected)*/
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(CONTROL_PORT,Rw,LOW);/*Set RW pin 0 (Write Mode selected)*/
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
	DIO_VidSetPortValue(DATA_PORT,Copy_U8Command);
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e92:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(CONTROL_PORT,En,HIGH);/*Set EN pin 1 */
    1e96:	83 e0       	ldi	r24, 0x03	; 3
    1e98:	62 e0       	ldi	r22, 0x02	; 2
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e8       	ldi	r26, 0x80	; 128
    1ea6:	bf e3       	ldi	r27, 0x3F	; 63
    1ea8:	89 8f       	std	Y+25, r24	; 0x19
    1eaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1eac:	ab 8f       	std	Y+27, r26	; 0x1b
    1eae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8d 8b       	std	Y+21, r24	; 0x15
    1eca:	9e 8b       	std	Y+22, r25	; 0x16
    1ecc:	af 8b       	std	Y+23, r26	; 0x17
    1ece:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_VidSendCommand+0xee>
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9a 8b       	std	Y+18, r25	; 0x12
    1f3a:	89 8b       	std	Y+17, r24	; 0x11
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_VidSendCommand+0xdc>
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_VidSendCommand+0xd0>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f60:	8f 89       	ldd	r24, Y+23	; 0x17
    1f62:	98 8d       	ldd	r25, Y+24	; 0x18
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_VidSendCommand+0x118>
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(CONTROL_PORT,En,LOW);/*Set EN pin 0 */
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 cd 08 	call	0x119a	; 0x119a <DIO_VidSetPinValue>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	b0 e4       	ldi	r27, 0x40	; 64
    1f96:	8b 87       	std	Y+11, r24	; 0x0b
    1f98:	9c 87       	std	Y+12, r25	; 0x0c
    1f9a:	ad 87       	std	Y+13, r26	; 0x0d
    1f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8f 83       	std	Y+7, r24	; 0x07
    1fb8:	98 87       	std	Y+8, r25	; 0x08
    1fba:	a9 87       	std	Y+9, r26	; 0x09
    1fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <LCD_VidSendCommand+0x17c>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <LCD_VidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <LCD_VidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <LCD_VidSendCommand+0x1dc>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_VidSendCommand+0x1ca>
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <LCD_VidSendCommand+0x1be>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <LCD_VidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_VidSendCommand+0x206>
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2072:	6d 96       	adiw	r28, 0x1d	; 29
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_VidSendDatastring>:
 * Description : Output String to LCD at current cursor position
 * Arguments   : Pointer to Array of data characters
 * return      : void
 */
void LCD_VidSendDatastring(u8* Copy_U8Data)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <LCD_VidSendDatastring+0x6>
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	9b 83       	std	Y+3, r25	; 0x03
    2092:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 LOC_U8i=0 ;Copy_U8Data[LOC_U8i] != NULL ;LOC_U8i++)
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	0e c0       	rjmp	.+28     	; 0x20b4 <LCD_VidSendDatastring+0x30>
	{
		LCD_VidSendData(Copy_U8Data[LOC_U8i]);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	fc 01       	movw	r30, r24
    20a4:	e2 0f       	add	r30, r18
    20a6:	f3 1f       	adc	r31, r19
    20a8:	80 81       	ld	r24, Z
    20aa:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
 * Arguments   : Pointer to Array of data characters
 * return      : void
 */
void LCD_VidSendDatastring(u8* Copy_U8Data)
{
	for(u8 LOC_U8i=0 ;Copy_U8Data[LOC_U8i] != NULL ;LOC_U8i++)
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	fc 01       	movw	r30, r24
    20c0:	e2 0f       	add	r30, r18
    20c2:	f3 1f       	adc	r31, r19
    20c4:	80 81       	ld	r24, Z
    20c6:	88 23       	and	r24, r24
    20c8:	39 f7       	brne	.-50     	; 0x2098 <LCD_VidSendDatastring+0x14>
	{
		LCD_VidSendData(Copy_U8Data[LOC_U8i]);
	}
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_VidSendDataInteger>:
 * Description : Output number to LCD at current cursor position
 * Arguments   : Data as number
 * return      : void
 */
void LCD_VidSendDataInteger(s32 Copy_U8Data)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	60 97       	sbiw	r28, 0x10	; 16
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	6d 87       	std	Y+13, r22	; 0x0d
    20ec:	7e 87       	std	Y+14, r23	; 0x0e
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
    20f0:	98 8b       	std	Y+16, r25	; 0x10
	if(Copy_U8Data<0)   /*if number is negative, Display negative sign and calculate 2nd complement*/
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	af 85       	ldd	r26, Y+15	; 0x0f
    20f8:	b8 89       	ldd	r27, Y+16	; 0x10
    20fa:	bb 23       	and	r27, r27
    20fc:	94 f4       	brge	.+36     	; 0x2122 <LCD_VidSendDataInteger+0x4c>
	{
		LCD_VidSendData('-');
    20fe:	8d e2       	ldi	r24, 0x2D	; 45
    2100:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
		Copy_U8Data=(~Copy_U8Data)+1;
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	af 85       	ldd	r26, Y+15	; 0x0f
    210a:	b8 89       	ldd	r27, Y+16	; 0x10
    210c:	b0 95       	com	r27
    210e:	a0 95       	com	r26
    2110:	90 95       	com	r25
    2112:	81 95       	neg	r24
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	af 4f       	sbci	r26, 0xFF	; 255
    2118:	bf 4f       	sbci	r27, 0xFF	; 255
    211a:	8d 87       	std	Y+13, r24	; 0x0d
    211c:	9e 87       	std	Y+14, r25	; 0x0e
    211e:	af 87       	std	Y+15, r26	; 0x0f
    2120:	b8 8b       	std	Y+16, r27	; 0x10
	}
	if(Copy_U8Data==0)
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	9e 85       	ldd	r25, Y+14	; 0x0e
    2126:	af 85       	ldd	r26, Y+15	; 0x0f
    2128:	b8 89       	ldd	r27, Y+16	; 0x10
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	a1 05       	cpc	r26, r1
    212e:	b1 05       	cpc	r27, r1
    2130:	19 f4       	brne	.+6      	; 0x2138 <LCD_VidSendDataInteger+0x62>
	{
		LCD_VidSendData('0');
    2132:	80 e3       	ldi	r24, 0x30	; 48
    2134:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
	}
	u8 LOC_U8Rem,LOC_U8i=0;
    2138:	19 82       	std	Y+1, r1	; 0x01
    213a:	2e c0       	rjmp	.+92     	; 0x2198 <LCD_VidSendDataInteger+0xc2>
	u8 LOC_U8arr[10];
	while(Copy_U8Data>0)
	{
		LOC_U8Rem=Copy_U8Data%10;
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	af 85       	ldd	r26, Y+15	; 0x0f
    2142:	b8 89       	ldd	r27, Y+16	; 0x10
    2144:	2a e0       	ldi	r18, 0x0A	; 10
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__divmodsi4>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8a 83       	std	Y+2, r24	; 0x02
		LOC_U8arr[LOC_U8i++]=LOC_U8Rem;  /* store remainder in array*/
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	ce 01       	movw	r24, r28
    2162:	03 96       	adiw	r24, 0x03	; 3
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	80 83       	st	Z, r24
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8Data/=10;
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	af 85       	ldd	r26, Y+15	; 0x0f
    217a:	b8 89       	ldd	r27, Y+16	; 0x10
    217c:	2a e0       	ldi	r18, 0x0A	; 10
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__divmodsi4>
    218c:	da 01       	movw	r26, r20
    218e:	c9 01       	movw	r24, r18
    2190:	8d 87       	std	Y+13, r24	; 0x0d
    2192:	9e 87       	std	Y+14, r25	; 0x0e
    2194:	af 87       	std	Y+15, r26	; 0x0f
    2196:	b8 8b       	std	Y+16, r27	; 0x10
	{
		LCD_VidSendData('0');
	}
	u8 LOC_U8Rem,LOC_U8i=0;
	u8 LOC_U8arr[10];
	while(Copy_U8Data>0)
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	af 85       	ldd	r26, Y+15	; 0x0f
    219e:	b8 89       	ldd	r27, Y+16	; 0x10
    21a0:	18 16       	cp	r1, r24
    21a2:	19 06       	cpc	r1, r25
    21a4:	1a 06       	cpc	r1, r26
    21a6:	1b 06       	cpc	r1, r27
    21a8:	4c f2       	brlt	.-110    	; 0x213c <LCD_VidSendDataInteger+0x66>
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_VidSendDataInteger+0xf4>
		LOC_U8arr[LOC_U8i++]=LOC_U8Rem;  /* store remainder in array*/
		Copy_U8Data/=10;
	}
	while(LOC_U8i>0)   /*change array elements to ASCII and Display in reverse order  */
	{
		LOC_U8i--;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	81 50       	subi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
		LCD_VidSendData(LOC_U8arr[LOC_U8i]+'0');
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	ce 01       	movw	r24, r28
    21ba:	03 96       	adiw	r24, 0x03	; 3
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	80 81       	ld	r24, Z
    21c4:	80 5d       	subi	r24, 0xD0	; 208
    21c6:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
	{
		LOC_U8Rem=Copy_U8Data%10;
		LOC_U8arr[LOC_U8i++]=LOC_U8Rem;  /* store remainder in array*/
		Copy_U8Data/=10;
	}
	while(LOC_U8i>0)   /*change array elements to ASCII and Display in reverse order  */
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	88 23       	and	r24, r24
    21ce:	71 f7       	brne	.-36     	; 0x21ac <LCD_VidSendDataInteger+0xd6>
	{
		LOC_U8i--;
		LCD_VidSendData(LOC_U8arr[LOC_U8i]+'0');
	}
}
    21d0:	60 96       	adiw	r28, 0x10	; 16
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_VidSendDataFloat>:
 * Description : Output number (with decimal part) to LCD at current cursor position
 * Arguments   : Data as number
 * return      : void
 */
void LCD_VidSendDataFloat(f32 Copy_U8Data)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	62 97       	sbiw	r28, 0x12	; 18
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	6f 87       	std	Y+15, r22	; 0x0f
    21f8:	78 8b       	std	Y+16, r23	; 0x10
    21fa:	89 8b       	std	Y+17, r24	; 0x11
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
	if(Copy_U8Data<0.0 && Copy_U8Data>-1.0)
    21fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2200:	78 89       	ldd	r23, Y+16	; 0x10
    2202:	89 89       	ldd	r24, Y+17	; 0x11
    2204:	9a 89       	ldd	r25, Y+18	; 0x12
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	7c f4       	brge	.+30     	; 0x2234 <LCD_VidSendDataFloat+0x52>
    2216:	6f 85       	ldd	r22, Y+15	; 0x0f
    2218:	78 89       	ldd	r23, Y+16	; 0x10
    221a:	89 89       	ldd	r24, Y+17	; 0x11
    221c:	9a 89       	ldd	r25, Y+18	; 0x12
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f eb       	ldi	r21, 0xBF	; 191
    2226:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	1c f4       	brge	.+6      	; 0x2234 <LCD_VidSendDataFloat+0x52>
	{
		LCD_VidSendData('-');
    222e:	8d e2       	ldi	r24, 0x2D	; 45
    2230:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
	}
	f32 LOC_U8Data= Copy_U8Data-(s32)Copy_U8Data;  /*Decimal part of the number */
    2234:	6f 85       	ldd	r22, Y+15	; 0x0f
    2236:	78 89       	ldd	r23, Y+16	; 0x10
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	9a 89       	ldd	r25, Y+18	; 0x12
    223c:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    224c:	9b 01       	movw	r18, r22
    224e:	ac 01       	movw	r20, r24
    2250:	6f 85       	ldd	r22, Y+15	; 0x0f
    2252:	78 89       	ldd	r23, Y+16	; 0x10
    2254:	89 89       	ldd	r24, Y+17	; 0x11
    2256:	9a 89       	ldd	r25, Y+18	; 0x12
    2258:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8b 87       	std	Y+11, r24	; 0x0b
    2262:	9c 87       	std	Y+12, r25	; 0x0c
    2264:	ad 87       	std	Y+13, r26	; 0x0d
    2266:	be 87       	std	Y+14, r27	; 0x0e
	LCD_VidSendDataInteger((s32)Copy_U8Data);    /*Display real part of the number */
    2268:	6f 85       	ldd	r22, Y+15	; 0x0f
    226a:	78 89       	ldd	r23, Y+16	; 0x10
    226c:	89 89       	ldd	r24, Y+17	; 0x11
    226e:	9a 89       	ldd	r25, Y+18	; 0x12
    2270:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_VidSendDataInteger>
	if(LOC_U8Data == 0.0)
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2294:	88 23       	and	r24, r24
    2296:	09 f4       	brne	.+2      	; 0x229a <LCD_VidSendDataFloat+0xb8>
    2298:	6d c0       	rjmp	.+218    	; 0x2374 <LCD_VidSendDataFloat+0x192>
	{
		return;    /*End if Decimal part is zero*/
	}
	LCD_VidSendData('.');  /* Display Decimal character*/
    229a:	8e e2       	ldi	r24, 0x2E	; 46
    229c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
	s32 LOC_U8X=(u32)(LOC_U8Data*1000.0);  /*Accuracy up to 3 Decimal Digits */
    22a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a e7       	ldi	r20, 0x7A	; 122
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8f 83       	std	Y+7, r24	; 0x07
    22c6:	98 87       	std	Y+8, r25	; 0x08
    22c8:	a9 87       	std	Y+9, r26	; 0x09
    22ca:	ba 87       	std	Y+10, r27	; 0x0a
	if(LOC_U8X < 0)
    22cc:	8f 81       	ldd	r24, Y+7	; 0x07
    22ce:	98 85       	ldd	r25, Y+8	; 0x08
    22d0:	a9 85       	ldd	r26, Y+9	; 0x09
    22d2:	ba 85       	ldd	r27, Y+10	; 0x0a
    22d4:	bb 23       	and	r27, r27
    22d6:	7c f4       	brge	.+30     	; 0x22f6 <LCD_VidSendDataFloat+0x114>
	{
		LOC_U8X=~(LOC_U8X)+1;    /*2nd Complement to print positive number after decimal in case number is negative*/
    22d8:	8f 81       	ldd	r24, Y+7	; 0x07
    22da:	98 85       	ldd	r25, Y+8	; 0x08
    22dc:	a9 85       	ldd	r26, Y+9	; 0x09
    22de:	ba 85       	ldd	r27, Y+10	; 0x0a
    22e0:	b0 95       	com	r27
    22e2:	a0 95       	com	r26
    22e4:	90 95       	com	r25
    22e6:	81 95       	neg	r24
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	af 4f       	sbci	r26, 0xFF	; 255
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	8f 83       	std	Y+7, r24	; 0x07
    22f0:	98 87       	std	Y+8, r25	; 0x08
    22f2:	a9 87       	std	Y+9, r26	; 0x09
    22f4:	ba 87       	std	Y+10, r27	; 0x0a
	}
	u32 LOC_U8Y=LOC_U8X;
    22f6:	8f 81       	ldd	r24, Y+7	; 0x07
    22f8:	98 85       	ldd	r25, Y+8	; 0x08
    22fa:	a9 85       	ldd	r26, Y+9	; 0x09
    22fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	ad 83       	std	Y+5, r26	; 0x05
    2304:	be 83       	std	Y+6, r27	; 0x06
	u8 LOC_U8Digit=0;
    2306:	1a 82       	std	Y+2, r1	; 0x02
    2308:	15 c0       	rjmp	.+42     	; 0x2334 <LCD_VidSendDataFloat+0x152>
	while(LOC_U8X != 0)  /*Calculate Number of Digits after Decimal (if zero after '.' direct won't be calculated)*/
	{
		LOC_U8Digit++;
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8a 83       	std	Y+2, r24	; 0x02
		LOC_U8X/=10;
    2310:	8f 81       	ldd	r24, Y+7	; 0x07
    2312:	98 85       	ldd	r25, Y+8	; 0x08
    2314:	a9 85       	ldd	r26, Y+9	; 0x09
    2316:	ba 85       	ldd	r27, Y+10	; 0x0a
    2318:	2a e0       	ldi	r18, 0x0A	; 10
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__divmodsi4>
    2328:	da 01       	movw	r26, r20
    232a:	c9 01       	movw	r24, r18
    232c:	8f 83       	std	Y+7, r24	; 0x07
    232e:	98 87       	std	Y+8, r25	; 0x08
    2330:	a9 87       	std	Y+9, r26	; 0x09
    2332:	ba 87       	std	Y+10, r27	; 0x0a
	{
		LOC_U8X=~(LOC_U8X)+1;    /*2nd Complement to print positive number after decimal in case number is negative*/
	}
	u32 LOC_U8Y=LOC_U8X;
	u8 LOC_U8Digit=0;
	while(LOC_U8X != 0)  /*Calculate Number of Digits after Decimal (if zero after '.' direct won't be calculated)*/
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	98 85       	ldd	r25, Y+8	; 0x08
    2338:	a9 85       	ldd	r26, Y+9	; 0x09
    233a:	ba 85       	ldd	r27, Y+10	; 0x0a
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	a1 05       	cpc	r26, r1
    2340:	b1 05       	cpc	r27, r1
    2342:	19 f7       	brne	.-58     	; 0x230a <LCD_VidSendDataFloat+0x128>
	{
		LOC_U8Digit++;
		LOC_U8X/=10;
	}
	for(u8 LOC_U8i=3;LOC_U8i>LOC_U8Digit;LOC_U8i--)  /* Display zeros after'.' direct */
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	09 c0       	rjmp	.+18     	; 0x235c <LCD_VidSendDataFloat+0x17a>
	{
		LCD_VidSendDataInteger(0);
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_VidSendDataInteger>
	while(LOC_U8X != 0)  /*Calculate Number of Digits after Decimal (if zero after '.' direct won't be calculated)*/
	{
		LOC_U8Digit++;
		LOC_U8X/=10;
	}
	for(u8 LOC_U8i=3;LOC_U8i>LOC_U8Digit;LOC_U8i--)  /* Display zeros after'.' direct */
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	81 50       	subi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	99 81       	ldd	r25, Y+1	; 0x01
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	89 17       	cp	r24, r25
    2362:	98 f3       	brcs	.-26     	; 0x234a <LCD_VidSendDataFloat+0x168>
	{
		LCD_VidSendDataInteger(0);
	}
	LCD_VidSendDataInteger(LOC_U8Y); /*Display Decimal number*/
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	ad 81       	ldd	r26, Y+5	; 0x05
    236a:	be 81       	ldd	r27, Y+6	; 0x06
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_VidSendDataInteger>
}
    2374:	62 96       	adiw	r28, 0x12	; 18
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <LCD_VidDataShiftLeft>:
 * Description : Shift all display left one step
 * Arguments   : void
 * return      : void
 */
void LCD_VidDataShiftLeft()
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_SHIFTLEFT);
    238e:	88 e1       	ldi	r24, 0x18	; 24
    2390:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
}
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LCD_VidClearData>:
 * Description : Clear entire display and sets DDRaM address to 0x00
 * Arguments   : void
 * return      : void
 */
void LCD_VidClearData()
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(DISPLAY_CLR);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
}
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LCD_VidSetDataLocation>:
 * Description : Sets DDRaM address to 0x00 and return shifted display to original position
 * Arguments   : void
 * return      : void
 */
void LCD_VidSetDataLocation()
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(RESET_DATA);
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_VidDataShiftRight>:
 * Description : Shift all display right one step
 * Arguments   : void
 * return      : void
 */
void LCD_VidDataShiftRight()
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_SHIFTRIGHT);
    23ca:	8c e1       	ldi	r24, 0x1C	; 28
    23cc:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <LCD_VidCursorShiftRight>:
* Description : shift cursor position one right step
* Arguments   : void
* return      : void
*/
void LCD_VidCursorShiftRight(void)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_CURSOR_RIGHT);
    23de:	84 e1       	ldi	r24, 0x14	; 20
    23e0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <LCD_VidCursorShiftLeft>:
* Description : shift cursor position one Left step
* Arguments   : void
* return      : void
*/
void LCD_VidCursorShiftLeft(void)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_CURSOR_LEFT);
    23f2:	80 e1       	ldi	r24, 0x10	; 16
    23f4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_VidGoToLocation>:
 * Description : Set Cursor to certain position
 * Arguments   : number of row and column
 * return      : void
 */
void LCD_VidGoToLocation(u8 LOC_U8Row,u8 LOC_U8Column)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <LCD_VidGoToLocation+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <LCD_VidGoToLocation+0x8>
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_U8Row)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	3c 83       	std	Y+4, r19	; 0x04
    2416:	2b 83       	std	Y+3, r18	; 0x03
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	31 f0       	breq	.+12     	; 0x242c <LCD_VidGoToLocation+0x2e>
    2420:	2b 81       	ldd	r18, Y+3	; 0x03
    2422:	3c 81       	ldd	r19, Y+4	; 0x04
    2424:	21 30       	cpi	r18, 0x01	; 1
    2426:	31 05       	cpc	r19, r1
    2428:	31 f0       	breq	.+12     	; 0x2436 <LCD_VidGoToLocation+0x38>
    242a:	09 c0       	rjmp	.+18     	; 0x243e <LCD_VidGoToLocation+0x40>
	{
		case 0: LCD_VidSendCommand(LOC_U8Column + LCD_ADD_1LINE); break;
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	80 58       	subi	r24, 0x80	; 128
    2430:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
    2434:	04 c0       	rjmp	.+8      	; 0x243e <LCD_VidGoToLocation+0x40>
		case 1: LCD_VidSendCommand(LOC_U8Column + LCD_ADD_2LINE); break;
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	80 54       	subi	r24, 0x40	; 64
    243a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_VidSendCommand>
	}
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <LCD_VidConpleteRotateRight>:
 * Description : Display data,shift it to right until first line ended then second line then return to original position
 * Arguments   : Pointer to Array of data characters
 * return      : void
 */
void LCD_VidConpleteRotateRight(u8* Copy_U8Data)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	a4 97       	sbiw	r28, 0x24	; 36
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	9c a3       	std	Y+36, r25	; 0x24
    2462:	8b a3       	std	Y+35, r24	; 0x23
	u8 LOC_U8Len=0;
    2464:	1a a2       	std	Y+34, r1	; 0x22
    2466:	03 c0       	rjmp	.+6      	; 0x246e <LCD_VidConpleteRotateRight+0x22>
		while(Copy_U8Data[LOC_U8Len]!='\0')  /*Store length of string*/
		{
			LOC_U8Len++;
    2468:	8a a1       	ldd	r24, Y+34	; 0x22
    246a:	8f 5f       	subi	r24, 0xFF	; 255
    246c:	8a a3       	std	Y+34, r24	; 0x22
 * return      : void
 */
void LCD_VidConpleteRotateRight(u8* Copy_U8Data)
{
	u8 LOC_U8Len=0;
		while(Copy_U8Data[LOC_U8Len]!='\0')  /*Store length of string*/
    246e:	8a a1       	ldd	r24, Y+34	; 0x22
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	8b a1       	ldd	r24, Y+35	; 0x23
    2476:	9c a1       	ldd	r25, Y+36	; 0x24
    2478:	fc 01       	movw	r30, r24
    247a:	e2 0f       	add	r30, r18
    247c:	f3 1f       	adc	r31, r19
    247e:	80 81       	ld	r24, Z
    2480:	88 23       	and	r24, r24
    2482:	91 f7       	brne	.-28     	; 0x2468 <LCD_VidConpleteRotateRight+0x1c>
		{
			LOC_U8Len++;
		}
		u8 LOC_U8X=1,LOC_U8Y=1,LOC_U8Z=0;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	88 a3       	std	Y+32, r24	; 0x20
    248c:	1f 8e       	std	Y+31, r1	; 0x1f
		for(u8 LOC_U8i=0;LOC_U8i<16;LOC_U8i++)  /*to display data in  first line*/
    248e:	1e 8e       	std	Y+30, r1	; 0x1e
    2490:	b6 c0       	rjmp	.+364    	; 0x25fe <LCD_VidConpleteRotateRight+0x1b2>
		{
			LCD_VidClearData();
    2492:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
			LCD_VidGoToLocation(0,LOC_U8i);   /* shift display */
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	6e 8d       	ldd	r22, Y+30	; 0x1e
    249a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
			LCD_VidSendDatastring(Copy_U8Data);
    249e:	8b a1       	ldd	r24, Y+35	; 0x23
    24a0:	9c a1       	ldd	r25, Y+36	; 0x24
    24a2:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
			if(LOC_U8i>16-LOC_U8Len)   /*to display remaining part of string in second line(not all word in same line)*/
    24a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a8:	48 2f       	mov	r20, r24
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	8a a1       	ldd	r24, Y+34	; 0x22
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	80 e1       	ldi	r24, 0x10	; 16
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	82 1b       	sub	r24, r18
    24b8:	93 0b       	sbc	r25, r19
    24ba:	84 17       	cp	r24, r20
    24bc:	95 07       	cpc	r25, r21
    24be:	54 f5       	brge	.+84     	; 0x2514 <LCD_VidConpleteRotateRight+0xc8>
			{
				LOC_U8X=LOC_U8Y;
    24c0:	88 a1       	ldd	r24, Y+32	; 0x20
    24c2:	89 a3       	std	Y+33, r24	; 0x21
				LOC_U8Z=0;
    24c4:	1f 8e       	std	Y+31, r1	; 0x1f
    24c6:	20 c0       	rjmp	.+64     	; 0x2508 <LCD_VidConpleteRotateRight+0xbc>
				while(LOC_U8X)
				{
					LOC_U8X--;
    24c8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	89 a3       	std	Y+33, r24	; 0x21
					LCD_VidGoToLocation(1,LOC_U8Z);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24d2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
    24d6:	8a a1       	ldd	r24, Y+34	; 0x22
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9c 01       	movw	r18, r24
    24de:	21 50       	subi	r18, 0x01	; 1
    24e0:	30 40       	sbci	r19, 0x00	; 0
    24e2:	89 a1       	ldd	r24, Y+33	; 0x21
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a9 01       	movw	r20, r18
    24ea:	48 1b       	sub	r20, r24
    24ec:	59 0b       	sbc	r21, r25
    24ee:	ca 01       	movw	r24, r20
    24f0:	9c 01       	movw	r18, r24
    24f2:	8b a1       	ldd	r24, Y+35	; 0x23
    24f4:	9c a1       	ldd	r25, Y+36	; 0x24
    24f6:	fc 01       	movw	r30, r24
    24f8:	e2 0f       	add	r30, r18
    24fa:	f3 1f       	adc	r31, r19
    24fc:	80 81       	ld	r24, Z
    24fe:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
					LOC_U8Z++;
    2502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	8f 8f       	std	Y+31, r24	; 0x1f
			LCD_VidSendDatastring(Copy_U8Data);
			if(LOC_U8i>16-LOC_U8Len)   /*to display remaining part of string in second line(not all word in same line)*/
			{
				LOC_U8X=LOC_U8Y;
				LOC_U8Z=0;
				while(LOC_U8X)
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	88 23       	and	r24, r24
    250c:	e9 f6       	brne	.-70     	; 0x24c8 <LCD_VidConpleteRotateRight+0x7c>
					LOC_U8X--;
					LCD_VidGoToLocation(1,LOC_U8Z);
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
					LOC_U8Z++;
				}
				LOC_U8Y++;
    250e:	88 a1       	ldd	r24, Y+32	; 0x20
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	88 a3       	std	Y+32, r24	; 0x20
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a8 e4       	ldi	r26, 0x48	; 72
    251a:	b2 e4       	ldi	r27, 0x42	; 66
    251c:	89 8f       	std	Y+25, r24	; 0x19
    251e:	9a 8f       	std	Y+26, r25	; 0x1a
    2520:	ab 8f       	std	Y+27, r26	; 0x1b
    2522:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2524:	69 8d       	ldd	r22, Y+25	; 0x19
    2526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a ef       	ldi	r20, 0xFA	; 250
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8d 8b       	std	Y+21, r24	; 0x15
    253e:	9e 8b       	std	Y+22, r25	; 0x16
    2540:	af 8b       	std	Y+23, r26	; 0x17
    2542:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2544:	6d 89       	ldd	r22, Y+21	; 0x15
    2546:	7e 89       	ldd	r23, Y+22	; 0x16
    2548:	8f 89       	ldd	r24, Y+23	; 0x17
    254a:	98 8d       	ldd	r25, Y+24	; 0x18
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <LCD_VidConpleteRotateRight+0x11a>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9c 8b       	std	Y+20, r25	; 0x14
    2562:	8b 8b       	std	Y+19, r24	; 0x13
    2564:	3f c0       	rjmp	.+126    	; 0x25e4 <LCD_VidConpleteRotateRight+0x198>
	else if (__tmp > 65535)
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	4c f5       	brge	.+82     	; 0x25d0 <LCD_VidConpleteRotateRight+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257e:	69 8d       	ldd	r22, Y+25	; 0x19
    2580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	51 e4       	ldi	r21, 0x41	; 65
    258e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9c 8b       	std	Y+20, r25	; 0x14
    25a4:	8b 8b       	std	Y+19, r24	; 0x13
    25a6:	0f c0       	rjmp	.+30     	; 0x25c6 <LCD_VidConpleteRotateRight+0x17a>
    25a8:	88 ec       	ldi	r24, 0xC8	; 200
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9a 8b       	std	Y+18, r25	; 0x12
    25ae:	89 8b       	std	Y+17, r24	; 0x11
    25b0:	89 89       	ldd	r24, Y+17	; 0x11
    25b2:	9a 89       	ldd	r25, Y+18	; 0x12
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <LCD_VidConpleteRotateRight+0x168>
    25b8:	9a 8b       	std	Y+18, r25	; 0x12
    25ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	8b 89       	ldd	r24, Y+19	; 0x13
    25be:	9c 89       	ldd	r25, Y+20	; 0x14
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9c 8b       	std	Y+20, r25	; 0x14
    25c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	8b 89       	ldd	r24, Y+19	; 0x13
    25c8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	69 f7       	brne	.-38     	; 0x25a8 <LCD_VidConpleteRotateRight+0x15c>
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <LCD_VidConpleteRotateRight+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d0:	6d 89       	ldd	r22, Y+21	; 0x15
    25d2:	7e 89       	ldd	r23, Y+22	; 0x16
    25d4:	8f 89       	ldd	r24, Y+23	; 0x17
    25d6:	98 8d       	ldd	r25, Y+24	; 0x18
    25d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
    25e4:	8b 89       	ldd	r24, Y+19	; 0x13
    25e6:	9c 89       	ldd	r25, Y+20	; 0x14
    25e8:	98 8b       	std	Y+16, r25	; 0x10
    25ea:	8f 87       	std	Y+15, r24	; 0x0f
    25ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ee:	98 89       	ldd	r25, Y+16	; 0x10
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_VidConpleteRotateRight+0x1a4>
    25f4:	98 8b       	std	Y+16, r25	; 0x10
    25f6:	8f 87       	std	Y+15, r24	; 0x0f
		while(Copy_U8Data[LOC_U8Len]!='\0')  /*Store length of string*/
		{
			LOC_U8Len++;
		}
		u8 LOC_U8X=1,LOC_U8Y=1,LOC_U8Z=0;
		for(u8 LOC_U8i=0;LOC_U8i<16;LOC_U8i++)  /*to display data in  first line*/
    25f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	8e 8f       	std	Y+30, r24	; 0x1e
    25fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2600:	80 31       	cpi	r24, 0x10	; 16
    2602:	08 f4       	brcc	.+2      	; 0x2606 <LCD_VidConpleteRotateRight+0x1ba>
    2604:	46 cf       	rjmp	.-372    	; 0x2492 <LCD_VidConpleteRotateRight+0x46>
				}
				LOC_U8Y++;
			}
			_delay_ms(50);
		}
		LOC_U8X=1,LOC_U8Y=1,LOC_U8Z=0;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	89 a3       	std	Y+33, r24	; 0x21
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	88 a3       	std	Y+32, r24	; 0x20
    260e:	1f 8e       	std	Y+31, r1	; 0x1f
		for(u8 LOC_U8i=0;LOC_U8i<16;LOC_U8i++) /*to display data in second line*/
    2610:	1d 8e       	std	Y+29, r1	; 0x1d
    2612:	b6 c0       	rjmp	.+364    	; 0x2780 <LCD_VidConpleteRotateRight+0x334>
		{
			LCD_VidClearData();
    2614:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
			LCD_VidGoToLocation(1,LOC_U8i);   /* shift display */
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    261c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
			LCD_VidSendDatastring(Copy_U8Data);
    2620:	8b a1       	ldd	r24, Y+35	; 0x23
    2622:	9c a1       	ldd	r25, Y+36	; 0x24
    2624:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
			if(LOC_U8i>16-LOC_U8Len) /*to display remaining part of string in first line(not all word in same line)*/
    2628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    262a:	48 2f       	mov	r20, r24
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	8a a1       	ldd	r24, Y+34	; 0x22
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	80 e1       	ldi	r24, 0x10	; 16
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	82 1b       	sub	r24, r18
    263a:	93 0b       	sbc	r25, r19
    263c:	84 17       	cp	r24, r20
    263e:	95 07       	cpc	r25, r21
    2640:	54 f5       	brge	.+84     	; 0x2696 <LCD_VidConpleteRotateRight+0x24a>
				{
				LOC_U8X=LOC_U8Y;
    2642:	88 a1       	ldd	r24, Y+32	; 0x20
    2644:	89 a3       	std	Y+33, r24	; 0x21
				LOC_U8Z=0;
    2646:	1f 8e       	std	Y+31, r1	; 0x1f
    2648:	20 c0       	rjmp	.+64     	; 0x268a <LCD_VidConpleteRotateRight+0x23e>
				while(LOC_U8X)
					{
					LOC_U8X--;
    264a:	89 a1       	ldd	r24, Y+33	; 0x21
    264c:	81 50       	subi	r24, 0x01	; 1
    264e:	89 a3       	std	Y+33, r24	; 0x21
					LCD_VidGoToLocation(0,LOC_U8Z);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2654:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
    2658:	8a a1       	ldd	r24, Y+34	; 0x22
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 01       	movw	r18, r24
    2660:	21 50       	subi	r18, 0x01	; 1
    2662:	30 40       	sbci	r19, 0x00	; 0
    2664:	89 a1       	ldd	r24, Y+33	; 0x21
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a9 01       	movw	r20, r18
    266c:	48 1b       	sub	r20, r24
    266e:	59 0b       	sbc	r21, r25
    2670:	ca 01       	movw	r24, r20
    2672:	9c 01       	movw	r18, r24
    2674:	8b a1       	ldd	r24, Y+35	; 0x23
    2676:	9c a1       	ldd	r25, Y+36	; 0x24
    2678:	fc 01       	movw	r30, r24
    267a:	e2 0f       	add	r30, r18
    267c:	f3 1f       	adc	r31, r19
    267e:	80 81       	ld	r24, Z
    2680:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
					LOC_U8Z++;
    2684:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2686:	8f 5f       	subi	r24, 0xFF	; 255
    2688:	8f 8f       	std	Y+31, r24	; 0x1f
			LCD_VidSendDatastring(Copy_U8Data);
			if(LOC_U8i>16-LOC_U8Len) /*to display remaining part of string in first line(not all word in same line)*/
				{
				LOC_U8X=LOC_U8Y;
				LOC_U8Z=0;
				while(LOC_U8X)
    268a:	89 a1       	ldd	r24, Y+33	; 0x21
    268c:	88 23       	and	r24, r24
    268e:	e9 f6       	brne	.-70     	; 0x264a <LCD_VidConpleteRotateRight+0x1fe>
					LOC_U8X--;
					LCD_VidGoToLocation(0,LOC_U8Z);
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
					LOC_U8Z++;
					}
					LOC_U8Y++;
    2690:	88 a1       	ldd	r24, Y+32	; 0x20
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	88 a3       	std	Y+32, r24	; 0x20
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a8 e4       	ldi	r26, 0x48	; 72
    269c:	b2 e4       	ldi	r27, 0x42	; 66
    269e:	8b 87       	std	Y+11, r24	; 0x0b
    26a0:	9c 87       	std	Y+12, r25	; 0x0c
    26a2:	ad 87       	std	Y+13, r26	; 0x0d
    26a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	4a ef       	ldi	r20, 0xFA	; 250
    26b4:	54 e4       	ldi	r21, 0x44	; 68
    26b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	8f 83       	std	Y+7, r24	; 0x07
    26c0:	98 87       	std	Y+8, r25	; 0x08
    26c2:	a9 87       	std	Y+9, r26	; 0x09
    26c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <LCD_VidConpleteRotateRight+0x29c>
		__ticks = 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	3f c0       	rjmp	.+126    	; 0x2766 <LCD_VidConpleteRotateRight+0x31a>
	else if (__tmp > 65535)
    26e8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ea:	78 85       	ldd	r23, Y+8	; 0x08
    26ec:	89 85       	ldd	r24, Y+9	; 0x09
    26ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	3f ef       	ldi	r19, 0xFF	; 255
    26f4:	4f e7       	ldi	r20, 0x7F	; 127
    26f6:	57 e4       	ldi	r21, 0x47	; 71
    26f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    26fc:	18 16       	cp	r1, r24
    26fe:	4c f5       	brge	.+82     	; 0x2752 <LCD_VidConpleteRotateRight+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2700:	6b 85       	ldd	r22, Y+11	; 0x0b
    2702:	7c 85       	ldd	r23, Y+12	; 0x0c
    2704:	8d 85       	ldd	r24, Y+13	; 0x0d
    2706:	9e 85       	ldd	r25, Y+14	; 0x0e
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e2       	ldi	r20, 0x20	; 32
    270e:	51 e4       	ldi	r21, 0x41	; 65
    2710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <LCD_VidConpleteRotateRight+0x2fc>
    272a:	88 ec       	ldi	r24, 0xC8	; 200
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <LCD_VidConpleteRotateRight+0x2ea>
    273a:	9c 83       	std	Y+4, r25	; 0x04
    273c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	69 f7       	brne	.-38     	; 0x272a <LCD_VidConpleteRotateRight+0x2de>
    2750:	14 c0       	rjmp	.+40     	; 0x277a <LCD_VidConpleteRotateRight+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <LCD_VidConpleteRotateRight+0x326>
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
				LOC_U8Y++;
			}
			_delay_ms(50);
		}
		LOC_U8X=1,LOC_U8Y=1,LOC_U8Z=0;
		for(u8 LOC_U8i=0;LOC_U8i<16;LOC_U8i++) /*to display data in second line*/
    277a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	8d 8f       	std	Y+29, r24	; 0x1d
    2780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2782:	80 31       	cpi	r24, 0x10	; 16
    2784:	08 f4       	brcc	.+2      	; 0x2788 <LCD_VidConpleteRotateRight+0x33c>
    2786:	46 cf       	rjmp	.-372    	; 0x2614 <LCD_VidConpleteRotateRight+0x1c8>
					}
					LOC_U8Y++;
				}
			_delay_ms(50);
		}
}
    2788:	a4 96       	adiw	r28, 0x24	; 36
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_VidConpleteRotateLeft>:
 * Description : Display data,shift it to  left until second line ended then first line then return to original position
 * Arguments   : Pointer to Array of data characters
 * return      : void
 */
void LCD_VidConpleteRotateLeft(u8* Copy_U8Data)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	e2 97       	sbiw	r28, 0x32	; 50
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	9a ab       	std	Y+50, r25	; 0x32
    27b0:	89 ab       	std	Y+49, r24	; 0x31
	u8 LOC_U8Len=0;
    27b2:	18 aa       	std	Y+48, r1	; 0x30
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <LCD_VidConpleteRotateLeft+0x22>
		while(Copy_U8Data[LOC_U8Len]!='\0') /*Store length of string*/
		{
			LOC_U8Len++;
    27b6:	88 a9       	ldd	r24, Y+48	; 0x30
    27b8:	8f 5f       	subi	r24, 0xFF	; 255
    27ba:	88 ab       	std	Y+48, r24	; 0x30
 * return      : void
 */
void LCD_VidConpleteRotateLeft(u8* Copy_U8Data)
{
	u8 LOC_U8Len=0;
		while(Copy_U8Data[LOC_U8Len]!='\0') /*Store length of string*/
    27bc:	88 a9       	ldd	r24, Y+48	; 0x30
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	89 a9       	ldd	r24, Y+49	; 0x31
    27c4:	9a a9       	ldd	r25, Y+50	; 0x32
    27c6:	fc 01       	movw	r30, r24
    27c8:	e2 0f       	add	r30, r18
    27ca:	f3 1f       	adc	r31, r19
    27cc:	80 81       	ld	r24, Z
    27ce:	88 23       	and	r24, r24
    27d0:	91 f7       	brne	.-28     	; 0x27b6 <LCD_VidConpleteRotateLeft+0x1c>
		{
			LOC_U8Len++;
		}
		LCD_VidSendDatastring(Copy_U8Data);
    27d2:	89 a9       	ldd	r24, Y+49	; 0x31
    27d4:	9a a9       	ldd	r25, Y+50	; 0x32
    27d6:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a8 e4       	ldi	r26, 0x48	; 72
    27e0:	b2 e4       	ldi	r27, 0x42	; 66
    27e2:	8f a3       	std	Y+39, r24	; 0x27
    27e4:	98 a7       	std	Y+40, r25	; 0x28
    27e6:	a9 a7       	std	Y+41, r26	; 0x29
    27e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6f a1       	ldd	r22, Y+39	; 0x27
    27ec:	78 a5       	ldd	r23, Y+40	; 0x28
    27ee:	89 a5       	ldd	r24, Y+41	; 0x29
    27f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8b a3       	std	Y+35, r24	; 0x23
    2804:	9c a3       	std	Y+36, r25	; 0x24
    2806:	ad a3       	std	Y+37, r26	; 0x25
    2808:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    280a:	6b a1       	ldd	r22, Y+35	; 0x23
    280c:	7c a1       	ldd	r23, Y+36	; 0x24
    280e:	8d a1       	ldd	r24, Y+37	; 0x25
    2810:	9e a1       	ldd	r25, Y+38	; 0x26
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <LCD_VidConpleteRotateLeft+0x92>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <LCD_VidConpleteRotateLeft+0x110>
	else if (__tmp > 65535)
    282c:	6b a1       	ldd	r22, Y+35	; 0x23
    282e:	7c a1       	ldd	r23, Y+36	; 0x24
    2830:	8d a1       	ldd	r24, Y+37	; 0x25
    2832:	9e a1       	ldd	r25, Y+38	; 0x26
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <LCD_VidConpleteRotateLeft+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6f a1       	ldd	r22, Y+39	; 0x27
    2846:	78 a5       	ldd	r23, Y+40	; 0x28
    2848:	89 a5       	ldd	r24, Y+41	; 0x29
    284a:	9a a5       	ldd	r25, Y+42	; 0x2a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9a a3       	std	Y+34, r25	; 0x22
    286a:	89 a3       	std	Y+33, r24	; 0x21
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_VidConpleteRotateLeft+0xf2>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	98 a3       	std	Y+32, r25	; 0x20
    2874:	8f 8f       	std	Y+31, r24	; 0x1f
    2876:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2878:	98 a1       	ldd	r25, Y+32	; 0x20
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_VidConpleteRotateLeft+0xe0>
    287e:	98 a3       	std	Y+32, r25	; 0x20
    2880:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	89 a1       	ldd	r24, Y+33	; 0x21
    2884:	9a a1       	ldd	r25, Y+34	; 0x22
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9a a3       	std	Y+34, r25	; 0x22
    288a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	89 a1       	ldd	r24, Y+33	; 0x21
    288e:	9a a1       	ldd	r25, Y+34	; 0x22
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <LCD_VidConpleteRotateLeft+0xd4>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <LCD_VidConpleteRotateLeft+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6b a1       	ldd	r22, Y+35	; 0x23
    2898:	7c a1       	ldd	r23, Y+36	; 0x24
    289a:	8d a1       	ldd	r24, Y+37	; 0x25
    289c:	9e a1       	ldd	r25, Y+38	; 0x26
    289e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9a a3       	std	Y+34, r25	; 0x22
    28a8:	89 a3       	std	Y+33, r24	; 0x21
    28aa:	89 a1       	ldd	r24, Y+33	; 0x21
    28ac:	9a a1       	ldd	r25, Y+34	; 0x22
    28ae:	9e 8f       	std	Y+30, r25	; 0x1e
    28b0:	8d 8f       	std	Y+29, r24	; 0x1d
    28b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_VidConpleteRotateLeft+0x11c>
    28ba:	9e 8f       	std	Y+30, r25	; 0x1e
    28bc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		u8 LOC_U8X=LOC_U8Len-1,LOC_U8Y=LOC_U8Len-1,LOC_U8Z=0;
    28be:	88 a9       	ldd	r24, Y+48	; 0x30
    28c0:	81 50       	subi	r24, 0x01	; 1
    28c2:	8f a7       	std	Y+47, r24	; 0x2f
    28c4:	88 a9       	ldd	r24, Y+48	; 0x30
    28c6:	81 50       	subi	r24, 0x01	; 1
    28c8:	8e a7       	std	Y+46, r24	; 0x2e
    28ca:	1d a6       	std	Y+45, r1	; 0x2d
		for(s8 LOC_U8i=15;LOC_U8i>=0;LOC_U8i--)
    28cc:	8f e0       	ldi	r24, 0x0F	; 15
    28ce:	8c a7       	std	Y+44, r24	; 0x2c
    28d0:	b9 c0       	rjmp	.+370    	; 0x2a44 <LCD_VidConpleteRotateLeft+0x2aa>
		{
			LCD_VidClearData();
    28d2:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
			LCD_VidGoToLocation(1,LOC_U8i);  /* shift display */
    28d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	69 2f       	mov	r22, r25
    28dc:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
			LCD_VidSendDatastring(Copy_U8Data);
    28e0:	89 a9       	ldd	r24, Y+49	; 0x31
    28e2:	9a a9       	ldd	r25, Y+50	; 0x32
    28e4:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
			if(LOC_U8i>16-LOC_U8Len)/*to display remaining part of string in second line(not all word in same line)*/
    28e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    28ea:	48 2f       	mov	r20, r24
    28ec:	55 27       	eor	r21, r21
    28ee:	47 fd       	sbrc	r20, 7
    28f0:	50 95       	com	r21
    28f2:	88 a9       	ldd	r24, Y+48	; 0x30
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	80 e1       	ldi	r24, 0x10	; 16
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	82 1b       	sub	r24, r18
    28fe:	93 0b       	sbc	r25, r19
    2900:	84 17       	cp	r24, r20
    2902:	95 07       	cpc	r25, r21
    2904:	54 f5       	brge	.+84     	; 0x295a <LCD_VidConpleteRotateLeft+0x1c0>
				{
				LOC_U8X=LOC_U8Y;
    2906:	8e a5       	ldd	r24, Y+46	; 0x2e
    2908:	8f a7       	std	Y+47, r24	; 0x2f
				LOC_U8Z=0;
    290a:	1d a6       	std	Y+45, r1	; 0x2d
    290c:	20 c0       	rjmp	.+64     	; 0x294e <LCD_VidConpleteRotateLeft+0x1b4>
				while(LOC_U8X)
					{
					LOC_U8X--;
    290e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	8f a7       	std	Y+47, r24	; 0x2f
					LCD_VidGoToLocation(0,LOC_U8Z);
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	6d a5       	ldd	r22, Y+45	; 0x2d
    2918:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
    291c:	88 a9       	ldd	r24, Y+48	; 0x30
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9c 01       	movw	r18, r24
    2924:	21 50       	subi	r18, 0x01	; 1
    2926:	30 40       	sbci	r19, 0x00	; 0
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	88 2f       	mov	r24, r24
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a9 01       	movw	r20, r18
    2930:	48 1b       	sub	r20, r24
    2932:	59 0b       	sbc	r21, r25
    2934:	ca 01       	movw	r24, r20
    2936:	9c 01       	movw	r18, r24
    2938:	89 a9       	ldd	r24, Y+49	; 0x31
    293a:	9a a9       	ldd	r25, Y+50	; 0x32
    293c:	fc 01       	movw	r30, r24
    293e:	e2 0f       	add	r30, r18
    2940:	f3 1f       	adc	r31, r19
    2942:	80 81       	ld	r24, Z
    2944:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
					LOC_U8Z++;
    2948:	8d a5       	ldd	r24, Y+45	; 0x2d
    294a:	8f 5f       	subi	r24, 0xFF	; 255
    294c:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_VidSendDatastring(Copy_U8Data);
			if(LOC_U8i>16-LOC_U8Len)/*to display remaining part of string in second line(not all word in same line)*/
				{
				LOC_U8X=LOC_U8Y;
				LOC_U8Z=0;
				while(LOC_U8X)
    294e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2950:	88 23       	and	r24, r24
    2952:	e9 f6       	brne	.-70     	; 0x290e <LCD_VidConpleteRotateLeft+0x174>
					LOC_U8X--;
					LCD_VidGoToLocation(0,LOC_U8Z);
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
					LOC_U8Z++;
					}
					LOC_U8Y--;
    2954:	8e a5       	ldd	r24, Y+46	; 0x2e
    2956:	81 50       	subi	r24, 0x01	; 1
    2958:	8e a7       	std	Y+46, r24	; 0x2e
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a8 e4       	ldi	r26, 0x48	; 72
    2960:	b2 e4       	ldi	r27, 0x42	; 66
    2962:	89 8f       	std	Y+25, r24	; 0x19
    2964:	9a 8f       	std	Y+26, r25	; 0x1a
    2966:	ab 8f       	std	Y+27, r26	; 0x1b
    2968:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	69 8d       	ldd	r22, Y+25	; 0x19
    296c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a ef       	ldi	r20, 0xFA	; 250
    2978:	54 e4       	ldi	r21, 0x44	; 68
    297a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8d 8b       	std	Y+21, r24	; 0x15
    2984:	9e 8b       	std	Y+22, r25	; 0x16
    2986:	af 8b       	std	Y+23, r26	; 0x17
    2988:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    298a:	6d 89       	ldd	r22, Y+21	; 0x15
    298c:	7e 89       	ldd	r23, Y+22	; 0x16
    298e:	8f 89       	ldd	r24, Y+23	; 0x17
    2990:	98 8d       	ldd	r25, Y+24	; 0x18
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	2c f4       	brge	.+10     	; 0x29ac <LCD_VidConpleteRotateLeft+0x212>
		__ticks = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
    29aa:	3f c0       	rjmp	.+126    	; 0x2a2a <LCD_VidConpleteRotateLeft+0x290>
	else if (__tmp > 65535)
    29ac:	6d 89       	ldd	r22, Y+21	; 0x15
    29ae:	7e 89       	ldd	r23, Y+22	; 0x16
    29b0:	8f 89       	ldd	r24, Y+23	; 0x17
    29b2:	98 8d       	ldd	r25, Y+24	; 0x18
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	4c f5       	brge	.+82     	; 0x2a16 <LCD_VidConpleteRotateLeft+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	69 8d       	ldd	r22, Y+25	; 0x19
    29c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9c 8b       	std	Y+20, r25	; 0x14
    29ea:	8b 8b       	std	Y+19, r24	; 0x13
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <LCD_VidConpleteRotateLeft+0x272>
    29ee:	88 ec       	ldi	r24, 0xC8	; 200
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
    29f6:	89 89       	ldd	r24, Y+17	; 0x11
    29f8:	9a 89       	ldd	r25, Y+18	; 0x12
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_VidConpleteRotateLeft+0x260>
    29fe:	9a 8b       	std	Y+18, r25	; 0x12
    2a00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	9c 8b       	std	Y+20, r25	; 0x14
    2a0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f7       	brne	.-38     	; 0x29ee <LCD_VidConpleteRotateLeft+0x254>
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <LCD_VidConpleteRotateLeft+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9c 8b       	std	Y+20, r25	; 0x14
    2a28:	8b 8b       	std	Y+19, r24	; 0x13
    2a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
    2a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a34:	98 89       	ldd	r25, Y+16	; 0x10
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_VidConpleteRotateLeft+0x29c>
    2a3a:	98 8b       	std	Y+16, r25	; 0x10
    2a3c:	8f 87       	std	Y+15, r24	; 0x0f
			LOC_U8Len++;
		}
		LCD_VidSendDatastring(Copy_U8Data);
		_delay_ms(50);
		u8 LOC_U8X=LOC_U8Len-1,LOC_U8Y=LOC_U8Len-1,LOC_U8Z=0;
		for(s8 LOC_U8i=15;LOC_U8i>=0;LOC_U8i--)
    2a3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a40:	81 50       	subi	r24, 0x01	; 1
    2a42:	8c a7       	std	Y+44, r24	; 0x2c
    2a44:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a46:	88 23       	and	r24, r24
    2a48:	0c f0       	brlt	.+2      	; 0x2a4c <LCD_VidConpleteRotateLeft+0x2b2>
    2a4a:	43 cf       	rjmp	.-378    	; 0x28d2 <LCD_VidConpleteRotateLeft+0x138>
					}
					LOC_U8Y--;
				}
			_delay_ms(50);
		}
		LOC_U8X=LOC_U8Len-1,LOC_U8Y=LOC_U8Len-1,LOC_U8Z=0;
    2a4c:	88 a9       	ldd	r24, Y+48	; 0x30
    2a4e:	81 50       	subi	r24, 0x01	; 1
    2a50:	8f a7       	std	Y+47, r24	; 0x2f
    2a52:	88 a9       	ldd	r24, Y+48	; 0x30
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	8e a7       	std	Y+46, r24	; 0x2e
    2a58:	1d a6       	std	Y+45, r1	; 0x2d
		for(s8 LOC_U8i=15;LOC_U8i>=0;LOC_U8i--)
    2a5a:	8f e0       	ldi	r24, 0x0F	; 15
    2a5c:	8b a7       	std	Y+43, r24	; 0x2b
    2a5e:	b9 c0       	rjmp	.+370    	; 0x2bd2 <LCD_VidConpleteRotateLeft+0x438>
		{
			LCD_VidClearData();
    2a60:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
			LCD_VidGoToLocation(0,LOC_U8i);  /* shift display */
    2a64:	9b a5       	ldd	r25, Y+43	; 0x2b
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	69 2f       	mov	r22, r25
    2a6a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
			LCD_VidSendDatastring(Copy_U8Data);
    2a6e:	89 a9       	ldd	r24, Y+49	; 0x31
    2a70:	9a a9       	ldd	r25, Y+50	; 0x32
    2a72:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
			if(LOC_U8i>16-LOC_U8Len)/*to display remaining part of string in first line(not all word in same line)*/
    2a76:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a78:	48 2f       	mov	r20, r24
    2a7a:	55 27       	eor	r21, r21
    2a7c:	47 fd       	sbrc	r20, 7
    2a7e:	50 95       	com	r21
    2a80:	88 a9       	ldd	r24, Y+48	; 0x30
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	80 e1       	ldi	r24, 0x10	; 16
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	82 1b       	sub	r24, r18
    2a8c:	93 0b       	sbc	r25, r19
    2a8e:	84 17       	cp	r24, r20
    2a90:	95 07       	cpc	r25, r21
    2a92:	54 f5       	brge	.+84     	; 0x2ae8 <LCD_VidConpleteRotateLeft+0x34e>
			{
				LOC_U8X=LOC_U8Y;
    2a94:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a96:	8f a7       	std	Y+47, r24	; 0x2f
				LOC_U8Z=0;
    2a98:	1d a6       	std	Y+45, r1	; 0x2d
    2a9a:	20 c0       	rjmp	.+64     	; 0x2adc <LCD_VidConpleteRotateLeft+0x342>
				while(LOC_U8X)
				{
					LOC_U8X--;
    2a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9e:	81 50       	subi	r24, 0x01	; 1
    2aa0:	8f a7       	std	Y+47, r24	; 0x2f
					LCD_VidGoToLocation(1,LOC_U8Z);
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2aa6:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
    2aaa:	88 a9       	ldd	r24, Y+48	; 0x30
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	21 50       	subi	r18, 0x01	; 1
    2ab4:	30 40       	sbci	r19, 0x00	; 0
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	a9 01       	movw	r20, r18
    2abe:	48 1b       	sub	r20, r24
    2ac0:	59 0b       	sbc	r21, r25
    2ac2:	ca 01       	movw	r24, r20
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	89 a9       	ldd	r24, Y+49	; 0x31
    2ac8:	9a a9       	ldd	r25, Y+50	; 0x32
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 0f       	add	r30, r18
    2ace:	f3 1f       	adc	r31, r19
    2ad0:	80 81       	ld	r24, Z
    2ad2:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
					LOC_U8Z++;
    2ad6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ad8:	8f 5f       	subi	r24, 0xFF	; 255
    2ada:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_VidSendDatastring(Copy_U8Data);
			if(LOC_U8i>16-LOC_U8Len)/*to display remaining part of string in first line(not all word in same line)*/
			{
				LOC_U8X=LOC_U8Y;
				LOC_U8Z=0;
				while(LOC_U8X)
    2adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ade:	88 23       	and	r24, r24
    2ae0:	e9 f6       	brne	.-70     	; 0x2a9c <LCD_VidConpleteRotateLeft+0x302>
					LOC_U8X--;
					LCD_VidGoToLocation(1,LOC_U8Z);
					LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8X]);
					LOC_U8Z++;
				}
				LOC_U8Y--;
    2ae2:	8e a5       	ldd	r24, Y+46	; 0x2e
    2ae4:	81 50       	subi	r24, 0x01	; 1
    2ae6:	8e a7       	std	Y+46, r24	; 0x2e
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a8 e4       	ldi	r26, 0x48	; 72
    2aee:	b2 e4       	ldi	r27, 0x42	; 66
    2af0:	8b 87       	std	Y+11, r24	; 0x0b
    2af2:	9c 87       	std	Y+12, r25	; 0x0c
    2af4:	ad 87       	std	Y+13, r26	; 0x0d
    2af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4a ef       	ldi	r20, 0xFA	; 250
    2b06:	54 e4       	ldi	r21, 0x44	; 68
    2b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8f 83       	std	Y+7, r24	; 0x07
    2b12:	98 87       	std	Y+8, r25	; 0x08
    2b14:	a9 87       	std	Y+9, r26	; 0x09
    2b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b18:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1a:	78 85       	ldd	r23, Y+8	; 0x08
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e8       	ldi	r20, 0x80	; 128
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2b2c:	88 23       	and	r24, r24
    2b2e:	2c f4       	brge	.+10     	; 0x2b3a <LCD_VidConpleteRotateLeft+0x3a0>
		__ticks = 1;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
    2b38:	3f c0       	rjmp	.+126    	; 0x2bb8 <LCD_VidConpleteRotateLeft+0x41e>
	else if (__tmp > 65535)
    2b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3c:	78 85       	ldd	r23, Y+8	; 0x08
    2b3e:	89 85       	ldd	r24, Y+9	; 0x09
    2b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	4c f5       	brge	.+82     	; 0x2ba4 <LCD_VidConpleteRotateLeft+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e2       	ldi	r20, 0x20	; 32
    2b60:	51 e4       	ldi	r21, 0x41	; 65
    2b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9e 83       	std	Y+6, r25	; 0x06
    2b78:	8d 83       	std	Y+5, r24	; 0x05
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <LCD_VidConpleteRotateLeft+0x400>
    2b7c:	88 ec       	ldi	r24, 0xC8	; 200
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <LCD_VidConpleteRotateLeft+0x3ee>
    2b8c:	9c 83       	std	Y+4, r25	; 0x04
    2b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	69 f7       	brne	.-38     	; 0x2b7c <LCD_VidConpleteRotateLeft+0x3e2>
    2ba2:	14 c0       	rjmp	.+40     	; 0x2bcc <LCD_VidConpleteRotateLeft+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <LCD_VidConpleteRotateLeft+0x42a>
    2bc8:	9a 83       	std	Y+2, r25	; 0x02
    2bca:	89 83       	std	Y+1, r24	; 0x01
					LOC_U8Y--;
				}
			_delay_ms(50);
		}
		LOC_U8X=LOC_U8Len-1,LOC_U8Y=LOC_U8Len-1,LOC_U8Z=0;
		for(s8 LOC_U8i=15;LOC_U8i>=0;LOC_U8i--)
    2bcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bce:	81 50       	subi	r24, 0x01	; 1
    2bd0:	8b a7       	std	Y+43, r24	; 0x2b
    2bd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bd4:	88 23       	and	r24, r24
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <LCD_VidConpleteRotateLeft+0x440>
    2bd8:	43 cf       	rjmp	.-378    	; 0x2a60 <LCD_VidConpleteRotateLeft+0x2c6>
				}
				LOC_U8Y--;
			}
			_delay_ms(50);
		}
}
    2bda:	e2 96       	adiw	r28, 0x32	; 50
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <LCD_VidConpleteSinsuoidalRotate>:
 * Description : Display data in form of wave until it return to original position
 * Arguments   : Pointer to Array of data characters
 * return      : void
 */
void LCD_VidConpleteSinsuoidalRotate(u8* Copy_U8Data)
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	66 97       	sbiw	r28, 0x16	; 22
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	9e 8b       	std	Y+22, r25	; 0x16
    2c02:	8d 8b       	std	Y+21, r24	; 0x15
	u8 LOC_U8Len=0;
    2c04:	1c 8a       	std	Y+20, r1	; 0x14
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <LCD_VidConpleteSinsuoidalRotate+0x22>
	while(Copy_U8Data[LOC_U8Len]!='\0') /*Store length of string*/
	{
		LOC_U8Len++;
    2c08:	8c 89       	ldd	r24, Y+20	; 0x14
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	8c 8b       	std	Y+20, r24	; 0x14
 * return      : void
 */
void LCD_VidConpleteSinsuoidalRotate(u8* Copy_U8Data)
{
	u8 LOC_U8Len=0;
	while(Copy_U8Data[LOC_U8Len]!='\0') /*Store length of string*/
    2c0e:	8c 89       	ldd	r24, Y+20	; 0x14
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	8d 89       	ldd	r24, Y+21	; 0x15
    2c16:	9e 89       	ldd	r25, Y+22	; 0x16
    2c18:	fc 01       	movw	r30, r24
    2c1a:	e2 0f       	add	r30, r18
    2c1c:	f3 1f       	adc	r31, r19
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	91 f7       	brne	.-28     	; 0x2c08 <LCD_VidConpleteSinsuoidalRotate+0x1c>
	{
		LOC_U8Len++;
	}
	u8 LOC_U8Y=1,LOC_U8Z=0,LOC_U8C=0,LOC_U8X=0;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	8b 8b       	std	Y+19, r24	; 0x13
    2c28:	1a 8a       	std	Y+18, r1	; 0x12
    2c2a:	19 8a       	std	Y+17, r1	; 0x11
    2c2c:	18 8a       	std	Y+16, r1	; 0x10
	for(u8 LOC_U8i=0;LOC_U8i<16;LOC_U8i++)
    2c2e:	1f 86       	std	Y+15, r1	; 0x0f
    2c30:	c2 c0       	rjmp	.+388    	; 0x2db6 <LCD_VidConpleteSinsuoidalRotate+0x1ca>
	{
		LCD_VidClearData();
    2c32:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
		LCD_VidGoToLocation(LOC_U8X,LOC_U8i);  /* shift display(make wave form) */
    2c36:	88 89       	ldd	r24, Y+16	; 0x10
    2c38:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c3a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
		LCD_VidSendDatastring(Copy_U8Data);
    2c3e:	8d 89       	ldd	r24, Y+21	; 0x15
    2c40:	9e 89       	ldd	r25, Y+22	; 0x16
    2c42:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
		if(LOC_U8i>16-LOC_U8Len)/*to display remaining part of string in reverse line(not all word in same line)*/
    2c46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c48:	48 2f       	mov	r20, r24
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	80 e1       	ldi	r24, 0x10	; 16
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	82 1b       	sub	r24, r18
    2c58:	93 0b       	sbc	r25, r19
    2c5a:	84 17       	cp	r24, r20
    2c5c:	95 07       	cpc	r25, r21
    2c5e:	94 f5       	brge	.+100    	; 0x2cc4 <LCD_VidConpleteSinsuoidalRotate+0xd8>
		{
			TOGGLE_BIT(LOC_U8X,0);
    2c60:	98 89       	ldd	r25, Y+16	; 0x10
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	89 27       	eor	r24, r25
    2c66:	88 8b       	std	Y+16, r24	; 0x10
			LOC_U8Z=LOC_U8Y;
    2c68:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6a:	8a 8b       	std	Y+18, r24	; 0x12
			LOC_U8C=0;
    2c6c:	19 8a       	std	Y+17, r1	; 0x11
    2c6e:	20 c0       	rjmp	.+64     	; 0x2cb0 <LCD_VidConpleteSinsuoidalRotate+0xc4>
			while(LOC_U8Z)
			{
				LOC_U8Z--;
    2c70:	8a 89       	ldd	r24, Y+18	; 0x12
    2c72:	81 50       	subi	r24, 0x01	; 1
    2c74:	8a 8b       	std	Y+18, r24	; 0x12
				LCD_VidGoToLocation(LOC_U8X,LOC_U8C);
    2c76:	88 89       	ldd	r24, Y+16	; 0x10
    2c78:	69 89       	ldd	r22, Y+17	; 0x11
    2c7a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
				LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8Z]);
    2c7e:	8c 89       	ldd	r24, Y+20	; 0x14
    2c80:	88 2f       	mov	r24, r24
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9c 01       	movw	r18, r24
    2c86:	21 50       	subi	r18, 0x01	; 1
    2c88:	30 40       	sbci	r19, 0x00	; 0
    2c8a:	8a 89       	ldd	r24, Y+18	; 0x12
    2c8c:	88 2f       	mov	r24, r24
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a9 01       	movw	r20, r18
    2c92:	48 1b       	sub	r20, r24
    2c94:	59 0b       	sbc	r21, r25
    2c96:	ca 01       	movw	r24, r20
    2c98:	9c 01       	movw	r18, r24
    2c9a:	8d 89       	ldd	r24, Y+21	; 0x15
    2c9c:	9e 89       	ldd	r25, Y+22	; 0x16
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e2 0f       	add	r30, r18
    2ca2:	f3 1f       	adc	r31, r19
    2ca4:	80 81       	ld	r24, Z
    2ca6:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
				LOC_U8C++;
    2caa:	89 89       	ldd	r24, Y+17	; 0x11
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	89 8b       	std	Y+17, r24	; 0x11
		if(LOC_U8i>16-LOC_U8Len)/*to display remaining part of string in reverse line(not all word in same line)*/
		{
			TOGGLE_BIT(LOC_U8X,0);
			LOC_U8Z=LOC_U8Y;
			LOC_U8C=0;
			while(LOC_U8Z)
    2cb0:	8a 89       	ldd	r24, Y+18	; 0x12
    2cb2:	88 23       	and	r24, r24
    2cb4:	e9 f6       	brne	.-70     	; 0x2c70 <LCD_VidConpleteSinsuoidalRotate+0x84>
				LOC_U8Z--;
				LCD_VidGoToLocation(LOC_U8X,LOC_U8C);
				LCD_VidSendData(Copy_U8Data[LOC_U8Len-1-LOC_U8Z]);
				LOC_U8C++;
			}
			LOC_U8Y++;
    2cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb8:	8f 5f       	subi	r24, 0xFF	; 255
    2cba:	8b 8b       	std	Y+19, r24	; 0x13
			TOGGLE_BIT(LOC_U8X,0);
    2cbc:	98 89       	ldd	r25, Y+16	; 0x10
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	89 27       	eor	r24, r25
    2cc2:	88 8b       	std	Y+16, r24	; 0x10
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	a8 e4       	ldi	r26, 0x48	; 72
    2cca:	b2 e4       	ldi	r27, 0x42	; 66
    2ccc:	8b 87       	std	Y+11, r24	; 0x0b
    2cce:	9c 87       	std	Y+12, r25	; 0x0c
    2cd0:	ad 87       	std	Y+13, r26	; 0x0d
    2cd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	4a ef       	ldi	r20, 0xFA	; 250
    2ce2:	54 e4       	ldi	r21, 0x44	; 68
    2ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	8f 83       	std	Y+7, r24	; 0x07
    2cee:	98 87       	std	Y+8, r25	; 0x08
    2cf0:	a9 87       	std	Y+9, r26	; 0x09
    2cf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf6:	78 85       	ldd	r23, Y+8	; 0x08
    2cf8:	89 85       	ldd	r24, Y+9	; 0x09
    2cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	2c f4       	brge	.+10     	; 0x2d16 <LCD_VidConpleteSinsuoidalRotate+0x12a>
		__ticks = 1;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
    2d14:	3f c0       	rjmp	.+126    	; 0x2d94 <LCD_VidConpleteSinsuoidalRotate+0x1a8>
	else if (__tmp > 65535)
    2d16:	6f 81       	ldd	r22, Y+7	; 0x07
    2d18:	78 85       	ldd	r23, Y+8	; 0x08
    2d1a:	89 85       	ldd	r24, Y+9	; 0x09
    2d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	3f ef       	ldi	r19, 0xFF	; 255
    2d22:	4f e7       	ldi	r20, 0x7F	; 127
    2d24:	57 e4       	ldi	r21, 0x47	; 71
    2d26:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2d2a:	18 16       	cp	r1, r24
    2d2c:	4c f5       	brge	.+82     	; 0x2d80 <LCD_VidConpleteSinsuoidalRotate+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9e 83       	std	Y+6, r25	; 0x06
    2d54:	8d 83       	std	Y+5, r24	; 0x05
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <LCD_VidConpleteSinsuoidalRotate+0x18a>
    2d58:	88 ec       	ldi	r24, 0xC8	; 200
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9c 83       	std	Y+4, r25	; 0x04
    2d5e:	8b 83       	std	Y+3, r24	; 0x03
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <LCD_VidConpleteSinsuoidalRotate+0x178>
    2d68:	9c 83       	std	Y+4, r25	; 0x04
    2d6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	9e 83       	std	Y+6, r25	; 0x06
    2d74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	69 f7       	brne	.-38     	; 0x2d58 <LCD_VidConpleteSinsuoidalRotate+0x16c>
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <LCD_VidConpleteSinsuoidalRotate+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d80:	6f 81       	ldd	r22, Y+7	; 0x07
    2d82:	78 85       	ldd	r23, Y+8	; 0x08
    2d84:	89 85       	ldd	r24, Y+9	; 0x09
    2d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9e 83       	std	Y+6, r25	; 0x06
    2d92:	8d 83       	std	Y+5, r24	; 0x05
    2d94:	8d 81       	ldd	r24, Y+5	; 0x05
    2d96:	9e 81       	ldd	r25, Y+6	; 0x06
    2d98:	9a 83       	std	Y+2, r25	; 0x02
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <LCD_VidConpleteSinsuoidalRotate+0x1b4>
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(50);
		TOGGLE_BIT(LOC_U8X,0);
    2da8:	98 89       	ldd	r25, Y+16	; 0x10
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	89 27       	eor	r24, r25
    2dae:	88 8b       	std	Y+16, r24	; 0x10
	while(Copy_U8Data[LOC_U8Len]!='\0') /*Store length of string*/
	{
		LOC_U8Len++;
	}
	u8 LOC_U8Y=1,LOC_U8Z=0,LOC_U8C=0,LOC_U8X=0;
	for(u8 LOC_U8i=0;LOC_U8i<16;LOC_U8i++)
    2db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db2:	8f 5f       	subi	r24, 0xFF	; 255
    2db4:	8f 87       	std	Y+15, r24	; 0x0f
    2db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db8:	80 31       	cpi	r24, 0x10	; 16
    2dba:	08 f4       	brcc	.+2      	; 0x2dbe <LCD_VidConpleteSinsuoidalRotate+0x1d2>
    2dbc:	3a cf       	rjmp	.-396    	; 0x2c32 <LCD_VidConpleteSinsuoidalRotate+0x46>
			TOGGLE_BIT(LOC_U8X,0);
		}
		_delay_ms(50);
		TOGGLE_BIT(LOC_U8X,0);
	}
}
    2dbe:	66 96       	adiw	r28, 0x16	; 22
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <main>:
void welcome(void);
u8 IsNum(u8 Copy_U8X);
u8 IsOperand(u8 Copy_U8X);

void main (void)
{
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	c5 56       	subi	r28, 0x65	; 101
    2de6:	d1 40       	sbci	r29, 0x01	; 1
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInitialize();
    2df2:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_VidInitialize>
	KEYPAD_vidInitialize(KPD_PORT);
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	0e 94 45 0b 	call	0x168a	; 0x168a <KEYPAD_vidInitialize>
	welcome();
    2dfc:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <welcome>
	u8 LOC_U8Inp=0,LOC_U8Y=0, LOC_U8X=0, LOC_U8End=0, LOC_U8P=0,LOC_U8Com=0;
    2e00:	fe 01       	movw	r30, r28
    2e02:	ee 58       	subi	r30, 0x8E	; 142
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	10 82       	st	Z, r1
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ef 58       	subi	r30, 0x8F	; 143
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	10 82       	st	Z, r1
    2e10:	fe 01       	movw	r30, r28
    2e12:	e0 59       	subi	r30, 0x90	; 144
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	10 82       	st	Z, r1
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e1 59       	subi	r30, 0x91	; 145
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	10 82       	st	Z, r1
    2e20:	fe 01       	movw	r30, r28
    2e22:	e2 59       	subi	r30, 0x92	; 146
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	10 82       	st	Z, r1
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e3 59       	subi	r30, 0x93	; 147
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	10 82       	st	Z, r1
	u8 LOC_U8NumFlag=0,LOC_U8EqualFlag=0,LOC_U8OperandFlag=0;
    2e30:	fe 01       	movw	r30, r28
    2e32:	e4 59       	subi	r30, 0x94	; 148
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	10 82       	st	Z, r1
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 59       	subi	r30, 0x95	; 149
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	10 82       	st	Z, r1
    2e40:	fe 01       	movw	r30, r28
    2e42:	e6 59       	subi	r30, 0x96	; 150
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	10 82       	st	Z, r1
	u8 LOC_U8ClearFlag=0,LOC_U8ResetFlag=0,LOC_U8CalcFlag=0;
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e7 59       	subi	r30, 0x97	; 151
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	10 82       	st	Z, r1
    2e50:	fe 01       	movw	r30, r28
    2e52:	e8 59       	subi	r30, 0x98	; 152
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	10 82       	st	Z, r1
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e9 59       	subi	r30, 0x99	; 153
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	10 82       	st	Z, r1
	f32 LOC_F32Res=0;
    2e60:	fe 01       	movw	r30, r28
    2e62:	ed 59       	subi	r30, 0x9D	; 157
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	80 83       	st	Z, r24
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	a2 83       	std	Z+2, r26	; 0x02
    2e74:	b3 83       	std	Z+3, r27	; 0x03
	f32 LOC_F32Equation[30]={0};
    2e76:	ce 01       	movw	r24, r28
    2e78:	8d 58       	subi	r24, 0x8D	; 141
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	28 e7       	ldi	r18, 0x78	; 120
    2e7e:	fc 01       	movw	r30, r24
    2e80:	df 01       	movw	r26, r30
    2e82:	82 2f       	mov	r24, r18
    2e84:	1d 92       	st	X+, r1
    2e86:	8a 95       	dec	r24
    2e88:	e9 f7       	brne	.-6      	; 0x2e84 <main+0xb4>
	f32 LOC_F32Inputs[30]={0};
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	85 51       	subi	r24, 0x15	; 21
    2e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e90:	28 e7       	ldi	r18, 0x78	; 120
    2e92:	fc 01       	movw	r30, r24
    2e94:	df 01       	movw	r26, r30
    2e96:	82 2f       	mov	r24, r18
    2e98:	1d 92       	st	X+, r1
    2e9a:	8a 95       	dec	r24
    2e9c:	e9 f7       	brne	.-6      	; 0x2e98 <main+0xc8>
	u8 LOC_U8Z=0,LOC_U8Count=0,LOC_U8NegNO=0;
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	ee 59       	subi	r30, 0x9E	; 158
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	10 82       	st	Z, r1
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 59       	subi	r30, 0x9F	; 159
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	10 82       	st	Z, r1
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e0 5a       	subi	r30, 0xA0	; 160
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	10 82       	st	Z, r1
	while(1)
	{
/**********************************************RESET*****************************************************/
		if(LOC_U8ResetFlag==1)
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e8 59       	subi	r30, 0x98	; 152
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <main+0xf4>
    2ec2:	71 c0       	rjmp	.+226    	; 0x2fa6 <main+0x1d6>
		{
			/* Reset all values (return to 0)*/
    		for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8Z;LOC_U8i++)
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e1 5a       	subi	r30, 0xA1	; 161
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	10 82       	st	Z, r1
    2ecc:	39 c0       	rjmp	.+114    	; 0x2f40 <main+0x170>
    		{
     			LOC_F32Inputs[LOC_U8i]=0;
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e1 5a       	subi	r30, 0xA1	; 161
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9e 01       	movw	r18, r28
    2edc:	25 51       	subi	r18, 0x15	; 21
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	88 0f       	add	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	f9 01       	movw	r30, r18
    2eea:	e8 0f       	add	r30, r24
    2eec:	f9 1f       	adc	r31, r25
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	a0 e0       	ldi	r26, 0x00	; 0
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	80 83       	st	Z, r24
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	a2 83       	std	Z+2, r26	; 0x02
    2efc:	b3 83       	std	Z+3, r27	; 0x03
     			LOC_F32Equation[LOC_U8i]=0;
    2efe:	fe 01       	movw	r30, r28
    2f00:	e1 5a       	subi	r30, 0xA1	; 161
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 81       	ld	r24, Z
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9e 01       	movw	r18, r28
    2f0c:	2d 58       	subi	r18, 0x8D	; 141
    2f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	f9 01       	movw	r30, r18
    2f1a:	e8 0f       	add	r30, r24
    2f1c:	f9 1f       	adc	r31, r25
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a0 e0       	ldi	r26, 0x00	; 0
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	80 83       	st	Z, r24
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	a2 83       	std	Z+2, r26	; 0x02
    2f2c:	b3 83       	std	Z+3, r27	; 0x03
	{
/**********************************************RESET*****************************************************/
		if(LOC_U8ResetFlag==1)
		{
			/* Reset all values (return to 0)*/
    		for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8Z;LOC_U8i++)
    2f2e:	de 01       	movw	r26, r28
    2f30:	a1 5a       	subi	r26, 0xA1	; 161
    2f32:	bf 4f       	sbci	r27, 0xFF	; 255
    2f34:	fe 01       	movw	r30, r28
    2f36:	e1 5a       	subi	r30, 0xA1	; 161
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	8c 93       	st	X, r24
    2f40:	fe 01       	movw	r30, r28
    2f42:	e1 5a       	subi	r30, 0xA1	; 161
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	de 01       	movw	r26, r28
    2f48:	ae 59       	subi	r26, 0x9E	; 158
    2f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4c:	90 81       	ld	r25, Z
    2f4e:	8c 91       	ld	r24, X
    2f50:	89 17       	cp	r24, r25
    2f52:	08 f0       	brcs	.+2      	; 0x2f56 <main+0x186>
    2f54:	bc cf       	rjmp	.-136    	; 0x2ece <main+0xfe>
    		{
     			LOC_F32Inputs[LOC_U8i]=0;
     			LOC_F32Equation[LOC_U8i]=0;
		  	}
    		LOC_U8Z=0,LOC_U8Count=0,LOC_U8Com=0, LOC_U8P=0;
    2f56:	fe 01       	movw	r30, r28
    2f58:	ee 59       	subi	r30, 0x9E	; 158
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	10 82       	st	Z, r1
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ef 59       	subi	r30, 0x9F	; 159
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	10 82       	st	Z, r1
    2f66:	fe 01       	movw	r30, r28
    2f68:	e3 59       	subi	r30, 0x93	; 147
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	10 82       	st	Z, r1
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e2 59       	subi	r30, 0x92	; 146
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	10 82       	st	Z, r1
    		LOC_U8NumFlag=0,LOC_U8EqualFlag=0,LOC_U8OperandFlag=0;
    2f76:	fe 01       	movw	r30, r28
    2f78:	e4 59       	subi	r30, 0x94	; 148
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	10 82       	st	Z, r1
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e5 59       	subi	r30, 0x95	; 149
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	10 82       	st	Z, r1
    2f86:	fe 01       	movw	r30, r28
    2f88:	e6 59       	subi	r30, 0x96	; 150
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	10 82       	st	Z, r1
    		LOC_U8ClearFlag=0,LOC_U8ResetFlag=0,LOC_U8CalcFlag=0;
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e7 59       	subi	r30, 0x97	; 151
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	10 82       	st	Z, r1
    2f96:	fe 01       	movw	r30, r28
    2f98:	e8 59       	subi	r30, 0x98	; 152
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	10 82       	st	Z, r1
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e9 59       	subi	r30, 0x99	; 153
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	10 82       	st	Z, r1
		}
		/* Get value or order entered by user as input*/
		LOC_U8Inp=KEYPAD_U8GetPressedKey(KPD_PORT);
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <KEYPAD_U8GetPressedKey>
    2fac:	fe 01       	movw	r30, r28
    2fae:	ee 58       	subi	r30, 0x8E	; 142
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 83       	st	Z, r24
		if(LOC_U8Inp ==127){continue;} /*means no input by user*/
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ee 58       	subi	r30, 0x8E	; 142
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 81       	ld	r24, Z
    2fbc:	8f 37       	cpi	r24, 0x7F	; 127
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <main+0x1f2>
    2fc0:	7a cf       	rjmp	.-268    	; 0x2eb6 <main+0xe6>
/***************************************INPUT NUMBER****************************************************/
		if(IsNum(LOC_U8Inp))
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	ee 58       	subi	r30, 0x8E	; 142
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	0e 94 94 25 	call	0x4b28	; 0x4b28 <IsNum>
    2fce:	88 23       	and	r24, r24
    2fd0:	31 f0       	breq	.+12     	; 0x2fde <main+0x20e>
		{
			/* if input is number ,number flag opens*/
			LOC_U8NumFlag=1;
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e4 59       	subi	r30, 0x94	; 148
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	80 83       	st	Z, r24
    2fdc:	25 c0       	rjmp	.+74     	; 0x3028 <main+0x258>
		}
/***************************************INPUT OPERAND***************************************************/
		else if(IsOperand(LOC_U8Inp))
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ee 58       	subi	r30, 0x8E	; 142
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    2fea:	88 23       	and	r24, r24
    2fec:	31 f0       	breq	.+12     	; 0x2ffa <main+0x22a>
		{
			/* if input is operand ,operand flag opens*/
			LOC_U8OperandFlag=1;
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e6 59       	subi	r30, 0x96	; 150
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	80 83       	st	Z, r24
    2ff8:	17 c0       	rjmp	.+46     	; 0x3028 <main+0x258>
		}
/***************************************INPUT CLEAR*****************************************************/
		else if(LOC_U8Inp==' ')
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ee 58       	subi	r30, 0x8E	; 142
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 81       	ld	r24, Z
    3002:	80 32       	cpi	r24, 0x20	; 32
    3004:	31 f4       	brne	.+12     	; 0x3012 <main+0x242>
		{
			/* if input order is clear ,clear flag opens*/
			LOC_U8ClearFlag=1;
    3006:	fe 01       	movw	r30, r28
    3008:	e7 59       	subi	r30, 0x97	; 151
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	80 83       	st	Z, r24
    3010:	0b c0       	rjmp	.+22     	; 0x3028 <main+0x258>
		}
/***************************************INPUT EQUAL*****************************************************/
		else if(LOC_U8Inp=='=')
    3012:	fe 01       	movw	r30, r28
    3014:	ee 58       	subi	r30, 0x8E	; 142
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 81       	ld	r24, Z
    301a:	8d 33       	cpi	r24, 0x3D	; 61
    301c:	29 f4       	brne	.+10     	; 0x3028 <main+0x258>
		{
			/* if input order is equal ,equal flag opens*/
			LOC_U8EqualFlag=1;
    301e:	fe 01       	movw	r30, r28
    3020:	e5 59       	subi	r30, 0x95	; 149
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	80 83       	st	Z, r24
		}
/************************************** TESTCASE *******************************************************/
		if(LOC_U8NumFlag==1 && LOC_U8EqualFlag==1)
    3028:	fe 01       	movw	r30, r28
    302a:	e4 59       	subi	r30, 0x94	; 148
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	81 30       	cpi	r24, 0x01	; 1
    3032:	59 f4       	brne	.+22     	; 0x304a <main+0x27a>
    3034:	fe 01       	movw	r30, r28
    3036:	e5 59       	subi	r30, 0x95	; 149
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	29 f4       	brne	.+10     	; 0x304a <main+0x27a>
		{
			/*When result on LCD,and user enter number-> Don't do anything */
			LOC_U8NumFlag=0;
    3040:	fe 01       	movw	r30, r28
    3042:	e4 59       	subi	r30, 0x94	; 148
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	10 82       	st	Z, r1
    3048:	36 cf       	rjmp	.-404    	; 0x2eb6 <main+0xe6>
			continue;
		}
/***************************************FLAG NUMBER*****************************************************/
		else if(LOC_U8NumFlag==1 )
    304a:	fe 01       	movw	r30, r28
    304c:	e4 59       	subi	r30, 0x94	; 148
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 81       	ld	r24, Z
    3052:	81 30       	cpi	r24, 0x01	; 1
    3054:	09 f0       	breq	.+2      	; 0x3058 <main+0x288>
    3056:	41 c0       	rjmp	.+130    	; 0x30da <main+0x30a>
		{
			/*if number flag opened,display this number on LCD and
			 store it in array of inputs by its ASCII value */
			LOC_U8NumFlag=0;
    3058:	fe 01       	movw	r30, r28
    305a:	e4 59       	subi	r30, 0x94	; 148
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	10 82       	st	Z, r1
			LCD_VidSendData(LOC_U8Inp);
    3060:	fe 01       	movw	r30, r28
    3062:	ee 58       	subi	r30, 0x8E	; 142
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
			LOC_U8Count++;
    306c:	de 01       	movw	r26, r28
    306e:	af 59       	subi	r26, 0x9F	; 159
    3070:	bf 4f       	sbci	r27, 0xFF	; 255
    3072:	fe 01       	movw	r30, r28
    3074:	ef 59       	subi	r30, 0x9F	; 159
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	8f 5f       	subi	r24, 0xFF	; 255
    307c:	8c 93       	st	X, r24
			LOC_F32Inputs[LOC_U8Z++]=LOC_U8Inp;
    307e:	fe 01       	movw	r30, r28
    3080:	ee 59       	subi	r30, 0x9E	; 158
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	08 2f       	mov	r16, r24
    3088:	10 e0       	ldi	r17, 0x00	; 0
    308a:	fe 01       	movw	r30, r28
    308c:	ee 58       	subi	r30, 0x8E	; 142
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 81       	ld	r24, Z
    3092:	88 2f       	mov	r24, r24
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	a0 e0       	ldi	r26, 0x00	; 0
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    30a2:	9b 01       	movw	r18, r22
    30a4:	ac 01       	movw	r20, r24
    30a6:	be 01       	movw	r22, r28
    30a8:	65 51       	subi	r22, 0x15	; 21
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	c8 01       	movw	r24, r16
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	fb 01       	movw	r30, r22
    30b8:	e8 0f       	add	r30, r24
    30ba:	f9 1f       	adc	r31, r25
    30bc:	20 83       	st	Z, r18
    30be:	31 83       	std	Z+1, r19	; 0x01
    30c0:	42 83       	std	Z+2, r20	; 0x02
    30c2:	53 83       	std	Z+3, r21	; 0x03
    30c4:	de 01       	movw	r26, r28
    30c6:	ae 59       	subi	r26, 0x9E	; 158
    30c8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	ee 59       	subi	r30, 0x9E	; 158
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	8c 93       	st	X, r24
    30d6:	0c 94 04 20 	jmp	0x4008	; 0x4008 <main+0x1238>
		}
/***************************************FLAG CLEAR AFTER RESULT****************************************/
		else if(LOC_U8EqualFlag==1 && LOC_U8ClearFlag==1)
    30da:	fe 01       	movw	r30, r28
    30dc:	e5 59       	subi	r30, 0x95	; 149
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	81 f4       	brne	.+32     	; 0x3106 <main+0x336>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e7 59       	subi	r30, 0x97	; 151
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	81 30       	cpi	r24, 0x01	; 1
    30f0:	51 f4       	brne	.+20     	; 0x3106 <main+0x336>
		{
			/*if User enter Clear order after display result,
			 reset all values and clear screen */
    		LOC_U8ResetFlag=1;
    30f2:	fe 01       	movw	r30, r28
    30f4:	e8 59       	subi	r30, 0x98	; 152
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 83       	st	Z, r24
    		LCD_VidClearData();
    30fc:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
    		LCD_VidSetDataLocation();
    3100:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
    3104:	81 c7       	rjmp	.+3842   	; 0x4008 <main+0x1238>
		}
/***************************************FLAG OPERAND AFTER RESULT***************************************/
		else if(LOC_U8EqualFlag==1 && LOC_U8OperandFlag==1)
    3106:	fe 01       	movw	r30, r28
    3108:	e5 59       	subi	r30, 0x95	; 149
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	09 f0       	breq	.+2      	; 0x3114 <main+0x344>
    3112:	26 c1       	rjmp	.+588    	; 0x3360 <main+0x590>
    3114:	fe 01       	movw	r30, r28
    3116:	e6 59       	subi	r30, 0x96	; 150
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	09 f0       	breq	.+2      	; 0x3122 <main+0x352>
    3120:	1f c1       	rjmp	.+574    	; 0x3360 <main+0x590>
		{
			/*if User enter operand after display result(complete operations by using result),
			 clear screen,display result and operand entered by user
			 reset values except array of equation(result stored in it)  */
    		LOC_U8EqualFlag=0;      /*begin new operation*/
    3122:	fe 01       	movw	r30, r28
    3124:	e5 59       	subi	r30, 0x95	; 149
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	10 82       	st	Z, r1
    		LOC_U8OperandFlag=0;
    312a:	fe 01       	movw	r30, r28
    312c:	e6 59       	subi	r30, 0x96	; 150
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	10 82       	st	Z, r1
    		LCD_VidClearData();
    3132:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
    		LCD_VidSetDataLocation();
    3136:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
    		LCD_VidSendDataFloat(LOC_F32Res);  /*display last result*/
    313a:	fe 01       	movw	r30, r28
    313c:	ed 59       	subi	r30, 0x9D	; 157
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	a2 81       	ldd	r26, Z+2	; 0x02
    3146:	b3 81       	ldd	r27, Z+3	; 0x03
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_VidSendDataFloat>
    		LCD_VidSendData(LOC_U8Inp);        /*display operand entered by user*/
    3150:	fe 01       	movw	r30, r28
    3152:	ee 58       	subi	r30, 0x8E	; 142
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 81       	ld	r24, Z
    3158:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
    		for(u8 LOC_U8i=0;LOC_U8i<LOC_U8Z;LOC_U8i++)
    315c:	fe 01       	movw	r30, r28
    315e:	e2 5a       	subi	r30, 0xA2	; 162
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	10 82       	st	Z, r1
    3164:	39 c0       	rjmp	.+114    	; 0x31d8 <main+0x408>
    		{
     			LOC_F32Inputs[LOC_U8i]=0;
    3166:	fe 01       	movw	r30, r28
    3168:	e2 5a       	subi	r30, 0xA2	; 162
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9e 01       	movw	r18, r28
    3174:	25 51       	subi	r18, 0x15	; 21
    3176:	3f 4f       	sbci	r19, 0xFF	; 255
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	f9 01       	movw	r30, r18
    3182:	e8 0f       	add	r30, r24
    3184:	f9 1f       	adc	r31, r25
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 e0       	ldi	r26, 0x00	; 0
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	80 83       	st	Z, r24
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	a2 83       	std	Z+2, r26	; 0x02
    3194:	b3 83       	std	Z+3, r27	; 0x03
     			LOC_F32Equation[LOC_U8i]=0;
    3196:	fe 01       	movw	r30, r28
    3198:	e2 5a       	subi	r30, 0xA2	; 162
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 81       	ld	r24, Z
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	9e 01       	movw	r18, r28
    31a4:	2d 58       	subi	r18, 0x8D	; 141
    31a6:	3f 4f       	sbci	r19, 0xFF	; 255
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	f9 01       	movw	r30, r18
    31b2:	e8 0f       	add	r30, r24
    31b4:	f9 1f       	adc	r31, r25
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a0 e0       	ldi	r26, 0x00	; 0
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	80 83       	st	Z, r24
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	a2 83       	std	Z+2, r26	; 0x02
    31c4:	b3 83       	std	Z+3, r27	; 0x03
    		LOC_U8OperandFlag=0;
    		LCD_VidClearData();
    		LCD_VidSetDataLocation();
    		LCD_VidSendDataFloat(LOC_F32Res);  /*display last result*/
    		LCD_VidSendData(LOC_U8Inp);        /*display operand entered by user*/
    		for(u8 LOC_U8i=0;LOC_U8i<LOC_U8Z;LOC_U8i++)
    31c6:	de 01       	movw	r26, r28
    31c8:	a2 5a       	subi	r26, 0xA2	; 162
    31ca:	bf 4f       	sbci	r27, 0xFF	; 255
    31cc:	fe 01       	movw	r30, r28
    31ce:	e2 5a       	subi	r30, 0xA2	; 162
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	8c 93       	st	X, r24
    31d8:	fe 01       	movw	r30, r28
    31da:	e2 5a       	subi	r30, 0xA2	; 162
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	de 01       	movw	r26, r28
    31e0:	ae 59       	subi	r26, 0x9E	; 158
    31e2:	bf 4f       	sbci	r27, 0xFF	; 255
    31e4:	90 81       	ld	r25, Z
    31e6:	8c 91       	ld	r24, X
    31e8:	98 17       	cp	r25, r24
    31ea:	08 f4       	brcc	.+2      	; 0x31ee <main+0x41e>
    31ec:	bc cf       	rjmp	.-136    	; 0x3166 <main+0x396>
    		{
     			LOC_F32Inputs[LOC_U8i]=0;
     			LOC_F32Equation[LOC_U8i]=0;
		  	}
    		LOC_F32Equation[0]=LOC_F32Res;
    31ee:	9e 01       	movw	r18, r28
    31f0:	2d 58       	subi	r18, 0x8D	; 141
    31f2:	3f 4f       	sbci	r19, 0xFF	; 255
    31f4:	fe 01       	movw	r30, r28
    31f6:	ed 59       	subi	r30, 0x9D	; 157
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	a2 81       	ldd	r26, Z+2	; 0x02
    3200:	b3 81       	ldd	r27, Z+3	; 0x03
    3202:	f9 01       	movw	r30, r18
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
    		/*Calculate count to know number of elements on LCD  */
    		LOC_U8Count=1;
    320c:	fe 01       	movw	r30, r28
    320e:	ef 59       	subi	r30, 0x9F	; 159
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	80 83       	st	Z, r24
    		if(LOC_F32Res<0.0)
    3216:	fe 01       	movw	r30, r28
    3218:	ed 59       	subi	r30, 0x9D	; 157
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	60 81       	ld	r22, Z
    321e:	71 81       	ldd	r23, Z+1	; 0x01
    3220:	82 81       	ldd	r24, Z+2	; 0x02
    3222:	93 81       	ldd	r25, Z+3	; 0x03
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	50 e0       	ldi	r21, 0x00	; 0
    322c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3230:	88 23       	and	r24, r24
    3232:	4c f4       	brge	.+18     	; 0x3246 <main+0x476>
    			LOC_U8Count++;
    3234:	de 01       	movw	r26, r28
    3236:	af 59       	subi	r26, 0x9F	; 159
    3238:	bf 4f       	sbci	r27, 0xFF	; 255
    323a:	fe 01       	movw	r30, r28
    323c:	ef 59       	subi	r30, 0x9F	; 159
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	8f 5f       	subi	r24, 0xFF	; 255
    3244:	8c 93       	st	X, r24
    		if(LOC_F32Res!=(s32)LOC_F32Res)
    3246:	fe 01       	movw	r30, r28
    3248:	ed 59       	subi	r30, 0x9D	; 157
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	fe 01       	movw	r30, r28
    326a:	ed 59       	subi	r30, 0x9D	; 157
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	20 81       	ld	r18, Z
    3274:	31 81       	ldd	r19, Z+1	; 0x01
    3276:	42 81       	ldd	r20, Z+2	; 0x02
    3278:	53 81       	ldd	r21, Z+3	; 0x03
    327a:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    327e:	88 23       	and	r24, r24
    3280:	51 f1       	breq	.+84     	; 0x32d6 <main+0x506>
    		{
    			LOC_U8Count+=4;
    3282:	de 01       	movw	r26, r28
    3284:	af 59       	subi	r26, 0x9F	; 159
    3286:	bf 4f       	sbci	r27, 0xFF	; 255
    3288:	fe 01       	movw	r30, r28
    328a:	ef 59       	subi	r30, 0x9F	; 159
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
    3290:	8c 5f       	subi	r24, 0xFC	; 252
    3292:	8c 93       	st	X, r24
    3294:	20 c0       	rjmp	.+64     	; 0x32d6 <main+0x506>
    		}
    		while((u32)LOC_F32Res !=0)
    		{
    			LOC_F32Res/=10;
    3296:	8e 01       	movw	r16, r28
    3298:	0d 59       	subi	r16, 0x9D	; 157
    329a:	1f 4f       	sbci	r17, 0xFF	; 255
    329c:	fe 01       	movw	r30, r28
    329e:	ed 59       	subi	r30, 0x9D	; 157
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e2       	ldi	r20, 0x20	; 32
    32b0:	51 e4       	ldi	r21, 0x41	; 65
    32b2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	f8 01       	movw	r30, r16
    32bc:	80 83       	st	Z, r24
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	a2 83       	std	Z+2, r26	; 0x02
    32c2:	b3 83       	std	Z+3, r27	; 0x03
    			LOC_U8Count++;
    32c4:	de 01       	movw	r26, r28
    32c6:	af 59       	subi	r26, 0x9F	; 159
    32c8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ca:	fe 01       	movw	r30, r28
    32cc:	ef 59       	subi	r30, 0x9F	; 159
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	8f 5f       	subi	r24, 0xFF	; 255
    32d4:	8c 93       	st	X, r24
    			LOC_U8Count++;
    		if(LOC_F32Res!=(s32)LOC_F32Res)
    		{
    			LOC_U8Count+=4;
    		}
    		while((u32)LOC_F32Res !=0)
    32d6:	fe 01       	movw	r30, r28
    32d8:	ed 59       	subi	r30, 0x9D	; 157
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	a1 05       	cpc	r26, r1
    32f0:	b1 05       	cpc	r27, r1
    32f2:	89 f6       	brne	.-94     	; 0x3296 <main+0x4c6>
    		{
    			LOC_F32Res/=10;
    			LOC_U8Count++;
    		}
    		LOC_U8Com=1;   /*complete operation by last result  */
    32f4:	fe 01       	movw	r30, r28
    32f6:	e3 59       	subi	r30, 0x93	; 147
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	80 83       	st	Z, r24
    		LOC_U8Z=0;
    32fe:	fe 01       	movw	r30, r28
    3300:	ee 59       	subi	r30, 0x9E	; 158
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	10 82       	st	Z, r1
    		LOC_F32Inputs[LOC_U8Z++]=LOC_U8Inp;
    3306:	fe 01       	movw	r30, r28
    3308:	ee 59       	subi	r30, 0x9E	; 158
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	08 2f       	mov	r16, r24
    3310:	10 e0       	ldi	r17, 0x00	; 0
    3312:	fe 01       	movw	r30, r28
    3314:	ee 58       	subi	r30, 0x8E	; 142
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 81       	ld	r24, Z
    331a:	88 2f       	mov	r24, r24
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a0 e0       	ldi	r26, 0x00	; 0
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    332a:	9b 01       	movw	r18, r22
    332c:	ac 01       	movw	r20, r24
    332e:	be 01       	movw	r22, r28
    3330:	65 51       	subi	r22, 0x15	; 21
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	c8 01       	movw	r24, r16
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	88 0f       	add	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	fb 01       	movw	r30, r22
    3340:	e8 0f       	add	r30, r24
    3342:	f9 1f       	adc	r31, r25
    3344:	20 83       	st	Z, r18
    3346:	31 83       	std	Z+1, r19	; 0x01
    3348:	42 83       	std	Z+2, r20	; 0x02
    334a:	53 83       	std	Z+3, r21	; 0x03
    334c:	de 01       	movw	r26, r28
    334e:	ae 59       	subi	r26, 0x9E	; 158
    3350:	bf 4f       	sbci	r27, 0xFF	; 255
    3352:	fe 01       	movw	r30, r28
    3354:	ee 59       	subi	r30, 0x9E	; 158
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	80 81       	ld	r24, Z
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	8c 93       	st	X, r24
    335e:	54 c6       	rjmp	.+3240   	; 0x4008 <main+0x1238>
		}
/***************************************FLAG OPERAND ***********************************************/
		else if(LOC_U8OperandFlag==1)
    3360:	fe 01       	movw	r30, r28
    3362:	e6 59       	subi	r30, 0x96	; 150
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	09 f0       	breq	.+2      	; 0x336e <main+0x59e>
    336c:	40 c0       	rjmp	.+128    	; 0x33ee <main+0x61e>
		{
			/*if operand flag opened,display this operand on LCD and
			 store it in array of inputs by its ASCII value */
			LOC_U8OperandFlag=0;
    336e:	fe 01       	movw	r30, r28
    3370:	e6 59       	subi	r30, 0x96	; 150
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	10 82       	st	Z, r1
			LCD_VidSendData(LOC_U8Inp);
    3376:	fe 01       	movw	r30, r28
    3378:	ee 58       	subi	r30, 0x8E	; 142
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	80 81       	ld	r24, Z
    337e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
			LOC_U8Count++;
    3382:	de 01       	movw	r26, r28
    3384:	af 59       	subi	r26, 0x9F	; 159
    3386:	bf 4f       	sbci	r27, 0xFF	; 255
    3388:	fe 01       	movw	r30, r28
    338a:	ef 59       	subi	r30, 0x9F	; 159
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	8f 5f       	subi	r24, 0xFF	; 255
    3392:	8c 93       	st	X, r24
			LOC_F32Inputs[LOC_U8Z++]=LOC_U8Inp;
    3394:	fe 01       	movw	r30, r28
    3396:	ee 59       	subi	r30, 0x9E	; 158
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	80 81       	ld	r24, Z
    339c:	08 2f       	mov	r16, r24
    339e:	10 e0       	ldi	r17, 0x00	; 0
    33a0:	fe 01       	movw	r30, r28
    33a2:	ee 58       	subi	r30, 0x8E	; 142
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	a0 e0       	ldi	r26, 0x00	; 0
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    33b8:	9b 01       	movw	r18, r22
    33ba:	ac 01       	movw	r20, r24
    33bc:	be 01       	movw	r22, r28
    33be:	65 51       	subi	r22, 0x15	; 21
    33c0:	7f 4f       	sbci	r23, 0xFF	; 255
    33c2:	c8 01       	movw	r24, r16
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	fb 01       	movw	r30, r22
    33ce:	e8 0f       	add	r30, r24
    33d0:	f9 1f       	adc	r31, r25
    33d2:	20 83       	st	Z, r18
    33d4:	31 83       	std	Z+1, r19	; 0x01
    33d6:	42 83       	std	Z+2, r20	; 0x02
    33d8:	53 83       	std	Z+3, r21	; 0x03
    33da:	de 01       	movw	r26, r28
    33dc:	ae 59       	subi	r26, 0x9E	; 158
    33de:	bf 4f       	sbci	r27, 0xFF	; 255
    33e0:	fe 01       	movw	r30, r28
    33e2:	ee 59       	subi	r30, 0x9E	; 158
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	8f 5f       	subi	r24, 0xFF	; 255
    33ea:	8c 93       	st	X, r24
    33ec:	0d c6       	rjmp	.+3098   	; 0x4008 <main+0x1238>
		}
/***************************************FLAG CLEAR *************************************************/
		else if(LOC_U8ClearFlag==1)
    33ee:	fe 01       	movw	r30, r28
    33f0:	e7 59       	subi	r30, 0x97	; 151
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	09 f0       	breq	.+2      	; 0x33fc <main+0x62c>
    33fa:	5c c0       	rjmp	.+184    	; 0x34b4 <main+0x6e4>
		{
			/*if User enter Clear order before display result,
			 Clear last element in array of inputs and on screen*/
			LOC_U8ClearFlag=0;
    33fc:	fe 01       	movw	r30, r28
    33fe:	e7 59       	subi	r30, 0x97	; 151
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	10 82       	st	Z, r1
			if(LOC_U8Count==16)
    3404:	fe 01       	movw	r30, r28
    3406:	ef 59       	subi	r30, 0x9F	; 159
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 81       	ld	r24, Z
    340c:	80 31       	cpi	r24, 0x10	; 16
    340e:	21 f4       	brne	.+8      	; 0x3418 <main+0x648>
				LCD_VidGoToLocation(0,16);
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	60 e1       	ldi	r22, 0x10	; 16
    3414:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
			if(LOC_U8Z==0 && LOC_U8Com==1)
    3418:	fe 01       	movw	r30, r28
    341a:	ee 59       	subi	r30, 0x9E	; 158
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	88 23       	and	r24, r24
    3422:	79 f4       	brne	.+30     	; 0x3442 <main+0x672>
    3424:	fe 01       	movw	r30, r28
    3426:	e3 59       	subi	r30, 0x93	; 147
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	81 30       	cpi	r24, 0x01	; 1
    342e:	49 f4       	brne	.+18     	; 0x3442 <main+0x672>
			{
				/*if User enter Clear order (case on screen result of previous operation only ),
				 Clear this result and reset all values */
				LOC_U8ResetFlag=1;
    3430:	fe 01       	movw	r30, r28
    3432:	e8 59       	subi	r30, 0x98	; 152
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	80 83       	st	Z, r24
				LCD_VidClearData();
    343a:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
				LCD_VidSetDataLocation();
    343e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
			}
			if(LOC_U8Z==0)
    3442:	fe 01       	movw	r30, r28
    3444:	ee 59       	subi	r30, 0x9E	; 158
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	88 23       	and	r24, r24
    344c:	09 f4       	brne	.+2      	; 0x3450 <main+0x680>
    344e:	33 cd       	rjmp	.-1434   	; 0x2eb6 <main+0xe6>
				continue;
			/*shift cursor left then clear*/
			LCD_VidCursorShiftLeft();
    3450:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_VidCursorShiftLeft>
			LCD_VidSendData(' ');
    3454:	80 e2       	ldi	r24, 0x20	; 32
    3456:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
			LOC_U8Z--;
    345a:	de 01       	movw	r26, r28
    345c:	ae 59       	subi	r26, 0x9E	; 158
    345e:	bf 4f       	sbci	r27, 0xFF	; 255
    3460:	fe 01       	movw	r30, r28
    3462:	ee 59       	subi	r30, 0x9E	; 158
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	81 50       	subi	r24, 0x01	; 1
    346a:	8c 93       	st	X, r24
			LOC_F32Inputs[LOC_U8Z]=0;
    346c:	fe 01       	movw	r30, r28
    346e:	ee 59       	subi	r30, 0x9E	; 158
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	80 81       	ld	r24, Z
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	9e 01       	movw	r18, r28
    347a:	25 51       	subi	r18, 0x15	; 21
    347c:	3f 4f       	sbci	r19, 0xFF	; 255
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	f9 01       	movw	r30, r18
    3488:	e8 0f       	add	r30, r24
    348a:	f9 1f       	adc	r31, r25
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	a0 e0       	ldi	r26, 0x00	; 0
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	80 83       	st	Z, r24
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	a2 83       	std	Z+2, r26	; 0x02
    349a:	b3 83       	std	Z+3, r27	; 0x03
			LCD_VidCursorShiftLeft();
    349c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_VidCursorShiftLeft>
			LOC_U8Count--;
    34a0:	de 01       	movw	r26, r28
    34a2:	af 59       	subi	r26, 0x9F	; 159
    34a4:	bf 4f       	sbci	r27, 0xFF	; 255
    34a6:	fe 01       	movw	r30, r28
    34a8:	ef 59       	subi	r30, 0x9F	; 159
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	81 50       	subi	r24, 0x01	; 1
    34b0:	8c 93       	st	X, r24
    34b2:	aa c5       	rjmp	.+2900   	; 0x4008 <main+0x1238>
		}
/***************************************FLAG EQUAL *************************************************/
		else if(LOC_U8EqualFlag==1)
    34b4:	fe 01       	movw	r30, r28
    34b6:	e5 59       	subi	r30, 0x95	; 149
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	81 30       	cpi	r24, 0x01	; 1
    34be:	09 f0       	breq	.+2      	; 0x34c2 <main+0x6f2>
    34c0:	a3 c5       	rjmp	.+2886   	; 0x4008 <main+0x1238>
		{
			/*if User press equal button (result needed),
			 Display equal , check some TestCases,
			 convert input numbers from ASCII to decimal and store it in array of equation,
			 operands store as ASCII and opens calculation flag */
			if(LOC_U8Z==0)   /*if user enter equal sign in first of operation ->Don't do anything*/
    34c2:	fe 01       	movw	r30, r28
    34c4:	ee 59       	subi	r30, 0x9E	; 158
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	88 23       	and	r24, r24
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <main+0x700>
    34ce:	f3 cc       	rjmp	.-1562   	; 0x2eb6 <main+0xe6>
				continue;
			LCD_VidSendData(LOC_U8Inp);  /*Display equal sign on LCD*/
    34d0:	fe 01       	movw	r30, r28
    34d2:	ee 58       	subi	r30, 0x8E	; 142
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_VidSendData>
			LOC_U8Count++;
    34dc:	de 01       	movw	r26, r28
    34de:	af 59       	subi	r26, 0x9F	; 159
    34e0:	bf 4f       	sbci	r27, 0xFF	; 255
    34e2:	fe 01       	movw	r30, r28
    34e4:	ef 59       	subi	r30, 0x9F	; 159
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	8c 93       	st	X, r24
/************************************** TESTCASE *******************************************************/
			if(LOC_F32Inputs[0]=='-'&& IsNum(LOC_F32Inputs[1]) && LOC_U8Com==0)
    34ee:	fe 01       	movw	r30, r28
    34f0:	e5 51       	subi	r30, 0x15	; 21
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	91 81       	ldd	r25, Z+1	; 0x01
    34f8:	a2 81       	ldd	r26, Z+2	; 0x02
    34fa:	b3 81       	ldd	r27, Z+3	; 0x03
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	44 e3       	ldi	r20, 0x34	; 52
    3506:	52 e4       	ldi	r21, 0x42	; 66
    3508:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    350c:	88 23       	and	r24, r24
    350e:	09 f0       	breq	.+2      	; 0x3512 <main+0x742>
    3510:	72 c0       	rjmp	.+228    	; 0x35f6 <main+0x826>
    3512:	fe 01       	movw	r30, r28
    3514:	e5 51       	subi	r30, 0x15	; 21
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	84 81       	ldd	r24, Z+4	; 0x04
    351a:	95 81       	ldd	r25, Z+5	; 0x05
    351c:	a6 81       	ldd	r26, Z+6	; 0x06
    351e:	b7 81       	ldd	r27, Z+7	; 0x07
    3520:	bc 01       	movw	r22, r24
    3522:	cd 01       	movw	r24, r26
    3524:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	0e 94 94 25 	call	0x4b28	; 0x4b28 <IsNum>
    3530:	88 23       	and	r24, r24
    3532:	09 f4       	brne	.+2      	; 0x3536 <main+0x766>
    3534:	60 c0       	rjmp	.+192    	; 0x35f6 <main+0x826>
    3536:	fe 01       	movw	r30, r28
    3538:	e3 59       	subi	r30, 0x93	; 147
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	80 81       	ld	r24, Z
    353e:	88 23       	and	r24, r24
    3540:	09 f0       	breq	.+2      	; 0x3544 <main+0x774>
    3542:	59 c0       	rjmp	.+178    	; 0x35f6 <main+0x826>
			{
				/* if user enter negative sign then number means negative number at first operation*/
				for(u8 LOC_U8j=0;LOC_U8j<LOC_U8Z;LOC_U8j++)
    3544:	fe 01       	movw	r30, r28
    3546:	e3 5a       	subi	r30, 0xA3	; 163
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	10 82       	st	Z, r1
    354c:	33 c0       	rjmp	.+102    	; 0x35b4 <main+0x7e4>
				{
					LOC_F32Inputs[LOC_U8j]=LOC_F32Inputs[LOC_U8j+1]; /*shift all array elements  by one to left */
    354e:	fe 01       	movw	r30, r28
    3550:	e3 5a       	subi	r30, 0xA3	; 163
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	a8 2f       	mov	r26, r24
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	fe 01       	movw	r30, r28
    355c:	e3 5a       	subi	r30, 0xA3	; 163
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 81       	ld	r24, Z
    3562:	88 2f       	mov	r24, r24
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	9e 01       	movw	r18, r28
    356a:	25 51       	subi	r18, 0x15	; 21
    356c:	3f 4f       	sbci	r19, 0xFF	; 255
    356e:	88 0f       	add	r24, r24
    3570:	99 1f       	adc	r25, r25
    3572:	88 0f       	add	r24, r24
    3574:	99 1f       	adc	r25, r25
    3576:	f9 01       	movw	r30, r18
    3578:	e8 0f       	add	r30, r24
    357a:	f9 1f       	adc	r31, r25
    357c:	20 81       	ld	r18, Z
    357e:	31 81       	ldd	r19, Z+1	; 0x01
    3580:	42 81       	ldd	r20, Z+2	; 0x02
    3582:	53 81       	ldd	r21, Z+3	; 0x03
    3584:	be 01       	movw	r22, r28
    3586:	65 51       	subi	r22, 0x15	; 21
    3588:	7f 4f       	sbci	r23, 0xFF	; 255
    358a:	cd 01       	movw	r24, r26
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	fb 01       	movw	r30, r22
    3596:	e8 0f       	add	r30, r24
    3598:	f9 1f       	adc	r31, r25
    359a:	20 83       	st	Z, r18
    359c:	31 83       	std	Z+1, r19	; 0x01
    359e:	42 83       	std	Z+2, r20	; 0x02
    35a0:	53 83       	std	Z+3, r21	; 0x03
			LOC_U8Count++;
/************************************** TESTCASE *******************************************************/
			if(LOC_F32Inputs[0]=='-'&& IsNum(LOC_F32Inputs[1]) && LOC_U8Com==0)
			{
				/* if user enter negative sign then number means negative number at first operation*/
				for(u8 LOC_U8j=0;LOC_U8j<LOC_U8Z;LOC_U8j++)
    35a2:	de 01       	movw	r26, r28
    35a4:	a3 5a       	subi	r26, 0xA3	; 163
    35a6:	bf 4f       	sbci	r27, 0xFF	; 255
    35a8:	fe 01       	movw	r30, r28
    35aa:	e3 5a       	subi	r30, 0xA3	; 163
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 81       	ld	r24, Z
    35b0:	8f 5f       	subi	r24, 0xFF	; 255
    35b2:	8c 93       	st	X, r24
    35b4:	fe 01       	movw	r30, r28
    35b6:	e3 5a       	subi	r30, 0xA3	; 163
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	de 01       	movw	r26, r28
    35bc:	ae 59       	subi	r26, 0x9E	; 158
    35be:	bf 4f       	sbci	r27, 0xFF	; 255
    35c0:	90 81       	ld	r25, Z
    35c2:	8c 91       	ld	r24, X
    35c4:	98 17       	cp	r25, r24
    35c6:	18 f2       	brcs	.-122    	; 0x354e <main+0x77e>
				{
					LOC_F32Inputs[LOC_U8j]=LOC_F32Inputs[LOC_U8j+1]; /*shift all array elements  by one to left */
				}
				LOC_U8NegNO=1;  /*negative number flag opens*/
    35c8:	fe 01       	movw	r30, r28
    35ca:	e0 5a       	subi	r30, 0xA0	; 160
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	80 83       	st	Z, r24
				LOC_U8Z--,LOC_U8Count--;
    35d2:	de 01       	movw	r26, r28
    35d4:	ae 59       	subi	r26, 0x9E	; 158
    35d6:	bf 4f       	sbci	r27, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	ee 59       	subi	r30, 0x9E	; 158
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	81 50       	subi	r24, 0x01	; 1
    35e2:	8c 93       	st	X, r24
    35e4:	de 01       	movw	r26, r28
    35e6:	af 59       	subi	r26, 0x9F	; 159
    35e8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ea:	fe 01       	movw	r30, r28
    35ec:	ef 59       	subi	r30, 0x9F	; 159
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	80 81       	ld	r24, Z
    35f2:	81 50       	subi	r24, 0x01	; 1
    35f4:	8c 93       	st	X, r24
			}
/************************************** TESTCASE *******************************************************/
			if(IsOperand(LOC_F32Inputs[0]) && LOC_U8Com==0)
    35f6:	fe 01       	movw	r30, r28
    35f8:	e5 51       	subi	r30, 0x15	; 21
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	a2 81       	ldd	r26, Z+2	; 0x02
    3602:	b3 81       	ldd	r27, Z+3	; 0x03
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3614:	88 23       	and	r24, r24
    3616:	09 f4       	brne	.+2      	; 0x361a <main+0x84a>
    3618:	cc c0       	rjmp	.+408    	; 0x37b2 <main+0x9e2>
    361a:	fe 01       	movw	r30, r28
    361c:	e3 59       	subi	r30, 0x93	; 147
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 81       	ld	r24, Z
    3622:	88 23       	and	r24, r24
    3624:	09 f0       	breq	.+2      	; 0x3628 <main+0x858>
    3626:	c5 c0       	rjmp	.+394    	; 0x37b2 <main+0x9e2>
			{
				/* if user enter operand in first , Display error and reset	 */
				LCD_VidGoToLocation(1,11);
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	6b e0       	ldi	r22, 0x0B	; 11
    362c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
				LCD_VidSendDatastring("ERROR");
    3630:	80 e6       	ldi	r24, 0x60	; 96
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    3638:	fe 01       	movw	r30, r28
    363a:	ef 5a       	subi	r30, 0xAF	; 175
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	aa e7       	ldi	r26, 0x7A	; 122
    3644:	b4 e4       	ldi	r27, 0x44	; 68
    3646:	80 83       	st	Z, r24
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	a2 83       	std	Z+2, r26	; 0x02
    364c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364e:	8e 01       	movw	r16, r28
    3650:	03 5b       	subi	r16, 0xB3	; 179
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	fe 01       	movw	r30, r28
    3656:	ef 5a       	subi	r30, 0xAF	; 175
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	4a ef       	ldi	r20, 0xFA	; 250
    3668:	54 e4       	ldi	r21, 0x44	; 68
    366a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	f8 01       	movw	r30, r16
    3674:	80 83       	st	Z, r24
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	a2 83       	std	Z+2, r26	; 0x02
    367a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    367c:	fe 01       	movw	r30, r28
    367e:	e3 5b       	subi	r30, 0xB3	; 179
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	60 81       	ld	r22, Z
    3684:	71 81       	ldd	r23, Z+1	; 0x01
    3686:	82 81       	ldd	r24, Z+2	; 0x02
    3688:	93 81       	ldd	r25, Z+3	; 0x03
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3696:	88 23       	and	r24, r24
    3698:	44 f4       	brge	.+16     	; 0x36aa <main+0x8da>
		__ticks = 1;
    369a:	fe 01       	movw	r30, r28
    369c:	e5 5b       	subi	r30, 0xB5	; 181
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	64 c0       	rjmp	.+200    	; 0x3772 <main+0x9a2>
	else if (__tmp > 65535)
    36aa:	fe 01       	movw	r30, r28
    36ac:	e3 5b       	subi	r30, 0xB3	; 179
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	3f ef       	ldi	r19, 0xFF	; 255
    36bc:	4f e7       	ldi	r20, 0x7F	; 127
    36be:	57 e4       	ldi	r21, 0x47	; 71
    36c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    36c4:	18 16       	cp	r1, r24
    36c6:	0c f0       	brlt	.+2      	; 0x36ca <main+0x8fa>
    36c8:	43 c0       	rjmp	.+134    	; 0x3750 <main+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ca:	fe 01       	movw	r30, r28
    36cc:	ef 5a       	subi	r30, 0xAF	; 175
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e2       	ldi	r20, 0x20	; 32
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8e 01       	movw	r16, r28
    36ea:	05 5b       	subi	r16, 0xB5	; 181
    36ec:	1f 4f       	sbci	r17, 0xFF	; 255
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	f8 01       	movw	r30, r16
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	1f c0       	rjmp	.+62     	; 0x3740 <main+0x970>
    3702:	fe 01       	movw	r30, r28
    3704:	e7 5b       	subi	r30, 0xB7	; 183
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	88 ec       	ldi	r24, 0xC8	; 200
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	80 83       	st	Z, r24
    3710:	fe 01       	movw	r30, r28
    3712:	e7 5b       	subi	r30, 0xB7	; 183
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <main+0x94a>
    371e:	fe 01       	movw	r30, r28
    3720:	e7 5b       	subi	r30, 0xB7	; 183
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3728:	de 01       	movw	r26, r28
    372a:	a5 5b       	subi	r26, 0xB5	; 181
    372c:	bf 4f       	sbci	r27, 0xFF	; 255
    372e:	fe 01       	movw	r30, r28
    3730:	e5 5b       	subi	r30, 0xB5	; 181
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	11 96       	adiw	r26, 0x01	; 1
    373c:	9c 93       	st	X, r25
    373e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3740:	fe 01       	movw	r30, r28
    3742:	e5 5b       	subi	r30, 0xB5	; 181
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	d1 f6       	brne	.-76     	; 0x3702 <main+0x932>
    374e:	27 c0       	rjmp	.+78     	; 0x379e <main+0x9ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	8e 01       	movw	r16, r28
    3752:	05 5b       	subi	r16, 0xB5	; 181
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	fe 01       	movw	r30, r28
    3758:	e3 5b       	subi	r30, 0xB3	; 179
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	60 81       	ld	r22, Z
    375e:	71 81       	ldd	r23, Z+1	; 0x01
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	93 81       	ldd	r25, Z+3	; 0x03
    3764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	f8 01       	movw	r30, r16
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
    3772:	de 01       	movw	r26, r28
    3774:	a9 5b       	subi	r26, 0xB9	; 185
    3776:	bf 4f       	sbci	r27, 0xFF	; 255
    3778:	fe 01       	movw	r30, r28
    377a:	e5 5b       	subi	r30, 0xB5	; 181
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	8d 93       	st	X+, r24
    3784:	9c 93       	st	X, r25
    3786:	fe 01       	movw	r30, r28
    3788:	e9 5b       	subi	r30, 0xB9	; 185
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <main+0x9c0>
    3794:	fe 01       	movw	r30, r28
    3796:	e9 5b       	subi	r30, 0xB9	; 185
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_VidClearData();
    379e:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
				LCD_VidSetDataLocation();
    37a2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
				LOC_U8ResetFlag=1;
    37a6:	fe 01       	movw	r30, r28
    37a8:	e8 59       	subi	r30, 0x98	; 152
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	80 83       	st	Z, r24
    37b0:	82 cb       	rjmp	.-2300   	; 0x2eb6 <main+0xe6>
				continue;
			}
			LOC_U8CalcFlag=1; /*Calculation Flag opens*/
    37b2:	fe 01       	movw	r30, r28
    37b4:	e9 59       	subi	r30, 0x99	; 153
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	80 83       	st	Z, r24
			if(LOC_U8Com==1)
    37bc:	fe 01       	movw	r30, r28
    37be:	e3 59       	subi	r30, 0x93	; 147
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 81       	ld	r24, Z
    37c4:	81 30       	cpi	r24, 0x01	; 1
    37c6:	41 f4       	brne	.+16     	; 0x37d8 <main+0xa08>
			{
				LOC_U8Com=0,LOC_U8P=0;
    37c8:	fe 01       	movw	r30, r28
    37ca:	e3 59       	subi	r30, 0x93	; 147
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	10 82       	st	Z, r1
    37d0:	fe 01       	movw	r30, r28
    37d2:	e2 59       	subi	r30, 0x92	; 146
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	10 82       	st	Z, r1
			}
			for(u8 LOC_U8i=0;LOC_U8i<LOC_U8Z;LOC_U8i++)
    37d8:	fe 01       	movw	r30, r28
    37da:	e4 5a       	subi	r30, 0xA4	; 164
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	10 82       	st	Z, r1
    37e0:	d2 c3       	rjmp	.+1956   	; 0x3f86 <main+0x11b6>
			{
				if(IsNum(LOC_F32Inputs[LOC_U8i]))
    37e2:	fe 01       	movw	r30, r28
    37e4:	e4 5a       	subi	r30, 0xA4	; 164
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	88 2f       	mov	r24, r24
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	9e 01       	movw	r18, r28
    37f0:	25 51       	subi	r18, 0x15	; 21
    37f2:	3f 4f       	sbci	r19, 0xFF	; 255
    37f4:	88 0f       	add	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	88 0f       	add	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	f9 01       	movw	r30, r18
    37fe:	e8 0f       	add	r30, r24
    3800:	f9 1f       	adc	r31, r25
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	a2 81       	ldd	r26, Z+2	; 0x02
    3808:	b3 81       	ldd	r27, Z+3	; 0x03
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	0e 94 94 25 	call	0x4b28	; 0x4b28 <IsNum>
    381a:	88 23       	and	r24, r24
    381c:	09 f4       	brne	.+2      	; 0x3820 <main+0xa50>
    381e:	87 c0       	rjmp	.+270    	; 0x392e <main+0xb5e>
				{
					/*change numbers from ASCII to decimal, do concatenation to all numbers before operands	 */
					LOC_F32Inputs[LOC_U8i]-='0';
    3820:	fe 01       	movw	r30, r28
    3822:	e4 5a       	subi	r30, 0xA4	; 164
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	08 2f       	mov	r16, r24
    382a:	10 e0       	ldi	r17, 0x00	; 0
    382c:	fe 01       	movw	r30, r28
    382e:	e4 5a       	subi	r30, 0xA4	; 164
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 81       	ld	r24, Z
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	9e 01       	movw	r18, r28
    383a:	25 51       	subi	r18, 0x15	; 21
    383c:	3f 4f       	sbci	r19, 0xFF	; 255
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	f9 01       	movw	r30, r18
    3848:	e8 0f       	add	r30, r24
    384a:	f9 1f       	adc	r31, r25
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	a2 81       	ldd	r26, Z+2	; 0x02
    3852:	b3 81       	ldd	r27, Z+3	; 0x03
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e4       	ldi	r20, 0x40	; 64
    385e:	52 e4       	ldi	r21, 0x42	; 66
    3860:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	9c 01       	movw	r18, r24
    386a:	ad 01       	movw	r20, r26
    386c:	be 01       	movw	r22, r28
    386e:	65 51       	subi	r22, 0x15	; 21
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	c8 01       	movw	r24, r16
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	fb 01       	movw	r30, r22
    387e:	e8 0f       	add	r30, r24
    3880:	f9 1f       	adc	r31, r25
    3882:	20 83       	st	Z, r18
    3884:	31 83       	std	Z+1, r19	; 0x01
    3886:	42 83       	std	Z+2, r20	; 0x02
    3888:	53 83       	std	Z+3, r21	; 0x03
					LOC_F32Equation[LOC_U8P]=LOC_F32Equation[LOC_U8P]*10+LOC_F32Inputs[LOC_U8i];
    388a:	fe 01       	movw	r30, r28
    388c:	e2 59       	subi	r30, 0x92	; 146
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	80 81       	ld	r24, Z
    3892:	c8 2e       	mov	r12, r24
    3894:	dd 24       	eor	r13, r13
    3896:	fe 01       	movw	r30, r28
    3898:	e2 59       	subi	r30, 0x92	; 146
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	88 2f       	mov	r24, r24
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	9e 01       	movw	r18, r28
    38a4:	2d 58       	subi	r18, 0x8D	; 141
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	88 0f       	add	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	f9 01       	movw	r30, r18
    38b2:	e8 0f       	add	r30, r24
    38b4:	f9 1f       	adc	r31, r25
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	a2 81       	ldd	r26, Z+2	; 0x02
    38bc:	b3 81       	ldd	r27, Z+3	; 0x03
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	7c 01       	movw	r14, r24
    38d4:	8d 01       	movw	r16, r26
    38d6:	fe 01       	movw	r30, r28
    38d8:	e4 5a       	subi	r30, 0xA4	; 164
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	80 81       	ld	r24, Z
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	9e 01       	movw	r18, r28
    38e4:	25 51       	subi	r18, 0x15	; 21
    38e6:	3f 4f       	sbci	r19, 0xFF	; 255
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	88 0f       	add	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	f9 01       	movw	r30, r18
    38f2:	e8 0f       	add	r30, r24
    38f4:	f9 1f       	adc	r31, r25
    38f6:	20 81       	ld	r18, Z
    38f8:	31 81       	ldd	r19, Z+1	; 0x01
    38fa:	42 81       	ldd	r20, Z+2	; 0x02
    38fc:	53 81       	ldd	r21, Z+3	; 0x03
    38fe:	c8 01       	movw	r24, r16
    3900:	b7 01       	movw	r22, r14
    3902:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	9c 01       	movw	r18, r24
    390c:	ad 01       	movw	r20, r26
    390e:	be 01       	movw	r22, r28
    3910:	6d 58       	subi	r22, 0x8D	; 141
    3912:	7f 4f       	sbci	r23, 0xFF	; 255
    3914:	c6 01       	movw	r24, r12
    3916:	88 0f       	add	r24, r24
    3918:	99 1f       	adc	r25, r25
    391a:	88 0f       	add	r24, r24
    391c:	99 1f       	adc	r25, r25
    391e:	fb 01       	movw	r30, r22
    3920:	e8 0f       	add	r30, r24
    3922:	f9 1f       	adc	r31, r25
    3924:	20 83       	st	Z, r18
    3926:	31 83       	std	Z+1, r19	; 0x01
    3928:	42 83       	std	Z+2, r20	; 0x02
    392a:	53 83       	std	Z+3, r21	; 0x03
    392c:	90 c0       	rjmp	.+288    	; 0x3a4e <main+0xc7e>
				}
				else if(IsOperand(LOC_F32Inputs[LOC_U8i]))
    392e:	fe 01       	movw	r30, r28
    3930:	e4 5a       	subi	r30, 0xA4	; 164
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	80 81       	ld	r24, Z
    3936:	88 2f       	mov	r24, r24
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	9e 01       	movw	r18, r28
    393c:	25 51       	subi	r18, 0x15	; 21
    393e:	3f 4f       	sbci	r19, 0xFF	; 255
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	f9 01       	movw	r30, r18
    394a:	e8 0f       	add	r30, r24
    394c:	f9 1f       	adc	r31, r25
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	a2 81       	ldd	r26, Z+2	; 0x02
    3954:	b3 81       	ldd	r27, Z+3	; 0x03
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3966:	88 23       	and	r24, r24
    3968:	09 f4       	brne	.+2      	; 0x396c <main+0xb9c>
    396a:	71 c0       	rjmp	.+226    	; 0x3a4e <main+0xc7e>
				{
					/* store ASCII values of operands in array of equation */
					if(LOC_U8NegNO==1)
    396c:	fe 01       	movw	r30, r28
    396e:	e0 5a       	subi	r30, 0xA0	; 160
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	81 30       	cpi	r24, 0x01	; 1
    3976:	81 f5       	brne	.+96     	; 0x39d8 <main+0xc08>
					{
						LOC_U8NegNO=0;
    3978:	fe 01       	movw	r30, r28
    397a:	e0 5a       	subi	r30, 0xA0	; 160
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	10 82       	st	Z, r1
						LOC_F32Equation[LOC_U8P]*=(-1.0); /*if negative flag opened ->Add negative sign to this number*/
    3980:	fe 01       	movw	r30, r28
    3982:	e2 59       	subi	r30, 0x92	; 146
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	08 2f       	mov	r16, r24
    398a:	10 e0       	ldi	r17, 0x00	; 0
    398c:	fe 01       	movw	r30, r28
    398e:	e2 59       	subi	r30, 0x92	; 146
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	80 81       	ld	r24, Z
    3994:	88 2f       	mov	r24, r24
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9e 01       	movw	r18, r28
    399a:	2d 58       	subi	r18, 0x8D	; 141
    399c:	3f 4f       	sbci	r19, 0xFF	; 255
    399e:	88 0f       	add	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	f9 01       	movw	r30, r18
    39a8:	e8 0f       	add	r30, r24
    39aa:	f9 1f       	adc	r31, r25
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	a2 81       	ldd	r26, Z+2	; 0x02
    39b2:	b3 81       	ldd	r27, Z+3	; 0x03
    39b4:	9c 01       	movw	r18, r24
    39b6:	ad 01       	movw	r20, r26
    39b8:	50 58       	subi	r21, 0x80	; 128
    39ba:	be 01       	movw	r22, r28
    39bc:	6d 58       	subi	r22, 0x8D	; 141
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	c8 01       	movw	r24, r16
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	fb 01       	movw	r30, r22
    39cc:	e8 0f       	add	r30, r24
    39ce:	f9 1f       	adc	r31, r25
    39d0:	20 83       	st	Z, r18
    39d2:	31 83       	std	Z+1, r19	; 0x01
    39d4:	42 83       	std	Z+2, r20	; 0x02
    39d6:	53 83       	std	Z+3, r21	; 0x03
					}
					LOC_U8P++;
    39d8:	de 01       	movw	r26, r28
    39da:	a2 59       	subi	r26, 0x92	; 146
    39dc:	bf 4f       	sbci	r27, 0xFF	; 255
    39de:	fe 01       	movw	r30, r28
    39e0:	e2 59       	subi	r30, 0x92	; 146
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	8f 5f       	subi	r24, 0xFF	; 255
    39e8:	8c 93       	st	X, r24
					LOC_F32Equation[LOC_U8P]=LOC_F32Inputs[LOC_U8i];
    39ea:	fe 01       	movw	r30, r28
    39ec:	e2 59       	subi	r30, 0x92	; 146
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	80 81       	ld	r24, Z
    39f2:	a8 2f       	mov	r26, r24
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	fe 01       	movw	r30, r28
    39f8:	e4 5a       	subi	r30, 0xA4	; 164
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	80 81       	ld	r24, Z
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9e 01       	movw	r18, r28
    3a04:	25 51       	subi	r18, 0x15	; 21
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	f9 01       	movw	r30, r18
    3a12:	e8 0f       	add	r30, r24
    3a14:	f9 1f       	adc	r31, r25
    3a16:	20 81       	ld	r18, Z
    3a18:	31 81       	ldd	r19, Z+1	; 0x01
    3a1a:	42 81       	ldd	r20, Z+2	; 0x02
    3a1c:	53 81       	ldd	r21, Z+3	; 0x03
    3a1e:	be 01       	movw	r22, r28
    3a20:	6d 58       	subi	r22, 0x8D	; 141
    3a22:	7f 4f       	sbci	r23, 0xFF	; 255
    3a24:	cd 01       	movw	r24, r26
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	fb 01       	movw	r30, r22
    3a30:	e8 0f       	add	r30, r24
    3a32:	f9 1f       	adc	r31, r25
    3a34:	20 83       	st	Z, r18
    3a36:	31 83       	std	Z+1, r19	; 0x01
    3a38:	42 83       	std	Z+2, r20	; 0x02
    3a3a:	53 83       	std	Z+3, r21	; 0x03
					LOC_U8P++;
    3a3c:	de 01       	movw	r26, r28
    3a3e:	a2 59       	subi	r26, 0x92	; 146
    3a40:	bf 4f       	sbci	r27, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	e2 59       	subi	r30, 0x92	; 146
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	80 81       	ld	r24, Z
    3a4a:	8f 5f       	subi	r24, 0xFF	; 255
    3a4c:	8c 93       	st	X, r24
				}
	/************************************** TESTCASE *******************************************************/
				if(IsOperand(LOC_F32Inputs[LOC_U8i]) && LOC_F32Inputs[LOC_U8i+1]=='-'&& IsNum(LOC_F32Inputs[LOC_U8i+2])  )
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e4 5a       	subi	r30, 0xA4	; 164
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 81       	ld	r24, Z
    3a56:	88 2f       	mov	r24, r24
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	9e 01       	movw	r18, r28
    3a5c:	25 51       	subi	r18, 0x15	; 21
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	f9 01       	movw	r30, r18
    3a6a:	e8 0f       	add	r30, r24
    3a6c:	f9 1f       	adc	r31, r25
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	a2 81       	ldd	r26, Z+2	; 0x02
    3a74:	b3 81       	ldd	r27, Z+3	; 0x03
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3a86:	88 23       	and	r24, r24
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <main+0xcbc>
    3a8a:	b3 c0       	rjmp	.+358    	; 0x3bf2 <main+0xe22>
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e4 5a       	subi	r30, 0xA4	; 164
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	88 2f       	mov	r24, r24
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	9e 01       	movw	r18, r28
    3a9c:	25 51       	subi	r18, 0x15	; 21
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	f9 01       	movw	r30, r18
    3aaa:	e8 0f       	add	r30, r24
    3aac:	f9 1f       	adc	r31, r25
    3aae:	80 81       	ld	r24, Z
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    3ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    3ab6:	cb 59       	subi	r28, 0x9B	; 155
    3ab8:	de 4f       	sbci	r29, 0xFE	; 254
    3aba:	18 82       	st	Y, r1
    3abc:	c5 56       	subi	r28, 0x65	; 101
    3abe:	d1 40       	sbci	r29, 0x01	; 1
    3ac0:	bc 01       	movw	r22, r24
    3ac2:	cd 01       	movw	r24, r26
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	44 e3       	ldi	r20, 0x34	; 52
    3aca:	52 e4       	ldi	r21, 0x42	; 66
    3acc:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    3ad0:	88 23       	and	r24, r24
    3ad2:	31 f4       	brne	.+12     	; 0x3ae0 <main+0xd10>
    3ad4:	f1 e0       	ldi	r31, 0x01	; 1
    3ad6:	cb 59       	subi	r28, 0x9B	; 155
    3ad8:	de 4f       	sbci	r29, 0xFE	; 254
    3ada:	f8 83       	st	Y, r31
    3adc:	c5 56       	subi	r28, 0x65	; 101
    3ade:	d1 40       	sbci	r29, 0x01	; 1
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	cb 59       	subi	r28, 0x9B	; 155
    3ae4:	de 4f       	sbci	r29, 0xFE	; 254
    3ae6:	98 81       	ld	r25, Y
    3ae8:	c5 56       	subi	r28, 0x65	; 101
    3aea:	d1 40       	sbci	r29, 0x01	; 1
    3aec:	89 27       	eor	r24, r25
    3aee:	88 23       	and	r24, r24
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <main+0xd24>
    3af2:	7f c0       	rjmp	.+254    	; 0x3bf2 <main+0xe22>
    3af4:	fe 01       	movw	r30, r28
    3af6:	e4 5a       	subi	r30, 0xA4	; 164
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 81       	ld	r24, Z
    3afc:	88 2f       	mov	r24, r24
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	02 96       	adiw	r24, 0x02	; 2
    3b02:	9e 01       	movw	r18, r28
    3b04:	25 51       	subi	r18, 0x15	; 21
    3b06:	3f 4f       	sbci	r19, 0xFF	; 255
    3b08:	88 0f       	add	r24, r24
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	88 0f       	add	r24, r24
    3b0e:	99 1f       	adc	r25, r25
    3b10:	f9 01       	movw	r30, r18
    3b12:	e8 0f       	add	r30, r24
    3b14:	f9 1f       	adc	r31, r25
    3b16:	80 81       	ld	r24, Z
    3b18:	91 81       	ldd	r25, Z+1	; 0x01
    3b1a:	a2 81       	ldd	r26, Z+2	; 0x02
    3b1c:	b3 81       	ldd	r27, Z+3	; 0x03
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	0e 94 94 25 	call	0x4b28	; 0x4b28 <IsNum>
    3b2e:	88 23       	and	r24, r24
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <main+0xd64>
    3b32:	5f c0       	rjmp	.+190    	; 0x3bf2 <main+0xe22>
				{
					/* if user enter two operand in sequence and second one is negative sign then entered number
					 ->Add negative sign to this number*/
					for(u8 LOC_U8j=LOC_U8i+1;LOC_U8j<LOC_U8Z;LOC_U8j++)
    3b34:	de 01       	movw	r26, r28
    3b36:	a5 5a       	subi	r26, 0xA5	; 165
    3b38:	bf 4f       	sbci	r27, 0xFF	; 255
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e4 5a       	subi	r30, 0xA4	; 164
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 81       	ld	r24, Z
    3b42:	8f 5f       	subi	r24, 0xFF	; 255
    3b44:	8c 93       	st	X, r24
    3b46:	33 c0       	rjmp	.+102    	; 0x3bae <main+0xdde>
					{
						LOC_F32Inputs[LOC_U8j]=LOC_F32Inputs[LOC_U8j+1];
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e5 5a       	subi	r30, 0xA5	; 165
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	80 81       	ld	r24, Z
    3b50:	a8 2f       	mov	r26, r24
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	fe 01       	movw	r30, r28
    3b56:	e5 5a       	subi	r30, 0xA5	; 165
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	80 81       	ld	r24, Z
    3b5c:	88 2f       	mov	r24, r24
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	01 96       	adiw	r24, 0x01	; 1
    3b62:	9e 01       	movw	r18, r28
    3b64:	25 51       	subi	r18, 0x15	; 21
    3b66:	3f 4f       	sbci	r19, 0xFF	; 255
    3b68:	88 0f       	add	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	f9 01       	movw	r30, r18
    3b72:	e8 0f       	add	r30, r24
    3b74:	f9 1f       	adc	r31, r25
    3b76:	20 81       	ld	r18, Z
    3b78:	31 81       	ldd	r19, Z+1	; 0x01
    3b7a:	42 81       	ldd	r20, Z+2	; 0x02
    3b7c:	53 81       	ldd	r21, Z+3	; 0x03
    3b7e:	be 01       	movw	r22, r28
    3b80:	65 51       	subi	r22, 0x15	; 21
    3b82:	7f 4f       	sbci	r23, 0xFF	; 255
    3b84:	cd 01       	movw	r24, r26
    3b86:	88 0f       	add	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	fb 01       	movw	r30, r22
    3b90:	e8 0f       	add	r30, r24
    3b92:	f9 1f       	adc	r31, r25
    3b94:	20 83       	st	Z, r18
    3b96:	31 83       	std	Z+1, r19	; 0x01
    3b98:	42 83       	std	Z+2, r20	; 0x02
    3b9a:	53 83       	std	Z+3, r21	; 0x03
	/************************************** TESTCASE *******************************************************/
				if(IsOperand(LOC_F32Inputs[LOC_U8i]) && LOC_F32Inputs[LOC_U8i+1]=='-'&& IsNum(LOC_F32Inputs[LOC_U8i+2])  )
				{
					/* if user enter two operand in sequence and second one is negative sign then entered number
					 ->Add negative sign to this number*/
					for(u8 LOC_U8j=LOC_U8i+1;LOC_U8j<LOC_U8Z;LOC_U8j++)
    3b9c:	de 01       	movw	r26, r28
    3b9e:	a5 5a       	subi	r26, 0xA5	; 165
    3ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e5 5a       	subi	r30, 0xA5	; 165
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	80 81       	ld	r24, Z
    3baa:	8f 5f       	subi	r24, 0xFF	; 255
    3bac:	8c 93       	st	X, r24
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e5 5a       	subi	r30, 0xA5	; 165
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	de 01       	movw	r26, r28
    3bb6:	ae 59       	subi	r26, 0x9E	; 158
    3bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bba:	90 81       	ld	r25, Z
    3bbc:	8c 91       	ld	r24, X
    3bbe:	98 17       	cp	r25, r24
    3bc0:	18 f2       	brcs	.-122    	; 0x3b48 <main+0xd78>
					{
						LOC_F32Inputs[LOC_U8j]=LOC_F32Inputs[LOC_U8j+1];
					}
					LOC_U8NegNO=1;
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	e0 5a       	subi	r30, 0xA0	; 160
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	80 83       	st	Z, r24
					LOC_U8Z--,LOC_U8Count--;
    3bcc:	de 01       	movw	r26, r28
    3bce:	ae 59       	subi	r26, 0x9E	; 158
    3bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	ee 59       	subi	r30, 0x9E	; 158
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	80 81       	ld	r24, Z
    3bda:	81 50       	subi	r24, 0x01	; 1
    3bdc:	8c 93       	st	X, r24
    3bde:	de 01       	movw	r26, r28
    3be0:	af 59       	subi	r26, 0x9F	; 159
    3be2:	bf 4f       	sbci	r27, 0xFF	; 255
    3be4:	fe 01       	movw	r30, r28
    3be6:	ef 59       	subi	r30, 0x9F	; 159
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	80 81       	ld	r24, Z
    3bec:	81 50       	subi	r24, 0x01	; 1
    3bee:	8c 93       	st	X, r24
    3bf0:	da c0       	rjmp	.+436    	; 0x3da6 <main+0xfd6>
				}
/************************************** TESTCASE *******************************************************/
				else if(IsOperand(LOC_F32Inputs[LOC_U8i]) && IsOperand(LOC_F32Inputs[LOC_U8i+1]))
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	e4 5a       	subi	r30, 0xA4	; 164
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	80 81       	ld	r24, Z
    3bfa:	88 2f       	mov	r24, r24
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	9e 01       	movw	r18, r28
    3c00:	25 51       	subi	r18, 0x15	; 21
    3c02:	3f 4f       	sbci	r19, 0xFF	; 255
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	f9 01       	movw	r30, r18
    3c0e:	e8 0f       	add	r30, r24
    3c10:	f9 1f       	adc	r31, r25
    3c12:	80 81       	ld	r24, Z
    3c14:	91 81       	ldd	r25, Z+1	; 0x01
    3c16:	a2 81       	ldd	r26, Z+2	; 0x02
    3c18:	b3 81       	ldd	r27, Z+3	; 0x03
    3c1a:	bc 01       	movw	r22, r24
    3c1c:	cd 01       	movw	r24, r26
    3c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3c2a:	88 23       	and	r24, r24
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <main+0xe60>
    3c2e:	bb c0       	rjmp	.+374    	; 0x3da6 <main+0xfd6>
    3c30:	fe 01       	movw	r30, r28
    3c32:	e4 5a       	subi	r30, 0xA4	; 164
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	88 2f       	mov	r24, r24
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	01 96       	adiw	r24, 0x01	; 1
    3c3e:	9e 01       	movw	r18, r28
    3c40:	25 51       	subi	r18, 0x15	; 21
    3c42:	3f 4f       	sbci	r19, 0xFF	; 255
    3c44:	88 0f       	add	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	f9 01       	movw	r30, r18
    3c4e:	e8 0f       	add	r30, r24
    3c50:	f9 1f       	adc	r31, r25
    3c52:	80 81       	ld	r24, Z
    3c54:	91 81       	ldd	r25, Z+1	; 0x01
    3c56:	a2 81       	ldd	r26, Z+2	; 0x02
    3c58:	b3 81       	ldd	r27, Z+3	; 0x03
    3c5a:	bc 01       	movw	r22, r24
    3c5c:	cd 01       	movw	r24, r26
    3c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3c6a:	88 23       	and	r24, r24
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <main+0xea0>
    3c6e:	9b c0       	rjmp	.+310    	; 0x3da6 <main+0xfd6>
				{
					/* if user enter two operand in sequence without numbers in between, Display error and reset*/
					LCD_VidGoToLocation(1,11);
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	6b e0       	ldi	r22, 0x0B	; 11
    3c74:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
					LCD_VidSendDatastring("ERROR");
    3c78:	80 e6       	ldi	r24, 0x60	; 96
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    3c80:	fe 01       	movw	r30, r28
    3c82:	ed 5b       	subi	r30, 0xBD	; 189
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	aa e7       	ldi	r26, 0x7A	; 122
    3c8c:	b4 e4       	ldi	r27, 0x44	; 68
    3c8e:	80 83       	st	Z, r24
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	a2 83       	std	Z+2, r26	; 0x02
    3c94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c96:	8e 01       	movw	r16, r28
    3c98:	01 5c       	subi	r16, 0xC1	; 193
    3c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	ed 5b       	subi	r30, 0xBD	; 189
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	82 81       	ldd	r24, Z+2	; 0x02
    3ca8:	93 81       	ldd	r25, Z+3	; 0x03
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	4a ef       	ldi	r20, 0xFA	; 250
    3cb0:	54 e4       	ldi	r21, 0x44	; 68
    3cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	f8 01       	movw	r30, r16
    3cbc:	80 83       	st	Z, r24
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	a2 83       	std	Z+2, r26	; 0x02
    3cc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ff 96       	adiw	r30, 0x3f	; 63
    3cc8:	60 81       	ld	r22, Z
    3cca:	71 81       	ldd	r23, Z+1	; 0x01
    3ccc:	82 81       	ldd	r24, Z+2	; 0x02
    3cce:	93 81       	ldd	r25, Z+3	; 0x03
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e8       	ldi	r20, 0x80	; 128
    3cd6:	5f e3       	ldi	r21, 0x3F	; 63
    3cd8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3cdc:	88 23       	and	r24, r24
    3cde:	2c f4       	brge	.+10     	; 0x3cea <main+0xf1a>
		__ticks = 1;
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	9e af       	std	Y+62, r25	; 0x3e
    3ce6:	8d af       	std	Y+61, r24	; 0x3d
    3ce8:	46 c0       	rjmp	.+140    	; 0x3d76 <main+0xfa6>
	else if (__tmp > 65535)
    3cea:	fe 01       	movw	r30, r28
    3cec:	ff 96       	adiw	r30, 0x3f	; 63
    3cee:	60 81       	ld	r22, Z
    3cf0:	71 81       	ldd	r23, Z+1	; 0x01
    3cf2:	82 81       	ldd	r24, Z+2	; 0x02
    3cf4:	93 81       	ldd	r25, Z+3	; 0x03
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	3f ef       	ldi	r19, 0xFF	; 255
    3cfa:	4f e7       	ldi	r20, 0x7F	; 127
    3cfc:	57 e4       	ldi	r21, 0x47	; 71
    3cfe:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3d02:	18 16       	cp	r1, r24
    3d04:	64 f5       	brge	.+88     	; 0x3d5e <main+0xf8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 5b       	subi	r30, 0xBD	; 189
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	60 81       	ld	r22, Z
    3d0e:	71 81       	ldd	r23, Z+1	; 0x01
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	93 81       	ldd	r25, Z+3	; 0x03
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e2       	ldi	r20, 0x20	; 32
    3d1a:	51 e4       	ldi	r21, 0x41	; 65
    3d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	9e af       	std	Y+62, r25	; 0x3e
    3d32:	8d af       	std	Y+61, r24	; 0x3d
    3d34:	0f c0       	rjmp	.+30     	; 0x3d54 <main+0xf84>
    3d36:	88 ec       	ldi	r24, 0xC8	; 200
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9c af       	std	Y+60, r25	; 0x3c
    3d3c:	8b af       	std	Y+59, r24	; 0x3b
    3d3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d40:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <main+0xf72>
    3d46:	9c af       	std	Y+60, r25	; 0x3c
    3d48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	9e af       	std	Y+62, r25	; 0x3e
    3d52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d54:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d56:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	69 f7       	brne	.-38     	; 0x3d36 <main+0xf66>
    3d5c:	16 c0       	rjmp	.+44     	; 0x3d8a <main+0xfba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5e:	fe 01       	movw	r30, r28
    3d60:	ff 96       	adiw	r30, 0x3f	; 63
    3d62:	60 81       	ld	r22, Z
    3d64:	71 81       	ldd	r23, Z+1	; 0x01
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	9e af       	std	Y+62, r25	; 0x3e
    3d74:	8d af       	std	Y+61, r24	; 0x3d
    3d76:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d78:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d7a:	9a af       	std	Y+58, r25	; 0x3a
    3d7c:	89 af       	std	Y+57, r24	; 0x39
    3d7e:	89 ad       	ldd	r24, Y+57	; 0x39
    3d80:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <main+0xfb2>
    3d86:	9a af       	std	Y+58, r25	; 0x3a
    3d88:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(1000);
					LCD_VidClearData();
    3d8a:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
					LCD_VidSetDataLocation();
    3d8e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
					LOC_U8ResetFlag=1;
    3d92:	fe 01       	movw	r30, r28
    3d94:	e8 59       	subi	r30, 0x98	; 152
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	80 83       	st	Z, r24
					LOC_U8CalcFlag=0;
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e9 59       	subi	r30, 0x99	; 153
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	10 82       	st	Z, r1
    3da4:	fb c0       	rjmp	.+502    	; 0x3f9c <main+0x11cc>
					break;
				}
/************************************** TESTCASE *******************************************************/
				if(IsOperand(LOC_F32Inputs[LOC_U8i]) && !IsOperand(LOC_F32Inputs[LOC_U8i+1]) && !IsNum(LOC_F32Inputs[LOC_U8i+1]))
    3da6:	fe 01       	movw	r30, r28
    3da8:	e4 5a       	subi	r30, 0xA4	; 164
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 81       	ld	r24, Z
    3dae:	88 2f       	mov	r24, r24
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	9e 01       	movw	r18, r28
    3db4:	25 51       	subi	r18, 0x15	; 21
    3db6:	3f 4f       	sbci	r19, 0xFF	; 255
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	f9 01       	movw	r30, r18
    3dc2:	e8 0f       	add	r30, r24
    3dc4:	f9 1f       	adc	r31, r25
    3dc6:	80 81       	ld	r24, Z
    3dc8:	91 81       	ldd	r25, Z+1	; 0x01
    3dca:	a2 81       	ldd	r26, Z+2	; 0x02
    3dcc:	b3 81       	ldd	r27, Z+3	; 0x03
    3dce:	bc 01       	movw	r22, r24
    3dd0:	cd 01       	movw	r24, r26
    3dd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3dde:	88 23       	and	r24, r24
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <main+0x1014>
    3de2:	c8 c0       	rjmp	.+400    	; 0x3f74 <main+0x11a4>
    3de4:	fe 01       	movw	r30, r28
    3de6:	e4 5a       	subi	r30, 0xA4	; 164
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	80 81       	ld	r24, Z
    3dec:	88 2f       	mov	r24, r24
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	9e 01       	movw	r18, r28
    3df4:	25 51       	subi	r18, 0x15	; 21
    3df6:	3f 4f       	sbci	r19, 0xFF	; 255
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	f9 01       	movw	r30, r18
    3e02:	e8 0f       	add	r30, r24
    3e04:	f9 1f       	adc	r31, r25
    3e06:	80 81       	ld	r24, Z
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	a2 81       	ldd	r26, Z+2	; 0x02
    3e0c:	b3 81       	ldd	r27, Z+3	; 0x03
    3e0e:	bc 01       	movw	r22, r24
    3e10:	cd 01       	movw	r24, r26
    3e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <IsOperand>
    3e1e:	88 23       	and	r24, r24
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <main+0x1054>
    3e22:	a8 c0       	rjmp	.+336    	; 0x3f74 <main+0x11a4>
    3e24:	fe 01       	movw	r30, r28
    3e26:	e4 5a       	subi	r30, 0xA4	; 164
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	80 81       	ld	r24, Z
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	01 96       	adiw	r24, 0x01	; 1
    3e32:	9e 01       	movw	r18, r28
    3e34:	25 51       	subi	r18, 0x15	; 21
    3e36:	3f 4f       	sbci	r19, 0xFF	; 255
    3e38:	88 0f       	add	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	88 0f       	add	r24, r24
    3e3e:	99 1f       	adc	r25, r25
    3e40:	f9 01       	movw	r30, r18
    3e42:	e8 0f       	add	r30, r24
    3e44:	f9 1f       	adc	r31, r25
    3e46:	80 81       	ld	r24, Z
    3e48:	91 81       	ldd	r25, Z+1	; 0x01
    3e4a:	a2 81       	ldd	r26, Z+2	; 0x02
    3e4c:	b3 81       	ldd	r27, Z+3	; 0x03
    3e4e:	bc 01       	movw	r22, r24
    3e50:	cd 01       	movw	r24, r26
    3e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	0e 94 94 25 	call	0x4b28	; 0x4b28 <IsNum>
    3e5e:	88 23       	and	r24, r24
    3e60:	09 f0       	breq	.+2      	; 0x3e64 <main+0x1094>
    3e62:	88 c0       	rjmp	.+272    	; 0x3f74 <main+0x11a4>
				{
					/* if user enter operand at end then press equal, Display error and reset*/
					LCD_VidGoToLocation(1,11);
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	6b e0       	ldi	r22, 0x0B	; 11
    3e68:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
					LCD_VidSendDatastring("ERROR");
    3e6c:	80 e6       	ldi	r24, 0x60	; 96
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	aa e7       	ldi	r26, 0x7A	; 122
    3e7a:	b4 e4       	ldi	r27, 0x44	; 68
    3e7c:	8d ab       	std	Y+53, r24	; 0x35
    3e7e:	9e ab       	std	Y+54, r25	; 0x36
    3e80:	af ab       	std	Y+55, r26	; 0x37
    3e82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e84:	6d a9       	ldd	r22, Y+53	; 0x35
    3e86:	7e a9       	ldd	r23, Y+54	; 0x36
    3e88:	8f a9       	ldd	r24, Y+55	; 0x37
    3e8a:	98 ad       	ldd	r25, Y+56	; 0x38
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	4a ef       	ldi	r20, 0xFA	; 250
    3e92:	54 e4       	ldi	r21, 0x44	; 68
    3e94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	89 ab       	std	Y+49, r24	; 0x31
    3e9e:	9a ab       	std	Y+50, r25	; 0x32
    3ea0:	ab ab       	std	Y+51, r26	; 0x33
    3ea2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ea4:	69 a9       	ldd	r22, Y+49	; 0x31
    3ea6:	7a a9       	ldd	r23, Y+50	; 0x32
    3ea8:	8b a9       	ldd	r24, Y+51	; 0x33
    3eaa:	9c a9       	ldd	r25, Y+52	; 0x34
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	40 e8       	ldi	r20, 0x80	; 128
    3eb2:	5f e3       	ldi	r21, 0x3F	; 63
    3eb4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    3eb8:	88 23       	and	r24, r24
    3eba:	2c f4       	brge	.+10     	; 0x3ec6 <main+0x10f6>
		__ticks = 1;
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	98 ab       	std	Y+48, r25	; 0x30
    3ec2:	8f a7       	std	Y+47, r24	; 0x2f
    3ec4:	3f c0       	rjmp	.+126    	; 0x3f44 <main+0x1174>
	else if (__tmp > 65535)
    3ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    3ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    3eca:	8b a9       	ldd	r24, Y+51	; 0x33
    3ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	3f ef       	ldi	r19, 0xFF	; 255
    3ed2:	4f e7       	ldi	r20, 0x7F	; 127
    3ed4:	57 e4       	ldi	r21, 0x47	; 71
    3ed6:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    3eda:	18 16       	cp	r1, r24
    3edc:	4c f5       	brge	.+82     	; 0x3f30 <main+0x1160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ede:	6d a9       	ldd	r22, Y+53	; 0x35
    3ee0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ee2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ee4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	40 e2       	ldi	r20, 0x20	; 32
    3eec:	51 e4       	ldi	r21, 0x41	; 65
    3eee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	cd 01       	movw	r24, r26
    3efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	98 ab       	std	Y+48, r25	; 0x30
    3f04:	8f a7       	std	Y+47, r24	; 0x2f
    3f06:	0f c0       	rjmp	.+30     	; 0x3f26 <main+0x1156>
    3f08:	88 ec       	ldi	r24, 0xC8	; 200
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	9e a7       	std	Y+46, r25	; 0x2e
    3f0e:	8d a7       	std	Y+45, r24	; 0x2d
    3f10:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f12:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f14:	01 97       	sbiw	r24, 0x01	; 1
    3f16:	f1 f7       	brne	.-4      	; 0x3f14 <main+0x1144>
    3f18:	9e a7       	std	Y+46, r25	; 0x2e
    3f1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	98 ab       	std	Y+48, r25	; 0x30
    3f24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f28:	98 a9       	ldd	r25, Y+48	; 0x30
    3f2a:	00 97       	sbiw	r24, 0x00	; 0
    3f2c:	69 f7       	brne	.-38     	; 0x3f08 <main+0x1138>
    3f2e:	14 c0       	rjmp	.+40     	; 0x3f58 <main+0x1188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f30:	69 a9       	ldd	r22, Y+49	; 0x31
    3f32:	7a a9       	ldd	r23, Y+50	; 0x32
    3f34:	8b a9       	ldd	r24, Y+51	; 0x33
    3f36:	9c a9       	ldd	r25, Y+52	; 0x34
    3f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	98 ab       	std	Y+48, r25	; 0x30
    3f42:	8f a7       	std	Y+47, r24	; 0x2f
    3f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f46:	98 a9       	ldd	r25, Y+48	; 0x30
    3f48:	9c a7       	std	Y+44, r25	; 0x2c
    3f4a:	8b a7       	std	Y+43, r24	; 0x2b
    3f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <main+0x1180>
    3f54:	9c a7       	std	Y+44, r25	; 0x2c
    3f56:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					LCD_VidClearData();
    3f58:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
					LCD_VidSetDataLocation();
    3f5c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
					LOC_U8ResetFlag=1;
    3f60:	fe 01       	movw	r30, r28
    3f62:	e8 59       	subi	r30, 0x98	; 152
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	80 83       	st	Z, r24
					LOC_U8CalcFlag=0;
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e9 59       	subi	r30, 0x99	; 153
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	10 82       	st	Z, r1
    3f72:	14 c0       	rjmp	.+40     	; 0x3f9c <main+0x11cc>
			LOC_U8CalcFlag=1; /*Calculation Flag opens*/
			if(LOC_U8Com==1)
			{
				LOC_U8Com=0,LOC_U8P=0;
			}
			for(u8 LOC_U8i=0;LOC_U8i<LOC_U8Z;LOC_U8i++)
    3f74:	de 01       	movw	r26, r28
    3f76:	a4 5a       	subi	r26, 0xA4	; 164
    3f78:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e4 5a       	subi	r30, 0xA4	; 164
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 81       	ld	r24, Z
    3f82:	8f 5f       	subi	r24, 0xFF	; 255
    3f84:	8c 93       	st	X, r24
    3f86:	fe 01       	movw	r30, r28
    3f88:	e4 5a       	subi	r30, 0xA4	; 164
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	de 01       	movw	r26, r28
    3f8e:	ae 59       	subi	r26, 0x9E	; 158
    3f90:	bf 4f       	sbci	r27, 0xFF	; 255
    3f92:	90 81       	ld	r25, Z
    3f94:	8c 91       	ld	r24, X
    3f96:	98 17       	cp	r25, r24
    3f98:	08 f4       	brcc	.+2      	; 0x3f9c <main+0x11cc>
    3f9a:	23 cc       	rjmp	.-1978   	; 0x37e2 <main+0xa12>
					LOC_U8ResetFlag=1;
					LOC_U8CalcFlag=0;
					break;
				}
			}
			if(LOC_U8NegNO==1)
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e0 5a       	subi	r30, 0xA0	; 160
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 81       	ld	r24, Z
    3fa4:	81 30       	cpi	r24, 0x01	; 1
    3fa6:	81 f5       	brne	.+96     	; 0x4008 <main+0x1238>
			{
				LOC_U8NegNO=0;
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e0 5a       	subi	r30, 0xA0	; 160
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	10 82       	st	Z, r1
				LOC_F32Equation[LOC_U8P]*=(-1.0);/*if negative flag opened ->Add negative sign to this number*/
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e2 59       	subi	r30, 0x92	; 146
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	08 2f       	mov	r16, r24
    3fba:	10 e0       	ldi	r17, 0x00	; 0
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e2 59       	subi	r30, 0x92	; 146
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	80 81       	ld	r24, Z
    3fc4:	88 2f       	mov	r24, r24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	9e 01       	movw	r18, r28
    3fca:	2d 58       	subi	r18, 0x8D	; 141
    3fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fce:	88 0f       	add	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	88 0f       	add	r24, r24
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	f9 01       	movw	r30, r18
    3fd8:	e8 0f       	add	r30, r24
    3fda:	f9 1f       	adc	r31, r25
    3fdc:	80 81       	ld	r24, Z
    3fde:	91 81       	ldd	r25, Z+1	; 0x01
    3fe0:	a2 81       	ldd	r26, Z+2	; 0x02
    3fe2:	b3 81       	ldd	r27, Z+3	; 0x03
    3fe4:	9c 01       	movw	r18, r24
    3fe6:	ad 01       	movw	r20, r26
    3fe8:	50 58       	subi	r21, 0x80	; 128
    3fea:	be 01       	movw	r22, r28
    3fec:	6d 58       	subi	r22, 0x8D	; 141
    3fee:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	fb 01       	movw	r30, r22
    3ffc:	e8 0f       	add	r30, r24
    3ffe:	f9 1f       	adc	r31, r25
    4000:	20 83       	st	Z, r18
    4002:	31 83       	std	Z+1, r19	; 0x01
    4004:	42 83       	std	Z+2, r20	; 0x02
    4006:	53 83       	std	Z+3, r21	; 0x03
			}
		}
/************************************** CALCULATION FLAG *****************************************************/
		if(LOC_U8CalcFlag==1)
    4008:	fe 01       	movw	r30, r28
    400a:	e9 59       	subi	r30, 0x99	; 153
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	81 30       	cpi	r24, 0x01	; 1
    4012:	09 f0       	breq	.+2      	; 0x4016 <main+0x1246>
    4014:	f5 c4       	rjmp	.+2538   	; 0x4a00 <main+0x1c30>
		{
			/* if calculation flag open, calculate result by
			doing all multiply and divide operations (HIGH priority)
			doing all addition and subtraction operations (LOW priority)
			Display result*/
			LOC_U8CalcFlag=0;
    4016:	fe 01       	movw	r30, r28
    4018:	e9 59       	subi	r30, 0x99	; 153
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	10 82       	st	Z, r1
			LOC_U8Y=LOC_U8P/2; /* number of operations needed */
    401e:	de 01       	movw	r26, r28
    4020:	af 58       	subi	r26, 0x8F	; 143
    4022:	bf 4f       	sbci	r27, 0xFF	; 255
    4024:	fe 01       	movw	r30, r28
    4026:	e2 59       	subi	r30, 0x92	; 146
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	86 95       	lsr	r24
    402e:	8c 93       	st	X, r24
    4030:	3d c4       	rjmp	.+2170   	; 0x48ac <main+0x1adc>
			while(LOC_U8Y)
			{
			for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8P;LOC_U8i++)
    4032:	fe 01       	movw	r30, r28
    4034:	e6 5a       	subi	r30, 0xA6	; 166
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	10 82       	st	Z, r1
    403a:	5d c2       	rjmp	.+1210   	; 0x44f6 <main+0x1726>
			{
				if( LOC_F32Equation[LOC_U8i]=='*' && LOC_U8i%2 !=0)
    403c:	fe 01       	movw	r30, r28
    403e:	e6 5a       	subi	r30, 0xA6	; 166
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	80 81       	ld	r24, Z
    4044:	88 2f       	mov	r24, r24
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	9e 01       	movw	r18, r28
    404a:	2d 58       	subi	r18, 0x8D	; 141
    404c:	3f 4f       	sbci	r19, 0xFF	; 255
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	f9 01       	movw	r30, r18
    4058:	e8 0f       	add	r30, r24
    405a:	f9 1f       	adc	r31, r25
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	a2 81       	ldd	r26, Z+2	; 0x02
    4062:	b3 81       	ldd	r27, Z+3	; 0x03
    4064:	cc 59       	subi	r28, 0x9C	; 156
    4066:	de 4f       	sbci	r29, 0xFE	; 254
    4068:	18 82       	st	Y, r1
    406a:	c4 56       	subi	r28, 0x64	; 100
    406c:	d1 40       	sbci	r29, 0x01	; 1
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	48 e2       	ldi	r20, 0x28	; 40
    4078:	52 e4       	ldi	r21, 0x42	; 66
    407a:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    407e:	88 23       	and	r24, r24
    4080:	31 f4       	brne	.+12     	; 0x408e <main+0x12be>
    4082:	f1 e0       	ldi	r31, 0x01	; 1
    4084:	cc 59       	subi	r28, 0x9C	; 156
    4086:	de 4f       	sbci	r29, 0xFE	; 254
    4088:	f8 83       	st	Y, r31
    408a:	c4 56       	subi	r28, 0x64	; 100
    408c:	d1 40       	sbci	r29, 0x01	; 1
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	cc 59       	subi	r28, 0x9C	; 156
    4092:	de 4f       	sbci	r29, 0xFE	; 254
    4094:	98 81       	ld	r25, Y
    4096:	c4 56       	subi	r28, 0x64	; 100
    4098:	d1 40       	sbci	r29, 0x01	; 1
    409a:	89 27       	eor	r24, r25
    409c:	88 23       	and	r24, r24
    409e:	09 f0       	breq	.+2      	; 0x40a2 <main+0x12d2>
    40a0:	ae c0       	rjmp	.+348    	; 0x41fe <main+0x142e>
    40a2:	fe 01       	movw	r30, r28
    40a4:	e6 5a       	subi	r30, 0xA6	; 166
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	88 2f       	mov	r24, r24
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	81 70       	andi	r24, 0x01	; 1
    40b0:	90 70       	andi	r25, 0x00	; 0
    40b2:	98 2f       	mov	r25, r24
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	89 27       	eor	r24, r25
    40b8:	88 23       	and	r24, r24
    40ba:	09 f0       	breq	.+2      	; 0x40be <main+0x12ee>
    40bc:	a0 c0       	rjmp	.+320    	; 0x41fe <main+0x142e>
				{
					LOC_F32Equation[LOC_U8i-1]*=LOC_F32Equation[LOC_U8i+1];
    40be:	fe 01       	movw	r30, r28
    40c0:	e6 5a       	subi	r30, 0xA6	; 166
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	80 81       	ld	r24, Z
    40c6:	88 2f       	mov	r24, r24
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	6c 01       	movw	r12, r24
    40cc:	08 94       	sec
    40ce:	c1 08       	sbc	r12, r1
    40d0:	d1 08       	sbc	r13, r1
    40d2:	fe 01       	movw	r30, r28
    40d4:	e6 5a       	subi	r30, 0xA6	; 166
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	80 81       	ld	r24, Z
    40da:	88 2f       	mov	r24, r24
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	9e 01       	movw	r18, r28
    40e2:	2d 58       	subi	r18, 0x8D	; 141
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	88 0f       	add	r24, r24
    40e8:	99 1f       	adc	r25, r25
    40ea:	88 0f       	add	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	f9 01       	movw	r30, r18
    40f0:	e8 0f       	add	r30, r24
    40f2:	f9 1f       	adc	r31, r25
    40f4:	e0 80       	ld	r14, Z
    40f6:	f1 80       	ldd	r15, Z+1	; 0x01
    40f8:	02 81       	ldd	r16, Z+2	; 0x02
    40fa:	13 81       	ldd	r17, Z+3	; 0x03
    40fc:	fe 01       	movw	r30, r28
    40fe:	e6 5a       	subi	r30, 0xA6	; 166
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 81       	ld	r24, Z
    4104:	88 2f       	mov	r24, r24
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	01 96       	adiw	r24, 0x01	; 1
    410a:	9e 01       	movw	r18, r28
    410c:	2d 58       	subi	r18, 0x8D	; 141
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	88 0f       	add	r24, r24
    4112:	99 1f       	adc	r25, r25
    4114:	88 0f       	add	r24, r24
    4116:	99 1f       	adc	r25, r25
    4118:	f9 01       	movw	r30, r18
    411a:	e8 0f       	add	r30, r24
    411c:	f9 1f       	adc	r31, r25
    411e:	20 81       	ld	r18, Z
    4120:	31 81       	ldd	r19, Z+1	; 0x01
    4122:	42 81       	ldd	r20, Z+2	; 0x02
    4124:	53 81       	ldd	r21, Z+3	; 0x03
    4126:	c8 01       	movw	r24, r16
    4128:	b7 01       	movw	r22, r14
    412a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    412e:	dc 01       	movw	r26, r24
    4130:	cb 01       	movw	r24, r22
    4132:	9c 01       	movw	r18, r24
    4134:	ad 01       	movw	r20, r26
    4136:	be 01       	movw	r22, r28
    4138:	6d 58       	subi	r22, 0x8D	; 141
    413a:	7f 4f       	sbci	r23, 0xFF	; 255
    413c:	c6 01       	movw	r24, r12
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	fb 01       	movw	r30, r22
    4148:	e8 0f       	add	r30, r24
    414a:	f9 1f       	adc	r31, r25
    414c:	20 83       	st	Z, r18
    414e:	31 83       	std	Z+1, r19	; 0x01
    4150:	42 83       	std	Z+2, r20	; 0x02
    4152:	53 83       	std	Z+3, r21	; 0x03
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    4154:	de 01       	movw	r26, r28
    4156:	a7 5a       	subi	r26, 0xA7	; 167
    4158:	bf 4f       	sbci	r27, 0xFF	; 255
    415a:	fe 01       	movw	r30, r28
    415c:	e6 5a       	subi	r30, 0xA6	; 166
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	80 81       	ld	r24, Z
    4162:	8c 93       	st	X, r24
    4164:	33 c0       	rjmp	.+102    	; 0x41cc <main+0x13fc>
						 * Shift remaining elements in array in space area
						 ex: 32 + 5 * 12 + 3
						     32 + 60     + 3
						     32 + 60 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
    4166:	fe 01       	movw	r30, r28
    4168:	e7 5a       	subi	r30, 0xA7	; 167
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	a8 2f       	mov	r26, r24
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	fe 01       	movw	r30, r28
    4174:	e7 5a       	subi	r30, 0xA7	; 167
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	02 96       	adiw	r24, 0x02	; 2
    4180:	9e 01       	movw	r18, r28
    4182:	2d 58       	subi	r18, 0x8D	; 141
    4184:	3f 4f       	sbci	r19, 0xFF	; 255
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	88 0f       	add	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	f9 01       	movw	r30, r18
    4190:	e8 0f       	add	r30, r24
    4192:	f9 1f       	adc	r31, r25
    4194:	20 81       	ld	r18, Z
    4196:	31 81       	ldd	r19, Z+1	; 0x01
    4198:	42 81       	ldd	r20, Z+2	; 0x02
    419a:	53 81       	ldd	r21, Z+3	; 0x03
    419c:	be 01       	movw	r22, r28
    419e:	6d 58       	subi	r22, 0x8D	; 141
    41a0:	7f 4f       	sbci	r23, 0xFF	; 255
    41a2:	cd 01       	movw	r24, r26
    41a4:	88 0f       	add	r24, r24
    41a6:	99 1f       	adc	r25, r25
    41a8:	88 0f       	add	r24, r24
    41aa:	99 1f       	adc	r25, r25
    41ac:	fb 01       	movw	r30, r22
    41ae:	e8 0f       	add	r30, r24
    41b0:	f9 1f       	adc	r31, r25
    41b2:	20 83       	st	Z, r18
    41b4:	31 83       	std	Z+1, r19	; 0x01
    41b6:	42 83       	std	Z+2, r20	; 0x02
    41b8:	53 83       	std	Z+3, r21	; 0x03
			for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8P;LOC_U8i++)
			{
				if( LOC_F32Equation[LOC_U8i]=='*' && LOC_U8i%2 !=0)
				{
					LOC_F32Equation[LOC_U8i-1]*=LOC_F32Equation[LOC_U8i+1];
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    41ba:	de 01       	movw	r26, r28
    41bc:	a7 5a       	subi	r26, 0xA7	; 167
    41be:	bf 4f       	sbci	r27, 0xFF	; 255
    41c0:	fe 01       	movw	r30, r28
    41c2:	e7 5a       	subi	r30, 0xA7	; 167
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	80 81       	ld	r24, Z
    41c8:	8f 5f       	subi	r24, 0xFF	; 255
    41ca:	8c 93       	st	X, r24
    41cc:	fe 01       	movw	r30, r28
    41ce:	e7 5a       	subi	r30, 0xA7	; 167
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	de 01       	movw	r26, r28
    41d4:	a2 59       	subi	r26, 0x92	; 146
    41d6:	bf 4f       	sbci	r27, 0xFF	; 255
    41d8:	90 81       	ld	r25, Z
    41da:	8c 91       	ld	r24, X
    41dc:	89 17       	cp	r24, r25
    41de:	18 f6       	brcc	.-122    	; 0x4166 <main+0x1396>
						     32 + 60     + 3
						     32 + 60 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
					}
					LOC_U8Y--;
    41e0:	de 01       	movw	r26, r28
    41e2:	af 58       	subi	r26, 0x8F	; 143
    41e4:	bf 4f       	sbci	r27, 0xFF	; 255
    41e6:	fe 01       	movw	r30, r28
    41e8:	ef 58       	subi	r30, 0x8F	; 143
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	81 50       	subi	r24, 0x01	; 1
    41f0:	8c 93       	st	X, r24
					LOC_U8X=1;
    41f2:	fe 01       	movw	r30, r28
    41f4:	e0 59       	subi	r30, 0x90	; 144
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	80 83       	st	Z, r24
    41fc:	87 c1       	rjmp	.+782    	; 0x450c <main+0x173c>
					/* to prevent entering second for loop (in which addition and subtraction)
					until all multiply and divide operations end  so it continues in while loop*/
					break;
				}
				else if(LOC_F32Equation[LOC_U8i]=='/' && LOC_U8i%2 !=0)
    41fe:	fe 01       	movw	r30, r28
    4200:	e6 5a       	subi	r30, 0xA6	; 166
    4202:	ff 4f       	sbci	r31, 0xFF	; 255
    4204:	80 81       	ld	r24, Z
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9e 01       	movw	r18, r28
    420c:	2d 58       	subi	r18, 0x8D	; 141
    420e:	3f 4f       	sbci	r19, 0xFF	; 255
    4210:	88 0f       	add	r24, r24
    4212:	99 1f       	adc	r25, r25
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	f9 01       	movw	r30, r18
    421a:	e8 0f       	add	r30, r24
    421c:	f9 1f       	adc	r31, r25
    421e:	80 81       	ld	r24, Z
    4220:	91 81       	ldd	r25, Z+1	; 0x01
    4222:	a2 81       	ldd	r26, Z+2	; 0x02
    4224:	b3 81       	ldd	r27, Z+3	; 0x03
    4226:	bc 01       	movw	r22, r24
    4228:	cd 01       	movw	r24, r26
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	4c e3       	ldi	r20, 0x3C	; 60
    4230:	52 e4       	ldi	r21, 0x42	; 66
    4232:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4236:	88 23       	and	r24, r24
    4238:	09 f0       	breq	.+2      	; 0x423c <main+0x146c>
    423a:	54 c1       	rjmp	.+680    	; 0x44e4 <main+0x1714>
    423c:	fe 01       	movw	r30, r28
    423e:	e6 5a       	subi	r30, 0xA6	; 166
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 81       	ld	r24, Z
    4244:	88 2f       	mov	r24, r24
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	81 70       	andi	r24, 0x01	; 1
    424a:	90 70       	andi	r25, 0x00	; 0
    424c:	88 23       	and	r24, r24
    424e:	09 f4       	brne	.+2      	; 0x4252 <main+0x1482>
    4250:	49 c1       	rjmp	.+658    	; 0x44e4 <main+0x1714>
				{
/************************************** TESTCASE *******************************************************/
					if(LOC_F32Equation[LOC_U8i+1]==0)
    4252:	fe 01       	movw	r30, r28
    4254:	e6 5a       	subi	r30, 0xA6	; 166
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	80 81       	ld	r24, Z
    425a:	88 2f       	mov	r24, r24
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	01 96       	adiw	r24, 0x01	; 1
    4260:	9e 01       	movw	r18, r28
    4262:	2d 58       	subi	r18, 0x8D	; 141
    4264:	3f 4f       	sbci	r19, 0xFF	; 255
    4266:	88 0f       	add	r24, r24
    4268:	99 1f       	adc	r25, r25
    426a:	88 0f       	add	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	f9 01       	movw	r30, r18
    4270:	e8 0f       	add	r30, r24
    4272:	f9 1f       	adc	r31, r25
    4274:	80 81       	ld	r24, Z
    4276:	91 81       	ldd	r25, Z+1	; 0x01
    4278:	a2 81       	ldd	r26, Z+2	; 0x02
    427a:	b3 81       	ldd	r27, Z+3	; 0x03
    427c:	bc 01       	movw	r22, r24
    427e:	cd 01       	movw	r24, r26
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e0       	ldi	r20, 0x00	; 0
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    428c:	88 23       	and	r24, r24
    428e:	09 f0       	breq	.+2      	; 0x4292 <main+0x14c2>
    4290:	89 c0       	rjmp	.+274    	; 0x43a4 <main+0x15d4>
					{
						/* Give Error to user and reset when divide on zero(No Meaning) */
						LCD_VidGoToLocation(1,11);
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	6b e0       	ldi	r22, 0x0B	; 11
    4296:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
						LCD_VidSendDatastring("ERROR");
    429a:	80 e6       	ldi	r24, 0x60	; 96
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	aa e7       	ldi	r26, 0x7A	; 122
    42a8:	b4 e4       	ldi	r27, 0x44	; 68
    42aa:	8f a3       	std	Y+39, r24	; 0x27
    42ac:	98 a7       	std	Y+40, r25	; 0x28
    42ae:	a9 a7       	std	Y+41, r26	; 0x29
    42b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b2:	6f a1       	ldd	r22, Y+39	; 0x27
    42b4:	78 a5       	ldd	r23, Y+40	; 0x28
    42b6:	89 a5       	ldd	r24, Y+41	; 0x29
    42b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	4a ef       	ldi	r20, 0xFA	; 250
    42c0:	54 e4       	ldi	r21, 0x44	; 68
    42c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	8b a3       	std	Y+35, r24	; 0x23
    42cc:	9c a3       	std	Y+36, r25	; 0x24
    42ce:	ad a3       	std	Y+37, r26	; 0x25
    42d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42d2:	6b a1       	ldd	r22, Y+35	; 0x23
    42d4:	7c a1       	ldd	r23, Y+36	; 0x24
    42d6:	8d a1       	ldd	r24, Y+37	; 0x25
    42d8:	9e a1       	ldd	r25, Y+38	; 0x26
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e8       	ldi	r20, 0x80	; 128
    42e0:	5f e3       	ldi	r21, 0x3F	; 63
    42e2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    42e6:	88 23       	and	r24, r24
    42e8:	2c f4       	brge	.+10     	; 0x42f4 <main+0x1524>
		__ticks = 1;
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	9a a3       	std	Y+34, r25	; 0x22
    42f0:	89 a3       	std	Y+33, r24	; 0x21
    42f2:	3f c0       	rjmp	.+126    	; 0x4372 <main+0x15a2>
	else if (__tmp > 65535)
    42f4:	6b a1       	ldd	r22, Y+35	; 0x23
    42f6:	7c a1       	ldd	r23, Y+36	; 0x24
    42f8:	8d a1       	ldd	r24, Y+37	; 0x25
    42fa:	9e a1       	ldd	r25, Y+38	; 0x26
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	3f ef       	ldi	r19, 0xFF	; 255
    4300:	4f e7       	ldi	r20, 0x7F	; 127
    4302:	57 e4       	ldi	r21, 0x47	; 71
    4304:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4308:	18 16       	cp	r1, r24
    430a:	4c f5       	brge	.+82     	; 0x435e <main+0x158e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    430c:	6f a1       	ldd	r22, Y+39	; 0x27
    430e:	78 a5       	ldd	r23, Y+40	; 0x28
    4310:	89 a5       	ldd	r24, Y+41	; 0x29
    4312:	9a a5       	ldd	r25, Y+42	; 0x2a
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	40 e2       	ldi	r20, 0x20	; 32
    431a:	51 e4       	ldi	r21, 0x41	; 65
    431c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	bc 01       	movw	r22, r24
    4326:	cd 01       	movw	r24, r26
    4328:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	9a a3       	std	Y+34, r25	; 0x22
    4332:	89 a3       	std	Y+33, r24	; 0x21
    4334:	0f c0       	rjmp	.+30     	; 0x4354 <main+0x1584>
    4336:	88 ec       	ldi	r24, 0xC8	; 200
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	98 a3       	std	Y+32, r25	; 0x20
    433c:	8f 8f       	std	Y+31, r24	; 0x1f
    433e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4340:	98 a1       	ldd	r25, Y+32	; 0x20
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	f1 f7       	brne	.-4      	; 0x4342 <main+0x1572>
    4346:	98 a3       	std	Y+32, r25	; 0x20
    4348:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    434a:	89 a1       	ldd	r24, Y+33	; 0x21
    434c:	9a a1       	ldd	r25, Y+34	; 0x22
    434e:	01 97       	sbiw	r24, 0x01	; 1
    4350:	9a a3       	std	Y+34, r25	; 0x22
    4352:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4354:	89 a1       	ldd	r24, Y+33	; 0x21
    4356:	9a a1       	ldd	r25, Y+34	; 0x22
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	69 f7       	brne	.-38     	; 0x4336 <main+0x1566>
    435c:	14 c0       	rjmp	.+40     	; 0x4386 <main+0x15b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435e:	6b a1       	ldd	r22, Y+35	; 0x23
    4360:	7c a1       	ldd	r23, Y+36	; 0x24
    4362:	8d a1       	ldd	r24, Y+37	; 0x25
    4364:	9e a1       	ldd	r25, Y+38	; 0x26
    4366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	9a a3       	std	Y+34, r25	; 0x22
    4370:	89 a3       	std	Y+33, r24	; 0x21
    4372:	89 a1       	ldd	r24, Y+33	; 0x21
    4374:	9a a1       	ldd	r25, Y+34	; 0x22
    4376:	9e 8f       	std	Y+30, r25	; 0x1e
    4378:	8d 8f       	std	Y+29, r24	; 0x1d
    437a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    437c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	f1 f7       	brne	.-4      	; 0x437e <main+0x15ae>
    4382:	9e 8f       	std	Y+30, r25	; 0x1e
    4384:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						LCD_VidClearData();
    4386:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
						LCD_VidSetDataLocation();
    438a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
						LOC_U8ResetFlag=1;
    438e:	fe 01       	movw	r30, r28
    4390:	e8 59       	subi	r30, 0x98	; 152
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	80 83       	st	Z, r24
						LOC_U8End=1; /* to end while loop  */
    4398:	fe 01       	movw	r30, r28
    439a:	e1 59       	subi	r30, 0x91	; 145
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	80 83       	st	Z, r24
    43a2:	b4 c0       	rjmp	.+360    	; 0x450c <main+0x173c>
						break;
					}
					LOC_F32Equation[LOC_U8i-1]/=LOC_F32Equation[LOC_U8i+1];
    43a4:	fe 01       	movw	r30, r28
    43a6:	e6 5a       	subi	r30, 0xA6	; 166
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	80 81       	ld	r24, Z
    43ac:	88 2f       	mov	r24, r24
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	6c 01       	movw	r12, r24
    43b2:	08 94       	sec
    43b4:	c1 08       	sbc	r12, r1
    43b6:	d1 08       	sbc	r13, r1
    43b8:	fe 01       	movw	r30, r28
    43ba:	e6 5a       	subi	r30, 0xA6	; 166
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 81       	ld	r24, Z
    43c0:	88 2f       	mov	r24, r24
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	9e 01       	movw	r18, r28
    43c8:	2d 58       	subi	r18, 0x8D	; 141
    43ca:	3f 4f       	sbci	r19, 0xFF	; 255
    43cc:	88 0f       	add	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	88 0f       	add	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	f9 01       	movw	r30, r18
    43d6:	e8 0f       	add	r30, r24
    43d8:	f9 1f       	adc	r31, r25
    43da:	e0 80       	ld	r14, Z
    43dc:	f1 80       	ldd	r15, Z+1	; 0x01
    43de:	02 81       	ldd	r16, Z+2	; 0x02
    43e0:	13 81       	ldd	r17, Z+3	; 0x03
    43e2:	fe 01       	movw	r30, r28
    43e4:	e6 5a       	subi	r30, 0xA6	; 166
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	80 81       	ld	r24, Z
    43ea:	88 2f       	mov	r24, r24
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	01 96       	adiw	r24, 0x01	; 1
    43f0:	9e 01       	movw	r18, r28
    43f2:	2d 58       	subi	r18, 0x8D	; 141
    43f4:	3f 4f       	sbci	r19, 0xFF	; 255
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	88 0f       	add	r24, r24
    43fc:	99 1f       	adc	r25, r25
    43fe:	f9 01       	movw	r30, r18
    4400:	e8 0f       	add	r30, r24
    4402:	f9 1f       	adc	r31, r25
    4404:	20 81       	ld	r18, Z
    4406:	31 81       	ldd	r19, Z+1	; 0x01
    4408:	42 81       	ldd	r20, Z+2	; 0x02
    440a:	53 81       	ldd	r21, Z+3	; 0x03
    440c:	c8 01       	movw	r24, r16
    440e:	b7 01       	movw	r22, r14
    4410:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	9c 01       	movw	r18, r24
    441a:	ad 01       	movw	r20, r26
    441c:	be 01       	movw	r22, r28
    441e:	6d 58       	subi	r22, 0x8D	; 141
    4420:	7f 4f       	sbci	r23, 0xFF	; 255
    4422:	c6 01       	movw	r24, r12
    4424:	88 0f       	add	r24, r24
    4426:	99 1f       	adc	r25, r25
    4428:	88 0f       	add	r24, r24
    442a:	99 1f       	adc	r25, r25
    442c:	fb 01       	movw	r30, r22
    442e:	e8 0f       	add	r30, r24
    4430:	f9 1f       	adc	r31, r25
    4432:	20 83       	st	Z, r18
    4434:	31 83       	std	Z+1, r19	; 0x01
    4436:	42 83       	std	Z+2, r20	; 0x02
    4438:	53 83       	std	Z+3, r21	; 0x03
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    443a:	de 01       	movw	r26, r28
    443c:	a8 5a       	subi	r26, 0xA8	; 168
    443e:	bf 4f       	sbci	r27, 0xFF	; 255
    4440:	fe 01       	movw	r30, r28
    4442:	e6 5a       	subi	r30, 0xA6	; 166
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	80 81       	ld	r24, Z
    4448:	8c 93       	st	X, r24
    444a:	33 c0       	rjmp	.+102    	; 0x44b2 <main+0x16e2>
						 * Shift remaining elements in array in space area
						 ex: 32 + 60 / 12 + 3
						     32 + 5     + 3
						     32 + 5 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
    444c:	fe 01       	movw	r30, r28
    444e:	e8 5a       	subi	r30, 0xA8	; 168
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	a8 2f       	mov	r26, r24
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	fe 01       	movw	r30, r28
    445a:	e8 5a       	subi	r30, 0xA8	; 168
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	80 81       	ld	r24, Z
    4460:	88 2f       	mov	r24, r24
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	02 96       	adiw	r24, 0x02	; 2
    4466:	9e 01       	movw	r18, r28
    4468:	2d 58       	subi	r18, 0x8D	; 141
    446a:	3f 4f       	sbci	r19, 0xFF	; 255
    446c:	88 0f       	add	r24, r24
    446e:	99 1f       	adc	r25, r25
    4470:	88 0f       	add	r24, r24
    4472:	99 1f       	adc	r25, r25
    4474:	f9 01       	movw	r30, r18
    4476:	e8 0f       	add	r30, r24
    4478:	f9 1f       	adc	r31, r25
    447a:	20 81       	ld	r18, Z
    447c:	31 81       	ldd	r19, Z+1	; 0x01
    447e:	42 81       	ldd	r20, Z+2	; 0x02
    4480:	53 81       	ldd	r21, Z+3	; 0x03
    4482:	be 01       	movw	r22, r28
    4484:	6d 58       	subi	r22, 0x8D	; 141
    4486:	7f 4f       	sbci	r23, 0xFF	; 255
    4488:	cd 01       	movw	r24, r26
    448a:	88 0f       	add	r24, r24
    448c:	99 1f       	adc	r25, r25
    448e:	88 0f       	add	r24, r24
    4490:	99 1f       	adc	r25, r25
    4492:	fb 01       	movw	r30, r22
    4494:	e8 0f       	add	r30, r24
    4496:	f9 1f       	adc	r31, r25
    4498:	20 83       	st	Z, r18
    449a:	31 83       	std	Z+1, r19	; 0x01
    449c:	42 83       	std	Z+2, r20	; 0x02
    449e:	53 83       	std	Z+3, r21	; 0x03
						LOC_U8ResetFlag=1;
						LOC_U8End=1; /* to end while loop  */
						break;
					}
					LOC_F32Equation[LOC_U8i-1]/=LOC_F32Equation[LOC_U8i+1];
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    44a0:	de 01       	movw	r26, r28
    44a2:	a8 5a       	subi	r26, 0xA8	; 168
    44a4:	bf 4f       	sbci	r27, 0xFF	; 255
    44a6:	fe 01       	movw	r30, r28
    44a8:	e8 5a       	subi	r30, 0xA8	; 168
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	80 81       	ld	r24, Z
    44ae:	8f 5f       	subi	r24, 0xFF	; 255
    44b0:	8c 93       	st	X, r24
    44b2:	fe 01       	movw	r30, r28
    44b4:	e8 5a       	subi	r30, 0xA8	; 168
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	de 01       	movw	r26, r28
    44ba:	a2 59       	subi	r26, 0x92	; 146
    44bc:	bf 4f       	sbci	r27, 0xFF	; 255
    44be:	90 81       	ld	r25, Z
    44c0:	8c 91       	ld	r24, X
    44c2:	89 17       	cp	r24, r25
    44c4:	18 f6       	brcc	.-122    	; 0x444c <main+0x167c>
						     32 + 5     + 3
						     32 + 5 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
					}
					LOC_U8Y--;
    44c6:	de 01       	movw	r26, r28
    44c8:	af 58       	subi	r26, 0x8F	; 143
    44ca:	bf 4f       	sbci	r27, 0xFF	; 255
    44cc:	fe 01       	movw	r30, r28
    44ce:	ef 58       	subi	r30, 0x8F	; 143
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	81 50       	subi	r24, 0x01	; 1
    44d6:	8c 93       	st	X, r24
					LOC_U8X=1;
    44d8:	fe 01       	movw	r30, r28
    44da:	e0 59       	subi	r30, 0x90	; 144
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	80 83       	st	Z, r24
    44e2:	14 c0       	rjmp	.+40     	; 0x450c <main+0x173c>
			Display result*/
			LOC_U8CalcFlag=0;
			LOC_U8Y=LOC_U8P/2; /* number of operations needed */
			while(LOC_U8Y)
			{
			for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8P;LOC_U8i++)
    44e4:	de 01       	movw	r26, r28
    44e6:	a6 5a       	subi	r26, 0xA6	; 166
    44e8:	bf 4f       	sbci	r27, 0xFF	; 255
    44ea:	fe 01       	movw	r30, r28
    44ec:	e6 5a       	subi	r30, 0xA6	; 166
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	80 81       	ld	r24, Z
    44f2:	8f 5f       	subi	r24, 0xFF	; 255
    44f4:	8c 93       	st	X, r24
    44f6:	fe 01       	movw	r30, r28
    44f8:	e6 5a       	subi	r30, 0xA6	; 166
    44fa:	ff 4f       	sbci	r31, 0xFF	; 255
    44fc:	de 01       	movw	r26, r28
    44fe:	a2 59       	subi	r26, 0x92	; 146
    4500:	bf 4f       	sbci	r27, 0xFF	; 255
    4502:	90 81       	ld	r25, Z
    4504:	8c 91       	ld	r24, X
    4506:	89 17       	cp	r24, r25
    4508:	08 f0       	brcs	.+2      	; 0x450c <main+0x173c>
    450a:	98 cd       	rjmp	.-1232   	; 0x403c <main+0x126c>
					/* to prevent entering second for loop (in which addition and subtraction)
					until all multiply and divide operations end  so it continues in while loop*/
					break;
				}
			}
			if(LOC_U8End==1){LOC_U8End=0; break;}
    450c:	fe 01       	movw	r30, r28
    450e:	e1 59       	subi	r30, 0x91	; 145
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	81 30       	cpi	r24, 0x01	; 1
    4516:	29 f4       	brne	.+10     	; 0x4522 <main+0x1752>
    4518:	fe 01       	movw	r30, r28
    451a:	e1 59       	subi	r30, 0x91	; 145
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	10 82       	st	Z, r1
    4520:	cc c1       	rjmp	.+920    	; 0x48ba <main+0x1aea>
			if(LOC_U8X==1){LOC_U8X=0; continue;}
    4522:	fe 01       	movw	r30, r28
    4524:	e0 59       	subi	r30, 0x90	; 144
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	80 81       	ld	r24, Z
    452a:	81 30       	cpi	r24, 0x01	; 1
    452c:	29 f4       	brne	.+10     	; 0x4538 <main+0x1768>
    452e:	fe 01       	movw	r30, r28
    4530:	e0 59       	subi	r30, 0x90	; 144
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	10 82       	st	Z, r1
    4536:	ba c1       	rjmp	.+884    	; 0x48ac <main+0x1adc>
			for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8P;LOC_U8i++)
    4538:	fe 01       	movw	r30, r28
    453a:	e9 5a       	subi	r30, 0xA9	; 169
    453c:	ff 4f       	sbci	r31, 0xFF	; 255
    453e:	10 82       	st	Z, r1
    4540:	aa c1       	rjmp	.+852    	; 0x4896 <main+0x1ac6>
			{
				if(LOC_F32Equation[LOC_U8i]=='+' && LOC_U8i%2 !=0)
    4542:	fe 01       	movw	r30, r28
    4544:	e9 5a       	subi	r30, 0xA9	; 169
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	80 81       	ld	r24, Z
    454a:	88 2f       	mov	r24, r24
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	9e 01       	movw	r18, r28
    4550:	2d 58       	subi	r18, 0x8D	; 141
    4552:	3f 4f       	sbci	r19, 0xFF	; 255
    4554:	88 0f       	add	r24, r24
    4556:	99 1f       	adc	r25, r25
    4558:	88 0f       	add	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	f9 01       	movw	r30, r18
    455e:	e8 0f       	add	r30, r24
    4560:	f9 1f       	adc	r31, r25
    4562:	80 81       	ld	r24, Z
    4564:	91 81       	ldd	r25, Z+1	; 0x01
    4566:	a2 81       	ldd	r26, Z+2	; 0x02
    4568:	b3 81       	ldd	r27, Z+3	; 0x03
    456a:	cd 59       	subi	r28, 0x9D	; 157
    456c:	de 4f       	sbci	r29, 0xFE	; 254
    456e:	18 82       	st	Y, r1
    4570:	c3 56       	subi	r28, 0x63	; 99
    4572:	d1 40       	sbci	r29, 0x01	; 1
    4574:	bc 01       	movw	r22, r24
    4576:	cd 01       	movw	r24, r26
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	4c e2       	ldi	r20, 0x2C	; 44
    457e:	52 e4       	ldi	r21, 0x42	; 66
    4580:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4584:	88 23       	and	r24, r24
    4586:	31 f4       	brne	.+12     	; 0x4594 <main+0x17c4>
    4588:	a1 e0       	ldi	r26, 0x01	; 1
    458a:	cd 59       	subi	r28, 0x9D	; 157
    458c:	de 4f       	sbci	r29, 0xFE	; 254
    458e:	a8 83       	st	Y, r26
    4590:	c3 56       	subi	r28, 0x63	; 99
    4592:	d1 40       	sbci	r29, 0x01	; 1
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	cd 59       	subi	r28, 0x9D	; 157
    4598:	de 4f       	sbci	r29, 0xFE	; 254
    459a:	b8 81       	ld	r27, Y
    459c:	c3 56       	subi	r28, 0x63	; 99
    459e:	d1 40       	sbci	r29, 0x01	; 1
    45a0:	8b 27       	eor	r24, r27
    45a2:	88 23       	and	r24, r24
    45a4:	09 f0       	breq	.+2      	; 0x45a8 <main+0x17d8>
    45a6:	a9 c0       	rjmp	.+338    	; 0x46fa <main+0x192a>
    45a8:	fe 01       	movw	r30, r28
    45aa:	e9 5a       	subi	r30, 0xA9	; 169
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	80 81       	ld	r24, Z
    45b0:	88 2f       	mov	r24, r24
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	81 70       	andi	r24, 0x01	; 1
    45b6:	90 70       	andi	r25, 0x00	; 0
    45b8:	98 2f       	mov	r25, r24
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	89 27       	eor	r24, r25
    45be:	88 23       	and	r24, r24
    45c0:	09 f0       	breq	.+2      	; 0x45c4 <main+0x17f4>
    45c2:	9b c0       	rjmp	.+310    	; 0x46fa <main+0x192a>
				{
					LOC_F32Equation[LOC_U8i-1]+=LOC_F32Equation[LOC_U8i+1];
    45c4:	fe 01       	movw	r30, r28
    45c6:	e9 5a       	subi	r30, 0xA9	; 169
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	80 81       	ld	r24, Z
    45cc:	88 2f       	mov	r24, r24
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	6c 01       	movw	r12, r24
    45d2:	08 94       	sec
    45d4:	c1 08       	sbc	r12, r1
    45d6:	d1 08       	sbc	r13, r1
    45d8:	fe 01       	movw	r30, r28
    45da:	e9 5a       	subi	r30, 0xA9	; 169
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	80 81       	ld	r24, Z
    45e0:	88 2f       	mov	r24, r24
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9e 01       	movw	r18, r28
    45e8:	2d 58       	subi	r18, 0x8D	; 141
    45ea:	3f 4f       	sbci	r19, 0xFF	; 255
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	88 0f       	add	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	f9 01       	movw	r30, r18
    45f6:	e8 0f       	add	r30, r24
    45f8:	f9 1f       	adc	r31, r25
    45fa:	e0 80       	ld	r14, Z
    45fc:	f1 80       	ldd	r15, Z+1	; 0x01
    45fe:	02 81       	ldd	r16, Z+2	; 0x02
    4600:	13 81       	ldd	r17, Z+3	; 0x03
    4602:	fe 01       	movw	r30, r28
    4604:	e9 5a       	subi	r30, 0xA9	; 169
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 81       	ld	r24, Z
    460a:	88 2f       	mov	r24, r24
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	01 96       	adiw	r24, 0x01	; 1
    4610:	9e 01       	movw	r18, r28
    4612:	2d 58       	subi	r18, 0x8D	; 141
    4614:	3f 4f       	sbci	r19, 0xFF	; 255
    4616:	88 0f       	add	r24, r24
    4618:	99 1f       	adc	r25, r25
    461a:	88 0f       	add	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	f9 01       	movw	r30, r18
    4620:	e8 0f       	add	r30, r24
    4622:	f9 1f       	adc	r31, r25
    4624:	20 81       	ld	r18, Z
    4626:	31 81       	ldd	r19, Z+1	; 0x01
    4628:	42 81       	ldd	r20, Z+2	; 0x02
    462a:	53 81       	ldd	r21, Z+3	; 0x03
    462c:	c8 01       	movw	r24, r16
    462e:	b7 01       	movw	r22, r14
    4630:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	9c 01       	movw	r18, r24
    463a:	ad 01       	movw	r20, r26
    463c:	be 01       	movw	r22, r28
    463e:	6d 58       	subi	r22, 0x8D	; 141
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	c6 01       	movw	r24, r12
    4644:	88 0f       	add	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	88 0f       	add	r24, r24
    464a:	99 1f       	adc	r25, r25
    464c:	fb 01       	movw	r30, r22
    464e:	e8 0f       	add	r30, r24
    4650:	f9 1f       	adc	r31, r25
    4652:	20 83       	st	Z, r18
    4654:	31 83       	std	Z+1, r19	; 0x01
    4656:	42 83       	std	Z+2, r20	; 0x02
    4658:	53 83       	std	Z+3, r21	; 0x03
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    465a:	de 01       	movw	r26, r28
    465c:	aa 5a       	subi	r26, 0xAA	; 170
    465e:	bf 4f       	sbci	r27, 0xFF	; 255
    4660:	fe 01       	movw	r30, r28
    4662:	e9 5a       	subi	r30, 0xA9	; 169
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	8c 93       	st	X, r24
    466a:	33 c0       	rjmp	.+102    	; 0x46d2 <main+0x1902>
						 * Shift remaining elements in array in space area
						 ex: 32 + 12 + 3
						     44      + 3
						     44 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
    466c:	fe 01       	movw	r30, r28
    466e:	ea 5a       	subi	r30, 0xAA	; 170
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	80 81       	ld	r24, Z
    4674:	a8 2f       	mov	r26, r24
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	fe 01       	movw	r30, r28
    467a:	ea 5a       	subi	r30, 0xAA	; 170
    467c:	ff 4f       	sbci	r31, 0xFF	; 255
    467e:	80 81       	ld	r24, Z
    4680:	88 2f       	mov	r24, r24
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	02 96       	adiw	r24, 0x02	; 2
    4686:	9e 01       	movw	r18, r28
    4688:	2d 58       	subi	r18, 0x8D	; 141
    468a:	3f 4f       	sbci	r19, 0xFF	; 255
    468c:	88 0f       	add	r24, r24
    468e:	99 1f       	adc	r25, r25
    4690:	88 0f       	add	r24, r24
    4692:	99 1f       	adc	r25, r25
    4694:	f9 01       	movw	r30, r18
    4696:	e8 0f       	add	r30, r24
    4698:	f9 1f       	adc	r31, r25
    469a:	20 81       	ld	r18, Z
    469c:	31 81       	ldd	r19, Z+1	; 0x01
    469e:	42 81       	ldd	r20, Z+2	; 0x02
    46a0:	53 81       	ldd	r21, Z+3	; 0x03
    46a2:	be 01       	movw	r22, r28
    46a4:	6d 58       	subi	r22, 0x8D	; 141
    46a6:	7f 4f       	sbci	r23, 0xFF	; 255
    46a8:	cd 01       	movw	r24, r26
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	88 0f       	add	r24, r24
    46b0:	99 1f       	adc	r25, r25
    46b2:	fb 01       	movw	r30, r22
    46b4:	e8 0f       	add	r30, r24
    46b6:	f9 1f       	adc	r31, r25
    46b8:	20 83       	st	Z, r18
    46ba:	31 83       	std	Z+1, r19	; 0x01
    46bc:	42 83       	std	Z+2, r20	; 0x02
    46be:	53 83       	std	Z+3, r21	; 0x03
			for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8P;LOC_U8i++)
			{
				if(LOC_F32Equation[LOC_U8i]=='+' && LOC_U8i%2 !=0)
				{
					LOC_F32Equation[LOC_U8i-1]+=LOC_F32Equation[LOC_U8i+1];
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    46c0:	de 01       	movw	r26, r28
    46c2:	aa 5a       	subi	r26, 0xAA	; 170
    46c4:	bf 4f       	sbci	r27, 0xFF	; 255
    46c6:	fe 01       	movw	r30, r28
    46c8:	ea 5a       	subi	r30, 0xAA	; 170
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	80 81       	ld	r24, Z
    46ce:	8f 5f       	subi	r24, 0xFF	; 255
    46d0:	8c 93       	st	X, r24
    46d2:	fe 01       	movw	r30, r28
    46d4:	ea 5a       	subi	r30, 0xAA	; 170
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	de 01       	movw	r26, r28
    46da:	a2 59       	subi	r26, 0x92	; 146
    46dc:	bf 4f       	sbci	r27, 0xFF	; 255
    46de:	90 81       	ld	r25, Z
    46e0:	8c 91       	ld	r24, X
    46e2:	89 17       	cp	r24, r25
    46e4:	18 f6       	brcc	.-122    	; 0x466c <main+0x189c>
						     44      + 3
						     44 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
					}
					LOC_U8Y--;
    46e6:	de 01       	movw	r26, r28
    46e8:	af 58       	subi	r26, 0x8F	; 143
    46ea:	bf 4f       	sbci	r27, 0xFF	; 255
    46ec:	fe 01       	movw	r30, r28
    46ee:	ef 58       	subi	r30, 0x8F	; 143
    46f0:	ff 4f       	sbci	r31, 0xFF	; 255
    46f2:	80 81       	ld	r24, Z
    46f4:	81 50       	subi	r24, 0x01	; 1
    46f6:	8c 93       	st	X, r24
    46f8:	d9 c0       	rjmp	.+434    	; 0x48ac <main+0x1adc>
					break;
				}
				else if(LOC_F32Equation[LOC_U8i]=='-' && LOC_U8i%2 !=0)
    46fa:	fe 01       	movw	r30, r28
    46fc:	e9 5a       	subi	r30, 0xA9	; 169
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	80 81       	ld	r24, Z
    4702:	88 2f       	mov	r24, r24
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	9e 01       	movw	r18, r28
    4708:	2d 58       	subi	r18, 0x8D	; 141
    470a:	3f 4f       	sbci	r19, 0xFF	; 255
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	88 0f       	add	r24, r24
    4712:	99 1f       	adc	r25, r25
    4714:	f9 01       	movw	r30, r18
    4716:	e8 0f       	add	r30, r24
    4718:	f9 1f       	adc	r31, r25
    471a:	80 81       	ld	r24, Z
    471c:	91 81       	ldd	r25, Z+1	; 0x01
    471e:	a2 81       	ldd	r26, Z+2	; 0x02
    4720:	b3 81       	ldd	r27, Z+3	; 0x03
    4722:	bc 01       	movw	r22, r24
    4724:	cd 01       	movw	r24, r26
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	44 e3       	ldi	r20, 0x34	; 52
    472c:	52 e4       	ldi	r21, 0x42	; 66
    472e:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4732:	88 23       	and	r24, r24
    4734:	09 f0       	breq	.+2      	; 0x4738 <main+0x1968>
    4736:	a6 c0       	rjmp	.+332    	; 0x4884 <main+0x1ab4>
    4738:	fe 01       	movw	r30, r28
    473a:	e9 5a       	subi	r30, 0xA9	; 169
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	80 81       	ld	r24, Z
    4740:	88 2f       	mov	r24, r24
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	81 70       	andi	r24, 0x01	; 1
    4746:	90 70       	andi	r25, 0x00	; 0
    4748:	88 23       	and	r24, r24
    474a:	09 f4       	brne	.+2      	; 0x474e <main+0x197e>
    474c:	9b c0       	rjmp	.+310    	; 0x4884 <main+0x1ab4>
				{
					LOC_F32Equation[LOC_U8i-1]-=LOC_F32Equation[LOC_U8i+1];
    474e:	fe 01       	movw	r30, r28
    4750:	e9 5a       	subi	r30, 0xA9	; 169
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	88 2f       	mov	r24, r24
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	6c 01       	movw	r12, r24
    475c:	08 94       	sec
    475e:	c1 08       	sbc	r12, r1
    4760:	d1 08       	sbc	r13, r1
    4762:	fe 01       	movw	r30, r28
    4764:	e9 5a       	subi	r30, 0xA9	; 169
    4766:	ff 4f       	sbci	r31, 0xFF	; 255
    4768:	80 81       	ld	r24, Z
    476a:	88 2f       	mov	r24, r24
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	01 97       	sbiw	r24, 0x01	; 1
    4770:	9e 01       	movw	r18, r28
    4772:	2d 58       	subi	r18, 0x8D	; 141
    4774:	3f 4f       	sbci	r19, 0xFF	; 255
    4776:	88 0f       	add	r24, r24
    4778:	99 1f       	adc	r25, r25
    477a:	88 0f       	add	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	f9 01       	movw	r30, r18
    4780:	e8 0f       	add	r30, r24
    4782:	f9 1f       	adc	r31, r25
    4784:	e0 80       	ld	r14, Z
    4786:	f1 80       	ldd	r15, Z+1	; 0x01
    4788:	02 81       	ldd	r16, Z+2	; 0x02
    478a:	13 81       	ldd	r17, Z+3	; 0x03
    478c:	fe 01       	movw	r30, r28
    478e:	e9 5a       	subi	r30, 0xA9	; 169
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	80 81       	ld	r24, Z
    4794:	88 2f       	mov	r24, r24
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	01 96       	adiw	r24, 0x01	; 1
    479a:	9e 01       	movw	r18, r28
    479c:	2d 58       	subi	r18, 0x8D	; 141
    479e:	3f 4f       	sbci	r19, 0xFF	; 255
    47a0:	88 0f       	add	r24, r24
    47a2:	99 1f       	adc	r25, r25
    47a4:	88 0f       	add	r24, r24
    47a6:	99 1f       	adc	r25, r25
    47a8:	f9 01       	movw	r30, r18
    47aa:	e8 0f       	add	r30, r24
    47ac:	f9 1f       	adc	r31, r25
    47ae:	20 81       	ld	r18, Z
    47b0:	31 81       	ldd	r19, Z+1	; 0x01
    47b2:	42 81       	ldd	r20, Z+2	; 0x02
    47b4:	53 81       	ldd	r21, Z+3	; 0x03
    47b6:	c8 01       	movw	r24, r16
    47b8:	b7 01       	movw	r22, r14
    47ba:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	9c 01       	movw	r18, r24
    47c4:	ad 01       	movw	r20, r26
    47c6:	be 01       	movw	r22, r28
    47c8:	6d 58       	subi	r22, 0x8D	; 141
    47ca:	7f 4f       	sbci	r23, 0xFF	; 255
    47cc:	c6 01       	movw	r24, r12
    47ce:	88 0f       	add	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	88 0f       	add	r24, r24
    47d4:	99 1f       	adc	r25, r25
    47d6:	fb 01       	movw	r30, r22
    47d8:	e8 0f       	add	r30, r24
    47da:	f9 1f       	adc	r31, r25
    47dc:	20 83       	st	Z, r18
    47de:	31 83       	std	Z+1, r19	; 0x01
    47e0:	42 83       	std	Z+2, r20	; 0x02
    47e2:	53 83       	std	Z+3, r21	; 0x03
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    47e4:	de 01       	movw	r26, r28
    47e6:	ab 5a       	subi	r26, 0xAB	; 171
    47e8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ea:	fe 01       	movw	r30, r28
    47ec:	e9 5a       	subi	r30, 0xA9	; 169
    47ee:	ff 4f       	sbci	r31, 0xFF	; 255
    47f0:	80 81       	ld	r24, Z
    47f2:	8c 93       	st	X, r24
    47f4:	33 c0       	rjmp	.+102    	; 0x485c <main+0x1a8c>
						 * Shift remaining elements in array in space area
						 ex: 32 - 12 + 3
						     20      + 3
						     20 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
    47f6:	fe 01       	movw	r30, r28
    47f8:	eb 5a       	subi	r30, 0xAB	; 171
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	80 81       	ld	r24, Z
    47fe:	a8 2f       	mov	r26, r24
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	fe 01       	movw	r30, r28
    4804:	eb 5a       	subi	r30, 0xAB	; 171
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 81       	ld	r24, Z
    480a:	88 2f       	mov	r24, r24
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	02 96       	adiw	r24, 0x02	; 2
    4810:	9e 01       	movw	r18, r28
    4812:	2d 58       	subi	r18, 0x8D	; 141
    4814:	3f 4f       	sbci	r19, 0xFF	; 255
    4816:	88 0f       	add	r24, r24
    4818:	99 1f       	adc	r25, r25
    481a:	88 0f       	add	r24, r24
    481c:	99 1f       	adc	r25, r25
    481e:	f9 01       	movw	r30, r18
    4820:	e8 0f       	add	r30, r24
    4822:	f9 1f       	adc	r31, r25
    4824:	20 81       	ld	r18, Z
    4826:	31 81       	ldd	r19, Z+1	; 0x01
    4828:	42 81       	ldd	r20, Z+2	; 0x02
    482a:	53 81       	ldd	r21, Z+3	; 0x03
    482c:	be 01       	movw	r22, r28
    482e:	6d 58       	subi	r22, 0x8D	; 141
    4830:	7f 4f       	sbci	r23, 0xFF	; 255
    4832:	cd 01       	movw	r24, r26
    4834:	88 0f       	add	r24, r24
    4836:	99 1f       	adc	r25, r25
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	fb 01       	movw	r30, r22
    483e:	e8 0f       	add	r30, r24
    4840:	f9 1f       	adc	r31, r25
    4842:	20 83       	st	Z, r18
    4844:	31 83       	std	Z+1, r19	; 0x01
    4846:	42 83       	std	Z+2, r20	; 0x02
    4848:	53 83       	std	Z+3, r21	; 0x03
					break;
				}
				else if(LOC_F32Equation[LOC_U8i]=='-' && LOC_U8i%2 !=0)
				{
					LOC_F32Equation[LOC_U8i-1]-=LOC_F32Equation[LOC_U8i+1];
					for(u8 LOC_U8j=LOC_U8i;LOC_U8j<=LOC_U8P;LOC_U8j++)
    484a:	de 01       	movw	r26, r28
    484c:	ab 5a       	subi	r26, 0xAB	; 171
    484e:	bf 4f       	sbci	r27, 0xFF	; 255
    4850:	fe 01       	movw	r30, r28
    4852:	eb 5a       	subi	r30, 0xAB	; 171
    4854:	ff 4f       	sbci	r31, 0xFF	; 255
    4856:	80 81       	ld	r24, Z
    4858:	8f 5f       	subi	r24, 0xFF	; 255
    485a:	8c 93       	st	X, r24
    485c:	fe 01       	movw	r30, r28
    485e:	eb 5a       	subi	r30, 0xAB	; 171
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	de 01       	movw	r26, r28
    4864:	a2 59       	subi	r26, 0x92	; 146
    4866:	bf 4f       	sbci	r27, 0xFF	; 255
    4868:	90 81       	ld	r25, Z
    486a:	8c 91       	ld	r24, X
    486c:	89 17       	cp	r24, r25
    486e:	18 f6       	brcc	.-122    	; 0x47f6 <main+0x1a26>
						     20      + 3
						     20 + 3
						*/
						LOC_F32Equation[LOC_U8j]=LOC_F32Equation[LOC_U8j+2];
					}
					LOC_U8Y--;
    4870:	de 01       	movw	r26, r28
    4872:	af 58       	subi	r26, 0x8F	; 143
    4874:	bf 4f       	sbci	r27, 0xFF	; 255
    4876:	fe 01       	movw	r30, r28
    4878:	ef 58       	subi	r30, 0x8F	; 143
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	80 81       	ld	r24, Z
    487e:	81 50       	subi	r24, 0x01	; 1
    4880:	8c 93       	st	X, r24
    4882:	14 c0       	rjmp	.+40     	; 0x48ac <main+0x1adc>
					break;
				}
			}
			if(LOC_U8End==1){LOC_U8End=0; break;}
			if(LOC_U8X==1){LOC_U8X=0; continue;}
			for(u8 LOC_U8i=0;LOC_U8i<=LOC_U8P;LOC_U8i++)
    4884:	de 01       	movw	r26, r28
    4886:	a9 5a       	subi	r26, 0xA9	; 169
    4888:	bf 4f       	sbci	r27, 0xFF	; 255
    488a:	fe 01       	movw	r30, r28
    488c:	e9 5a       	subi	r30, 0xA9	; 169
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 81       	ld	r24, Z
    4892:	8f 5f       	subi	r24, 0xFF	; 255
    4894:	8c 93       	st	X, r24
    4896:	fe 01       	movw	r30, r28
    4898:	e9 5a       	subi	r30, 0xA9	; 169
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	de 01       	movw	r26, r28
    489e:	a2 59       	subi	r26, 0x92	; 146
    48a0:	bf 4f       	sbci	r27, 0xFF	; 255
    48a2:	90 81       	ld	r25, Z
    48a4:	8c 91       	ld	r24, X
    48a6:	89 17       	cp	r24, r25
    48a8:	08 f0       	brcs	.+2      	; 0x48ac <main+0x1adc>
    48aa:	4b ce       	rjmp	.-874    	; 0x4542 <main+0x1772>
			doing all multiply and divide operations (HIGH priority)
			doing all addition and subtraction operations (LOW priority)
			Display result*/
			LOC_U8CalcFlag=0;
			LOC_U8Y=LOC_U8P/2; /* number of operations needed */
			while(LOC_U8Y)
    48ac:	fe 01       	movw	r30, r28
    48ae:	ef 58       	subi	r30, 0x8F	; 143
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	80 81       	ld	r24, Z
    48b4:	88 23       	and	r24, r24
    48b6:	09 f0       	breq	.+2      	; 0x48ba <main+0x1aea>
    48b8:	bc cb       	rjmp	.-2184   	; 0x4032 <main+0x1262>
					LOC_U8Y--;
					break;
				}
			}
			}
			if(LOC_U8ResetFlag==0)
    48ba:	fe 01       	movw	r30, r28
    48bc:	e8 59       	subi	r30, 0x98	; 152
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	80 81       	ld	r24, Z
    48c2:	88 23       	and	r24, r24
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <main+0x1af8>
    48c6:	9c c0       	rjmp	.+312    	; 0x4a00 <main+0x1c30>
			{
				if(LOC_U8Count>9 && LOC_U8Count<16)
    48c8:	fe 01       	movw	r30, r28
    48ca:	ef 59       	subi	r30, 0x9F	; 159
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	80 81       	ld	r24, Z
    48d0:	8a 30       	cpi	r24, 0x0A	; 10
    48d2:	50 f0       	brcs	.+20     	; 0x48e8 <main+0x1b18>
    48d4:	fe 01       	movw	r30, r28
    48d6:	ef 59       	subi	r30, 0x9F	; 159
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	80 81       	ld	r24, Z
    48dc:	80 31       	cpi	r24, 0x10	; 16
    48de:	20 f4       	brcc	.+8      	; 0x48e8 <main+0x1b18>
				{
					LCD_VidGoToLocation(1,0);
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	60 e0       	ldi	r22, 0x00	; 0
    48e4:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
				}
				LOC_F32Res=LOC_F32Equation[0];
    48e8:	9e 01       	movw	r18, r28
    48ea:	2d 59       	subi	r18, 0x9D	; 157
    48ec:	3f 4f       	sbci	r19, 0xFF	; 255
    48ee:	fe 01       	movw	r30, r28
    48f0:	ed 58       	subi	r30, 0x8D	; 141
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	80 81       	ld	r24, Z
    48f6:	91 81       	ldd	r25, Z+1	; 0x01
    48f8:	a2 81       	ldd	r26, Z+2	; 0x02
    48fa:	b3 81       	ldd	r27, Z+3	; 0x03
    48fc:	f9 01       	movw	r30, r18
    48fe:	80 83       	st	Z, r24
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	a2 83       	std	Z+2, r26	; 0x02
    4904:	b3 83       	std	Z+3, r27	; 0x03
				LCD_VidSendDataFloat(LOC_F32Res); /* store result and display it  */
    4906:	fe 01       	movw	r30, r28
    4908:	ed 59       	subi	r30, 0x9D	; 157
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	80 81       	ld	r24, Z
    490e:	91 81       	ldd	r25, Z+1	; 0x01
    4910:	a2 81       	ldd	r26, Z+2	; 0x02
    4912:	b3 81       	ldd	r27, Z+3	; 0x03
    4914:	bc 01       	movw	r22, r24
    4916:	cd 01       	movw	r24, r26
    4918:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_VidSendDataFloat>
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	aa ef       	ldi	r26, 0xFA	; 250
    4922:	b3 e4       	ldi	r27, 0x43	; 67
    4924:	89 8f       	std	Y+25, r24	; 0x19
    4926:	9a 8f       	std	Y+26, r25	; 0x1a
    4928:	ab 8f       	std	Y+27, r26	; 0x1b
    492a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492c:	69 8d       	ldd	r22, Y+25	; 0x19
    492e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4934:	20 e0       	ldi	r18, 0x00	; 0
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	4a ef       	ldi	r20, 0xFA	; 250
    493a:	54 e4       	ldi	r21, 0x44	; 68
    493c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4940:	dc 01       	movw	r26, r24
    4942:	cb 01       	movw	r24, r22
    4944:	8d 8b       	std	Y+21, r24	; 0x15
    4946:	9e 8b       	std	Y+22, r25	; 0x16
    4948:	af 8b       	std	Y+23, r26	; 0x17
    494a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    494c:	6d 89       	ldd	r22, Y+21	; 0x15
    494e:	7e 89       	ldd	r23, Y+22	; 0x16
    4950:	8f 89       	ldd	r24, Y+23	; 0x17
    4952:	98 8d       	ldd	r25, Y+24	; 0x18
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	40 e8       	ldi	r20, 0x80	; 128
    495a:	5f e3       	ldi	r21, 0x3F	; 63
    495c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4960:	88 23       	and	r24, r24
    4962:	2c f4       	brge	.+10     	; 0x496e <main+0x1b9e>
		__ticks = 1;
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	9c 8b       	std	Y+20, r25	; 0x14
    496a:	8b 8b       	std	Y+19, r24	; 0x13
    496c:	3f c0       	rjmp	.+126    	; 0x49ec <main+0x1c1c>
	else if (__tmp > 65535)
    496e:	6d 89       	ldd	r22, Y+21	; 0x15
    4970:	7e 89       	ldd	r23, Y+22	; 0x16
    4972:	8f 89       	ldd	r24, Y+23	; 0x17
    4974:	98 8d       	ldd	r25, Y+24	; 0x18
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	3f ef       	ldi	r19, 0xFF	; 255
    497a:	4f e7       	ldi	r20, 0x7F	; 127
    497c:	57 e4       	ldi	r21, 0x47	; 71
    497e:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4982:	18 16       	cp	r1, r24
    4984:	4c f5       	brge	.+82     	; 0x49d8 <main+0x1c08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4986:	69 8d       	ldd	r22, Y+25	; 0x19
    4988:	7a 8d       	ldd	r23, Y+26	; 0x1a
    498a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    498c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	30 e0       	ldi	r19, 0x00	; 0
    4992:	40 e2       	ldi	r20, 0x20	; 32
    4994:	51 e4       	ldi	r21, 0x41	; 65
    4996:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	bc 01       	movw	r22, r24
    49a0:	cd 01       	movw	r24, r26
    49a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49a6:	dc 01       	movw	r26, r24
    49a8:	cb 01       	movw	r24, r22
    49aa:	9c 8b       	std	Y+20, r25	; 0x14
    49ac:	8b 8b       	std	Y+19, r24	; 0x13
    49ae:	0f c0       	rjmp	.+30     	; 0x49ce <main+0x1bfe>
    49b0:	88 ec       	ldi	r24, 0xC8	; 200
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	9a 8b       	std	Y+18, r25	; 0x12
    49b6:	89 8b       	std	Y+17, r24	; 0x11
    49b8:	89 89       	ldd	r24, Y+17	; 0x11
    49ba:	9a 89       	ldd	r25, Y+18	; 0x12
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	f1 f7       	brne	.-4      	; 0x49bc <main+0x1bec>
    49c0:	9a 8b       	std	Y+18, r25	; 0x12
    49c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c4:	8b 89       	ldd	r24, Y+19	; 0x13
    49c6:	9c 89       	ldd	r25, Y+20	; 0x14
    49c8:	01 97       	sbiw	r24, 0x01	; 1
    49ca:	9c 8b       	std	Y+20, r25	; 0x14
    49cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ce:	8b 89       	ldd	r24, Y+19	; 0x13
    49d0:	9c 89       	ldd	r25, Y+20	; 0x14
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	69 f7       	brne	.-38     	; 0x49b0 <main+0x1be0>
    49d6:	14 c0       	rjmp	.+40     	; 0x4a00 <main+0x1c30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d8:	6d 89       	ldd	r22, Y+21	; 0x15
    49da:	7e 89       	ldd	r23, Y+22	; 0x16
    49dc:	8f 89       	ldd	r24, Y+23	; 0x17
    49de:	98 8d       	ldd	r25, Y+24	; 0x18
    49e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	9c 8b       	std	Y+20, r25	; 0x14
    49ea:	8b 8b       	std	Y+19, r24	; 0x13
    49ec:	8b 89       	ldd	r24, Y+19	; 0x13
    49ee:	9c 89       	ldd	r25, Y+20	; 0x14
    49f0:	98 8b       	std	Y+16, r25	; 0x10
    49f2:	8f 87       	std	Y+15, r24	; 0x0f
    49f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    49f6:	98 89       	ldd	r25, Y+16	; 0x10
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	f1 f7       	brne	.-4      	; 0x49f8 <main+0x1c28>
    49fc:	98 8b       	std	Y+16, r25	; 0x10
    49fe:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
			}
		}
		if(LOC_U8Count==16)
    4a00:	fe 01       	movw	r30, r28
    4a02:	ef 59       	subi	r30, 0x9F	; 159
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	80 81       	ld	r24, Z
    4a08:	80 31       	cpi	r24, 0x10	; 16
    4a0a:	31 f4       	brne	.+12     	; 0x4a18 <main+0x1c48>
		{
			/* to go to second line if first line completed */
			LCD_VidGoToLocation(1,0);
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	60 e0       	ldi	r22, 0x00	; 0
    4a10:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
    4a14:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <main+0xe6>
		}
/************************************** TESTCASE *******************************************************/
		else if(LOC_U8Count==29)
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ef 59       	subi	r30, 0x9F	; 159
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 81       	ld	r24, Z
    4a20:	8d 31       	cpi	r24, 0x1D	; 29
    4a22:	11 f0       	breq	.+4      	; 0x4a28 <main+0x1c58>
    4a24:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <main+0xe6>
		{
			/* Display Overflow error if two Lines Completed and reset */
			LCD_VidClearData();
    4a28:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
			LCD_VidSetDataLocation();
    4a2c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
			LCD_VidSendDatastring("OVERFLOW");
    4a30:	86 e6       	ldi	r24, 0x66	; 102
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	aa ef       	ldi	r26, 0xFA	; 250
    4a3e:	b3 e4       	ldi	r27, 0x43	; 67
    4a40:	8b 87       	std	Y+11, r24	; 0x0b
    4a42:	9c 87       	std	Y+12, r25	; 0x0c
    4a44:	ad 87       	std	Y+13, r26	; 0x0d
    4a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	4a ef       	ldi	r20, 0xFA	; 250
    4a56:	54 e4       	ldi	r21, 0x44	; 68
    4a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	8f 83       	std	Y+7, r24	; 0x07
    4a62:	98 87       	std	Y+8, r25	; 0x08
    4a64:	a9 87       	std	Y+9, r26	; 0x09
    4a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a68:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6a:	78 85       	ldd	r23, Y+8	; 0x08
    4a6c:	89 85       	ldd	r24, Y+9	; 0x09
    4a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	2c f4       	brge	.+10     	; 0x4a8a <main+0x1cba>
		__ticks = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9e 83       	std	Y+6, r25	; 0x06
    4a86:	8d 83       	std	Y+5, r24	; 0x05
    4a88:	3f c0       	rjmp	.+126    	; 0x4b08 <main+0x1d38>
	else if (__tmp > 65535)
    4a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a8c:	78 85       	ldd	r23, Y+8	; 0x08
    4a8e:	89 85       	ldd	r24, Y+9	; 0x09
    4a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	3f ef       	ldi	r19, 0xFF	; 255
    4a96:	4f e7       	ldi	r20, 0x7F	; 127
    4a98:	57 e4       	ldi	r21, 0x47	; 71
    4a9a:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4a9e:	18 16       	cp	r1, r24
    4aa0:	4c f5       	brge	.+82     	; 0x4af4 <main+0x1d24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e2       	ldi	r20, 0x20	; 32
    4ab0:	51 e4       	ldi	r21, 0x41	; 65
    4ab2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	9e 83       	std	Y+6, r25	; 0x06
    4ac8:	8d 83       	std	Y+5, r24	; 0x05
    4aca:	0f c0       	rjmp	.+30     	; 0x4aea <main+0x1d1a>
    4acc:	88 ec       	ldi	r24, 0xC8	; 200
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	9c 83       	std	Y+4, r25	; 0x04
    4ad2:	8b 83       	std	Y+3, r24	; 0x03
    4ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	f1 f7       	brne	.-4      	; 0x4ad8 <main+0x1d08>
    4adc:	9c 83       	std	Y+4, r25	; 0x04
    4ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	9e 83       	std	Y+6, r25	; 0x06
    4ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aea:	8d 81       	ldd	r24, Y+5	; 0x05
    4aec:	9e 81       	ldd	r25, Y+6	; 0x06
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	69 f7       	brne	.-38     	; 0x4acc <main+0x1cfc>
    4af2:	14 c0       	rjmp	.+40     	; 0x4b1c <main+0x1d4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af4:	6f 81       	ldd	r22, Y+7	; 0x07
    4af6:	78 85       	ldd	r23, Y+8	; 0x08
    4af8:	89 85       	ldd	r24, Y+9	; 0x09
    4afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	9e 83       	std	Y+6, r25	; 0x06
    4b06:	8d 83       	std	Y+5, r24	; 0x05
    4b08:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	9a 81       	ldd	r25, Y+2	; 0x02
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <main+0x1d44>
    4b18:	9a 83       	std	Y+2, r25	; 0x02
    4b1a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_VidClearData();
    4b1c:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
			LCD_VidSetDataLocation();
    4b20:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
    4b24:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <main+0xe6>

00004b28 <IsNum>:
 * Arguments   : input entered by user
 * return      : 0 -> if input is not (from ASCII of 0 to ASCII of 9)
                 1 -> if input is number (This check in ASCII)
 */
u8 IsNum(u8 Copy_U8X)
{
    4b28:	df 93       	push	r29
    4b2a:	cf 93       	push	r28
    4b2c:	00 d0       	rcall	.+0      	; 0x4b2e <IsNum+0x6>
    4b2e:	cd b7       	in	r28, 0x3d	; 61
    4b30:	de b7       	in	r29, 0x3e	; 62
    4b32:	89 83       	std	Y+1, r24	; 0x01
	/* Check if input is number */
	if(Copy_U8X>='0' && Copy_U8X<='9')
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	80 33       	cpi	r24, 0x30	; 48
    4b38:	30 f0       	brcs	.+12     	; 0x4b46 <IsNum+0x1e>
    4b3a:	89 81       	ldd	r24, Y+1	; 0x01
    4b3c:	8a 33       	cpi	r24, 0x3A	; 58
    4b3e:	18 f4       	brcc	.+6      	; 0x4b46 <IsNum+0x1e>
		return 1;
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	8a 83       	std	Y+2, r24	; 0x02
    4b44:	01 c0       	rjmp	.+2      	; 0x4b48 <IsNum+0x20>
	else
		return 0;
    4b46:	1a 82       	std	Y+2, r1	; 0x02
    4b48:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	cf 91       	pop	r28
    4b50:	df 91       	pop	r29
    4b52:	08 95       	ret

00004b54 <IsOperand>:
 * Arguments   : input entered by user
 * return      : 0 -> if input is not operand
                 1 -> if input is operand (This check in ASCII)
 */
u8 IsOperand(u8 Copy_U8X)
{
    4b54:	df 93       	push	r29
    4b56:	cf 93       	push	r28
    4b58:	00 d0       	rcall	.+0      	; 0x4b5a <IsOperand+0x6>
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    4b5e:	89 83       	std	Y+1, r24	; 0x01
	/* Check if input is operand (+,-,*,/) */
	if(Copy_U8X=='+' || Copy_U8X=='-' || Copy_U8X=='*' || Copy_U8X=='/')
    4b60:	89 81       	ldd	r24, Y+1	; 0x01
    4b62:	8b 32       	cpi	r24, 0x2B	; 43
    4b64:	49 f0       	breq	.+18     	; 0x4b78 <IsOperand+0x24>
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
    4b68:	8d 32       	cpi	r24, 0x2D	; 45
    4b6a:	31 f0       	breq	.+12     	; 0x4b78 <IsOperand+0x24>
    4b6c:	89 81       	ldd	r24, Y+1	; 0x01
    4b6e:	8a 32       	cpi	r24, 0x2A	; 42
    4b70:	19 f0       	breq	.+6      	; 0x4b78 <IsOperand+0x24>
    4b72:	89 81       	ldd	r24, Y+1	; 0x01
    4b74:	8f 32       	cpi	r24, 0x2F	; 47
    4b76:	19 f4       	brne	.+6      	; 0x4b7e <IsOperand+0x2a>
		return 1;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	8a 83       	std	Y+2, r24	; 0x02
    4b7c:	01 c0       	rjmp	.+2      	; 0x4b80 <IsOperand+0x2c>
	else
		return 0;
    4b7e:	1a 82       	std	Y+2, r1	; 0x02
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	cf 91       	pop	r28
    4b88:	df 91       	pop	r29
    4b8a:	08 95       	ret

00004b8c <welcome>:
 * Description : Display welcome message
 * Arguments   : void
 * return      : void
 */
void welcome(void)
{
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
    4b94:	2e 97       	sbiw	r28, 0x0e	; 14
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	f8 94       	cli
    4b9a:	de bf       	out	0x3e, r29	; 62
    4b9c:	0f be       	out	0x3f, r0	; 63
    4b9e:	cd bf       	out	0x3d, r28	; 61
	LCD_VidSendDatastring("SimpleCalculator");
    4ba0:	8f e6       	ldi	r24, 0x6F	; 111
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
	LCD_VidGoToLocation(1,2);
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	62 e0       	ldi	r22, 0x02	; 2
    4bac:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_VidGoToLocation>
	LCD_VidSendDatastring("By Andrew");
    4bb0:	80 e8       	ldi	r24, 0x80	; 128
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 42 10 	call	0x2084	; 0x2084 <LCD_VidSendDatastring>
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	aa e7       	ldi	r26, 0x7A	; 122
    4bbe:	b4 e4       	ldi	r27, 0x44	; 68
    4bc0:	8b 87       	std	Y+11, r24	; 0x0b
    4bc2:	9c 87       	std	Y+12, r25	; 0x0c
    4bc4:	ad 87       	std	Y+13, r26	; 0x0d
    4bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	4a ef       	ldi	r20, 0xFA	; 250
    4bd6:	54 e4       	ldi	r21, 0x44	; 68
    4bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	8f 83       	std	Y+7, r24	; 0x07
    4be2:	98 87       	std	Y+8, r25	; 0x08
    4be4:	a9 87       	std	Y+9, r26	; 0x09
    4be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4be8:	6f 81       	ldd	r22, Y+7	; 0x07
    4bea:	78 85       	ldd	r23, Y+8	; 0x08
    4bec:	89 85       	ldd	r24, Y+9	; 0x09
    4bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	40 e8       	ldi	r20, 0x80	; 128
    4bf6:	5f e3       	ldi	r21, 0x3F	; 63
    4bf8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    4bfc:	88 23       	and	r24, r24
    4bfe:	2c f4       	brge	.+10     	; 0x4c0a <welcome+0x7e>
		__ticks = 1;
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	9e 83       	std	Y+6, r25	; 0x06
    4c06:	8d 83       	std	Y+5, r24	; 0x05
    4c08:	3f c0       	rjmp	.+126    	; 0x4c88 <welcome+0xfc>
	else if (__tmp > 65535)
    4c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c0c:	78 85       	ldd	r23, Y+8	; 0x08
    4c0e:	89 85       	ldd	r24, Y+9	; 0x09
    4c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	3f ef       	ldi	r19, 0xFF	; 255
    4c16:	4f e7       	ldi	r20, 0x7F	; 127
    4c18:	57 e4       	ldi	r21, 0x47	; 71
    4c1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    4c1e:	18 16       	cp	r1, r24
    4c20:	4c f5       	brge	.+82     	; 0x4c74 <welcome+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    4c2e:	40 e2       	ldi	r20, 0x20	; 32
    4c30:	51 e4       	ldi	r21, 0x41	; 65
    4c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c36:	dc 01       	movw	r26, r24
    4c38:	cb 01       	movw	r24, r22
    4c3a:	bc 01       	movw	r22, r24
    4c3c:	cd 01       	movw	r24, r26
    4c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c42:	dc 01       	movw	r26, r24
    4c44:	cb 01       	movw	r24, r22
    4c46:	9e 83       	std	Y+6, r25	; 0x06
    4c48:	8d 83       	std	Y+5, r24	; 0x05
    4c4a:	0f c0       	rjmp	.+30     	; 0x4c6a <welcome+0xde>
    4c4c:	88 ec       	ldi	r24, 0xC8	; 200
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	9c 83       	std	Y+4, r25	; 0x04
    4c52:	8b 83       	std	Y+3, r24	; 0x03
    4c54:	8b 81       	ldd	r24, Y+3	; 0x03
    4c56:	9c 81       	ldd	r25, Y+4	; 0x04
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	f1 f7       	brne	.-4      	; 0x4c58 <welcome+0xcc>
    4c5c:	9c 83       	std	Y+4, r25	; 0x04
    4c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c60:	8d 81       	ldd	r24, Y+5	; 0x05
    4c62:	9e 81       	ldd	r25, Y+6	; 0x06
    4c64:	01 97       	sbiw	r24, 0x01	; 1
    4c66:	9e 83       	std	Y+6, r25	; 0x06
    4c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6e:	00 97       	sbiw	r24, 0x00	; 0
    4c70:	69 f7       	brne	.-38     	; 0x4c4c <welcome+0xc0>
    4c72:	14 c0       	rjmp	.+40     	; 0x4c9c <welcome+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c74:	6f 81       	ldd	r22, Y+7	; 0x07
    4c76:	78 85       	ldd	r23, Y+8	; 0x08
    4c78:	89 85       	ldd	r24, Y+9	; 0x09
    4c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	9e 83       	std	Y+6, r25	; 0x06
    4c86:	8d 83       	std	Y+5, r24	; 0x05
    4c88:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8c:	9a 83       	std	Y+2, r25	; 0x02
    4c8e:	89 83       	std	Y+1, r24	; 0x01
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	9a 81       	ldd	r25, Y+2	; 0x02
    4c94:	01 97       	sbiw	r24, 0x01	; 1
    4c96:	f1 f7       	brne	.-4      	; 0x4c94 <welcome+0x108>
    4c98:	9a 83       	std	Y+2, r25	; 0x02
    4c9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_VidClearData();
    4c9c:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_VidClearData>
	LCD_VidSetDataLocation();
    4ca0:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_VidSetDataLocation>
}
    4ca4:	2e 96       	adiw	r28, 0x0e	; 14
    4ca6:	0f b6       	in	r0, 0x3f	; 63
    4ca8:	f8 94       	cli
    4caa:	de bf       	out	0x3e, r29	; 62
    4cac:	0f be       	out	0x3f, r0	; 63
    4cae:	cd bf       	out	0x3d, r28	; 61
    4cb0:	cf 91       	pop	r28
    4cb2:	df 91       	pop	r29
    4cb4:	08 95       	ret

00004cb6 <__divmodsi4>:
    4cb6:	97 fb       	bst	r25, 7
    4cb8:	09 2e       	mov	r0, r25
    4cba:	05 26       	eor	r0, r21
    4cbc:	0e d0       	rcall	.+28     	; 0x4cda <__divmodsi4_neg1>
    4cbe:	57 fd       	sbrc	r21, 7
    4cc0:	04 d0       	rcall	.+8      	; 0x4cca <__divmodsi4_neg2>
    4cc2:	14 d0       	rcall	.+40     	; 0x4cec <__udivmodsi4>
    4cc4:	0a d0       	rcall	.+20     	; 0x4cda <__divmodsi4_neg1>
    4cc6:	00 1c       	adc	r0, r0
    4cc8:	38 f4       	brcc	.+14     	; 0x4cd8 <__divmodsi4_exit>

00004cca <__divmodsi4_neg2>:
    4cca:	50 95       	com	r21
    4ccc:	40 95       	com	r20
    4cce:	30 95       	com	r19
    4cd0:	21 95       	neg	r18
    4cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd4:	4f 4f       	sbci	r20, 0xFF	; 255
    4cd6:	5f 4f       	sbci	r21, 0xFF	; 255

00004cd8 <__divmodsi4_exit>:
    4cd8:	08 95       	ret

00004cda <__divmodsi4_neg1>:
    4cda:	f6 f7       	brtc	.-4      	; 0x4cd8 <__divmodsi4_exit>
    4cdc:	90 95       	com	r25
    4cde:	80 95       	com	r24
    4ce0:	70 95       	com	r23
    4ce2:	61 95       	neg	r22
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	08 95       	ret

00004cec <__udivmodsi4>:
    4cec:	a1 e2       	ldi	r26, 0x21	; 33
    4cee:	1a 2e       	mov	r1, r26
    4cf0:	aa 1b       	sub	r26, r26
    4cf2:	bb 1b       	sub	r27, r27
    4cf4:	fd 01       	movw	r30, r26
    4cf6:	0d c0       	rjmp	.+26     	; 0x4d12 <__udivmodsi4_ep>

00004cf8 <__udivmodsi4_loop>:
    4cf8:	aa 1f       	adc	r26, r26
    4cfa:	bb 1f       	adc	r27, r27
    4cfc:	ee 1f       	adc	r30, r30
    4cfe:	ff 1f       	adc	r31, r31
    4d00:	a2 17       	cp	r26, r18
    4d02:	b3 07       	cpc	r27, r19
    4d04:	e4 07       	cpc	r30, r20
    4d06:	f5 07       	cpc	r31, r21
    4d08:	20 f0       	brcs	.+8      	; 0x4d12 <__udivmodsi4_ep>
    4d0a:	a2 1b       	sub	r26, r18
    4d0c:	b3 0b       	sbc	r27, r19
    4d0e:	e4 0b       	sbc	r30, r20
    4d10:	f5 0b       	sbc	r31, r21

00004d12 <__udivmodsi4_ep>:
    4d12:	66 1f       	adc	r22, r22
    4d14:	77 1f       	adc	r23, r23
    4d16:	88 1f       	adc	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	1a 94       	dec	r1
    4d1c:	69 f7       	brne	.-38     	; 0x4cf8 <__udivmodsi4_loop>
    4d1e:	60 95       	com	r22
    4d20:	70 95       	com	r23
    4d22:	80 95       	com	r24
    4d24:	90 95       	com	r25
    4d26:	9b 01       	movw	r18, r22
    4d28:	ac 01       	movw	r20, r24
    4d2a:	bd 01       	movw	r22, r26
    4d2c:	cf 01       	movw	r24, r30
    4d2e:	08 95       	ret

00004d30 <__prologue_saves__>:
    4d30:	2f 92       	push	r2
    4d32:	3f 92       	push	r3
    4d34:	4f 92       	push	r4
    4d36:	5f 92       	push	r5
    4d38:	6f 92       	push	r6
    4d3a:	7f 92       	push	r7
    4d3c:	8f 92       	push	r8
    4d3e:	9f 92       	push	r9
    4d40:	af 92       	push	r10
    4d42:	bf 92       	push	r11
    4d44:	cf 92       	push	r12
    4d46:	df 92       	push	r13
    4d48:	ef 92       	push	r14
    4d4a:	ff 92       	push	r15
    4d4c:	0f 93       	push	r16
    4d4e:	1f 93       	push	r17
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	cd b7       	in	r28, 0x3d	; 61
    4d56:	de b7       	in	r29, 0x3e	; 62
    4d58:	ca 1b       	sub	r28, r26
    4d5a:	db 0b       	sbc	r29, r27
    4d5c:	0f b6       	in	r0, 0x3f	; 63
    4d5e:	f8 94       	cli
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	0f be       	out	0x3f, r0	; 63
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	09 94       	ijmp

00004d68 <__epilogue_restores__>:
    4d68:	2a 88       	ldd	r2, Y+18	; 0x12
    4d6a:	39 88       	ldd	r3, Y+17	; 0x11
    4d6c:	48 88       	ldd	r4, Y+16	; 0x10
    4d6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d70:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d72:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d74:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d76:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d78:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d7a:	b9 84       	ldd	r11, Y+9	; 0x09
    4d7c:	c8 84       	ldd	r12, Y+8	; 0x08
    4d7e:	df 80       	ldd	r13, Y+7	; 0x07
    4d80:	ee 80       	ldd	r14, Y+6	; 0x06
    4d82:	fd 80       	ldd	r15, Y+5	; 0x05
    4d84:	0c 81       	ldd	r16, Y+4	; 0x04
    4d86:	1b 81       	ldd	r17, Y+3	; 0x03
    4d88:	aa 81       	ldd	r26, Y+2	; 0x02
    4d8a:	b9 81       	ldd	r27, Y+1	; 0x01
    4d8c:	ce 0f       	add	r28, r30
    4d8e:	d1 1d       	adc	r29, r1
    4d90:	0f b6       	in	r0, 0x3f	; 63
    4d92:	f8 94       	cli
    4d94:	de bf       	out	0x3e, r29	; 62
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	cd bf       	out	0x3d, r28	; 61
    4d9a:	ed 01       	movw	r28, r26
    4d9c:	08 95       	ret

00004d9e <_exit>:
    4d9e:	f8 94       	cli

00004da0 <__stop_program>:
    4da0:	ff cf       	rjmp	.-2      	; 0x4da0 <__stop_program>
